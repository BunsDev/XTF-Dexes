{
  "address": "0xD2474C405734c614475768Ab4224C05f952e38aE",
  "abi": [
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "_symbol",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "_address",
              "type": "address"
            },
            {
              "internalType": "uint32",
              "name": "_chainId",
              "type": "uint32"
            },
            {
              "internalType": "address",
              "name": "_aggregator",
              "type": "address"
            },
            {
              "internalType": "string[]",
              "name": "_tags",
              "type": "string[]"
            }
          ],
          "internalType": "struct TokenInfo[]",
          "name": "_tokenInfo",
          "type": "tuple[]"
        },
        {
          "internalType": "address",
          "name": "_liquidityManager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "router",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "_timeWindow",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "_sampleSize",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "_bribeUnit",
              "type": "uint256"
            }
          ],
          "internalType": "struct AggregatorParams",
          "name": "_aggregatorParams",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "router",
          "type": "address"
        }
      ],
      "name": "InvalidRouter",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "bribeUnit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "messageId",
              "type": "bytes32"
            },
            {
              "internalType": "uint64",
              "name": "sourceChainSelector",
              "type": "uint64"
            },
            {
              "internalType": "bytes",
              "name": "sender",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "token",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Client.EVMTokenAmount[]",
              "name": "destTokenAmounts",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct Client.Any2EVMMessage",
          "name": "message",
          "type": "tuple"
        }
      ],
      "name": "ccipReceive",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "chainId",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "chainLinkData",
      "outputs": [
        {
          "internalType": "address",
          "name": "router",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "link",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "currentChainSelectorId",
          "type": "uint64"
        },
        {
          "internalType": "bytes32",
          "name": "keyHash",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "name": "chainSelectorIdToSidechainAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "checkTokenParams",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collectPriceFeeds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRouter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isMainChain",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "lastIndexOrder",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastIndexTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "liquidities",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liquidityManager",
      "outputs": [
        {
          "internalType": "contract LiquidityManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "liquidityMessages",
      "outputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "chainId",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mainChainId",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "movingAverage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "indexOrders",
          "type": "uint256[]"
        },
        {
          "internalType": "string",
          "name": "tag",
          "type": "string"
        }
      ],
      "name": "persistIndex",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_chainId",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "_mainChainId",
          "type": "uint32"
        }
      ],
      "name": "setChainId",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_router",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_link",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "_currentChainSelectorId",
          "type": "uint64"
        },
        {
          "internalType": "bytes32",
          "name": "_keyHash",
          "type": "bytes32"
        }
      ],
      "name": "setChainLinkData",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "chainSelectorId",
          "type": "uint64"
        },
        {
          "internalType": "address",
          "name": "sideChainAddress",
          "type": "address"
        }
      ],
      "name": "setSideChainAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_taggingVerifier",
          "type": "address"
        }
      ],
      "name": "setTaggingVerifier",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "supplyMessages",
      "outputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "supply",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "chainId",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "taggingVerifier",
      "outputs": [
        {
          "internalType": "contract TaggingVerifier",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tagsIndexOrder",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "tagsIndexTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokenInfo",
      "outputs": [
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "_chainId",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "_aggregator",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokenParamsTimestampUpdates",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokenSymbols",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "tokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "totalSupplies",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_totalSupplies",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_liquidities",
          "type": "uint256[]"
        }
      ],
      "name": "updateTokenParams",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x1caa14b3782ebe28ae8e9417a31811e73fc0b455b4217da0a124657c9dd8a0ac",
  "receipt": {
    "to": null,
    "from": "0x2a1F5eB3e84e58e6F1e565306298B9dE1273f203",
    "contractAddress": "0xD2474C405734c614475768Ab4224C05f952e38aE",
    "transactionIndex": 57,
    "gasUsed": "5351274",
    "logsBloom": "0x
    "blockHash": "0xb7e26efba1b0380ff79f3ce55dd18b413fd3ca417fa89f5d358217a198ba4c23",
    "transactionHash": "0x1caa14b3782ebe28ae8e9417a31811e73fc0b455b4217da0a124657c9dd8a0ac",
    "logs": [],
    "blockNumber": 6024376,
    "cumulativeGasUsed": "13585834",
    "status": 1,
    "byzantium": true
  },
  "args": [
    [
      {
        "_symbol": "icp",
        "_address": "0x261077B4735a9f51Fa4D039622e44034685f8D15",
        "_chainId": "11155111",
        "_aggregator": "0x39d023905bDe8a03a2DE1277d32Ecd9873669756",
        "_tags": [
          "governance"
        ]
      },
      {
        "_symbol": "uni",
        "_address": "0xE86Aaa5C82E1E27216E5C99965CDFDD7146e427c",
        "_chainId": "11155111",
        "_aggregator": "0x1A25d64647ed559E805b1A3671ff6a7007DeDfe8",
        "_tags": [
          "governance"
        ]
      },
      {
        "_symbol": "mkr",
        "_address": "0x4F5599a8Ac5277844b08AC10f285F5fD835Ea26e",
        "_chainId": "11155111",
        "_aggregator": "0xddEFeB3cb5a1aa63DDfDa11Ac1C19bFDA84852D8",
        "_tags": [
          "governance"
        ]
      },
      {
        "_symbol": "aave",
        "_address": "0x279d81B84a6Ea9a681D2D0C05069D9bCC7b1Dea2",
        "_chainId": "11155111",
        "_aggregator": "0x29BF60e7F7297eB933b669874E6f3D58fB3410bF",
        "_tags": [
          "governance"
        ]
      },
      {
        "_symbol": "xec",
        "_address": "0x3F199C3C5bCa39a6dcFCcD58ef4444f005340E8c",
        "_chainId": "11155111",
        "_aggregator": "0xb76129dEa978931f2b6Eb5d19Cf0ffa8637E221B",
        "_tags": [
          "governance"
        ]
      },
      {
        "_symbol": "rbn",
        "_address": "0xD0a2eAC2c85F5268862be40DC2C5A291E2642203",
        "_chainId": "11155111",
        "_aggregator": "0xFa49d3bf6Db9ac1aFB8836eEc64Da0e111d0c8e6",
        "_tags": [
          "governance"
        ]
      },
      {
        "_symbol": "snx",
        "_address": "0x96FE8a937b7775dF3d5935689a2752020F3E39eE",
        "_chainId": "11155111",
        "_aggregator": "0x96Eb955a0ca6453b33673Ab7a416Bc931696Ae57",
        "_tags": [
          "governance"
        ]
      },
      {
        "_symbol": "cake",
        "_address": "0x6f183E74FB60bB77329d9F896b1f705F9F17Cc68",
        "_chainId": "11155111",
        "_aggregator": "0x2238c422917636e71F0b79643556865Ed05F5B4B",
        "_tags": [
          "governance"
        ]
      },
      {
        "_symbol": "crv",
        "_address": "0x52D90Fb98e99142F2f8f40Cf1C38755Cd779Bb55",
        "_chainId": "11155111",
        "_aggregator": "0x644Bc06b7e4b3422a8f4E8108F50Aa8dB2a3d3F6",
        "_tags": [
          "governance"
        ]
      },
      {
        "_symbol": "ens",
        "_address": "0x45f9c02617dF6D1c75d5a9259D7BE941B3Cbe6bb",
        "_chainId": "11155111",
        "_aggregator": "0x75EC4640149086099f64b0bdec3906FE0A3e722c",
        "_tags": [
          "governance"
        ]
      },
      {
        "_symbol": "zrx",
        "_address": "0xA2fbE4BC90Bcef9Eb38FbD7EDD8A4cFd0C1CE6c1",
        "_chainId": "11155111",
        "_aggregator": "0xa7191Dc6a118bbcA51E50Ee02E836E7Fb801d607",
        "_tags": [
          "governance"
        ]
      },
      {
        "_symbol": "amp",
        "_address": "0x01b9f082F3f67fA334F7EB0bA236C7ce05086EFB",
        "_chainId": "11155111",
        "_aggregator": "0x3d3464FFfe0CB565E5776C9931C1099D9E54C921",
        "_tags": [
          "governance"
        ]
      },
      {
        "_symbol": "comp",
        "_address": "0x1745A6e812CD39FFa7542214B2D3a4D864F83eaB",
        "_chainId": "11155111",
        "_aggregator": "0x7716D49E0d1d1AFbF593C04edCB8541E96D439b9",
        "_tags": [
          "governance"
        ]
      },
      {
        "_symbol": "yfi",
        "_address": "0x2e8B93D6cB791C28777E86Ec4c7e663DDF1B7225",
        "_chainId": "11155111",
        "_aggregator": "0x0CC0Fc50BA7E459C061eF7Af9826e8Dbbb17d3Ce",
        "_tags": [
          "governance"
        ]
      }
    ],
    "0x6F48ed8Ba8aae013Ba46a6c4088BA553ef7AC5Ed",
    "0x3E842E3A79A00AFdd03B52390B1caC6306Ea257E",
    {
      "_timeWindow": 60,
      "_sampleSize": 30,
      "_bribeUnit": "50000000000000000"
    }
  ],
  "numDeployments": 3,
  "solcInputHash": "abd2e909e0063fda2cd60466948d04e6",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_chainId\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"_aggregator\",\"type\":\"address\"},{\"internalType\":\"string[]\",\"name\":\"_tags\",\"type\":\"string[]\"}],\"internalType\":\"struct TokenInfo[]\",\"name\":\"_tokenInfo\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"_liquidityManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"_timeWindow\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sampleSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bribeUnit\",\"type\":\"uint256\"}],\"internalType\":\"struct AggregatorParams\",\"name\":\"_aggregatorParams\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"}],\"name\":\"InvalidRouter\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"bribeUnit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"messageId\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"sourceChainSelector\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"sender\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct Client.EVMTokenAmount[]\",\"name\":\"destTokenAmounts\",\"type\":\"tuple[]\"}],\"internalType\":\"struct Client.Any2EVMMessage\",\"name\":\"message\",\"type\":\"tuple\"}],\"name\":\"ccipReceive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chainId\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chainLinkData\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"link\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"currentChainSelectorId\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"keyHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"chainSelectorIdToSidechainAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkTokenParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectPriceFeeds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isMainChain\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lastIndexOrder\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastIndexTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"liquidities\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityManager\",\"outputs\":[{\"internalType\":\"contract LiquidityManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"liquidityMessages\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"chainId\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mainChainId\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"movingAverage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"indexOrders\",\"type\":\"uint256[]\"},{\"internalType\":\"string\",\"name\":\"tag\",\"type\":\"string\"}],\"name\":\"persistIndex\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_chainId\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_mainChainId\",\"type\":\"uint32\"}],\"name\":\"setChainId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_link\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"_currentChainSelectorId\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"_keyHash\",\"type\":\"bytes32\"}],\"name\":\"setChainLinkData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"chainSelectorId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"sideChainAddress\",\"type\":\"address\"}],\"name\":\"setSideChainAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_taggingVerifier\",\"type\":\"address\"}],\"name\":\"setTaggingVerifier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"supplyMessages\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"chainId\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taggingVerifier\",\"outputs\":[{\"internalType\":\"contract TaggingVerifier\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tagsIndexOrder\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"tagsIndexTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenInfo\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_chainId\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"_aggregator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenParamsTimestampUpdates\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenSymbols\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"tokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"totalSupplies\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_totalSupplies\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_liquidities\",\"type\":\"uint256[]\"}],\"name\":\"updateTokenParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"ccipReceive((bytes32,uint64,bytes,bytes,(address,uint256)[]))\":{\"details\":\"Note ensure you check the msg.sender is the OffRampRouter\",\"params\":{\"message\":\"CCIP Message\"}},\"getRouter()\":{\"returns\":{\"_0\":\"CCIP router address\"}},\"supportsInterface(bytes4)\":{\"details\":\"Should indicate whether the contract implements IAny2EVMMessageReceiver e.g. return interfaceId == type(IAny2EVMMessageReceiver).interfaceId || interfaceId == type(IERC165).interfaceId This allows CCIP to check if ccipReceive is available before calling it. If this returns false or reverts, only tokens are transferred to the receiver. If this returns true, tokens are transferred and ccipReceive is called atomically. Additionally, if the receiver address does not have code associated with it at the time of execution (EXTCODESIZE returns 0), only tokens will be transferred.\",\"params\":{\"interfaceId\":\"The interfaceId to check\"},\"returns\":{\"_0\":\"true if the interfaceId is supported\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"ccipReceive((bytes32,uint64,bytes,bytes,(address,uint256)[]))\":{\"notice\":\"Called by the Router to deliver a message. If this reverts, any token transfers also revert. The message will move to a FAILED state and become available for manual execution.\"},\"getRouter()\":{\"notice\":\"Return the current router\"},\"supportsInterface(bytes4)\":{\"notice\":\"IERC165 supports an interfaceId\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/IndexAggreagtor.sol\":\"IndexAggregator\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts-ccip/src/v0.8/ccip/applications/CCIPReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IAny2EVMMessageReceiver} from \\\"../interfaces/IAny2EVMMessageReceiver.sol\\\";\\n\\nimport {Client} from \\\"../libraries/Client.sol\\\";\\n\\nimport {IERC165} from \\\"../../vendor/openzeppelin-solidity/v4.8.3/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/// @title CCIPReceiver - Base contract for CCIP applications that can receive messages.\\nabstract contract CCIPReceiver is IAny2EVMMessageReceiver, IERC165 {\\n  address internal immutable i_ccipRouter;\\n\\n  constructor(address router) {\\n    if (router == address(0)) revert InvalidRouter(address(0));\\n    i_ccipRouter = router;\\n  }\\n\\n  /// @notice IERC165 supports an interfaceId\\n  /// @param interfaceId The interfaceId to check\\n  /// @return true if the interfaceId is supported\\n  /// @dev Should indicate whether the contract implements IAny2EVMMessageReceiver\\n  /// e.g. return interfaceId == type(IAny2EVMMessageReceiver).interfaceId || interfaceId == type(IERC165).interfaceId\\n  /// This allows CCIP to check if ccipReceive is available before calling it.\\n  /// If this returns false or reverts, only tokens are transferred to the receiver.\\n  /// If this returns true, tokens are transferred and ccipReceive is called atomically.\\n  /// Additionally, if the receiver address does not have code associated with\\n  /// it at the time of execution (EXTCODESIZE returns 0), only tokens will be transferred.\\n  function supportsInterface(bytes4 interfaceId) public pure virtual override returns (bool) {\\n    return interfaceId == type(IAny2EVMMessageReceiver).interfaceId || interfaceId == type(IERC165).interfaceId;\\n  }\\n\\n  /// @inheritdoc IAny2EVMMessageReceiver\\n  function ccipReceive(Client.Any2EVMMessage calldata message) external virtual override onlyRouter {\\n    _ccipReceive(message);\\n  }\\n\\n  /// @notice Override this function in your implementation.\\n  /// @param message Any2EVMMessage\\n  function _ccipReceive(Client.Any2EVMMessage memory message) internal virtual;\\n\\n  /////////////////////////////////////////////////////////////////////\\n  // Plumbing\\n  /////////////////////////////////////////////////////////////////////\\n\\n  /// @notice Return the current router\\n  /// @return CCIP router address\\n  function getRouter() public view returns (address) {\\n    return address(i_ccipRouter);\\n  }\\n\\n  error InvalidRouter(address router);\\n\\n  /// @dev only calls from the set router are accepted.\\n  modifier onlyRouter() {\\n    if (msg.sender != address(i_ccipRouter)) revert InvalidRouter(msg.sender);\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x23827b8b1cd9f1d7886720ab0347d34891c4a584dc9ee048b85a41dc2241917f\",\"license\":\"MIT\"},\"@chainlink/contracts-ccip/src/v0.8/ccip/interfaces/IAny2EVMMessageReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {Client} from \\\"../libraries/Client.sol\\\";\\n\\n/// @notice Application contracts that intend to receive messages from\\n/// the router should implement this interface.\\ninterface IAny2EVMMessageReceiver {\\n  /// @notice Called by the Router to deliver a message.\\n  /// If this reverts, any token transfers also revert. The message\\n  /// will move to a FAILED state and become available for manual execution.\\n  /// @param message CCIP Message\\n  /// @dev Note ensure you check the msg.sender is the OffRampRouter\\n  function ccipReceive(Client.Any2EVMMessage calldata message) external;\\n}\\n\",\"keccak256\":\"0xd2a05a4f58a453cbf8cfa6aa78f58cb8e42091b3a025f711a0aa51f584e16b48\",\"license\":\"MIT\"},\"@chainlink/contracts-ccip/src/v0.8/ccip/interfaces/IRouterClient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {Client} from \\\"../libraries/Client.sol\\\";\\n\\ninterface IRouterClient {\\n  error UnsupportedDestinationChain(uint64 destChainSelector);\\n  error InsufficientFeeTokenAmount();\\n  error InvalidMsgValue();\\n\\n  /// @notice Checks if the given chain ID is supported for sending/receiving.\\n  /// @param chainSelector The chain to check.\\n  /// @return supported is true if it is supported, false if not.\\n  function isChainSupported(uint64 chainSelector) external view returns (bool supported);\\n\\n  /// @notice Gets a list of all supported tokens which can be sent or received\\n  /// to/from a given chain id.\\n  /// @param chainSelector The chainSelector.\\n  /// @return tokens The addresses of all tokens that are supported.\\n  function getSupportedTokens(uint64 chainSelector) external view returns (address[] memory tokens);\\n\\n  /// @param destinationChainSelector The destination chainSelector\\n  /// @param message The cross-chain CCIP message including data and/or tokens\\n  /// @return fee returns execution fee for the message\\n  /// delivery to destination chain, denominated in the feeToken specified in the message.\\n  /// @dev Reverts with appropriate reason upon invalid message.\\n  function getFee(\\n    uint64 destinationChainSelector,\\n    Client.EVM2AnyMessage memory message\\n  ) external view returns (uint256 fee);\\n\\n  /// @notice Request a message to be sent to the destination chain\\n  /// @param destinationChainSelector The destination chain ID\\n  /// @param message The cross-chain CCIP message including data and/or tokens\\n  /// @return messageId The message ID\\n  /// @dev Note if msg.value is larger than the required fee (from getFee) we accept\\n  /// the overpayment with no refund.\\n  /// @dev Reverts with appropriate reason upon invalid message.\\n  function ccipSend(\\n    uint64 destinationChainSelector,\\n    Client.EVM2AnyMessage calldata message\\n  ) external payable returns (bytes32);\\n}\\n\",\"keccak256\":\"0x7f2fdd93e516b7476c6fab099f6806adf5ceaf399b0cc415f6b9ede890f2379b\",\"license\":\"MIT\"},\"@chainlink/contracts-ccip/src/v0.8/ccip/libraries/Client.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// End consumer library.\\nlibrary Client {\\n  /// @dev RMN depends on this struct, if changing, please notify the RMN maintainers.\\n  struct EVMTokenAmount {\\n    address token; // token address on the local chain.\\n    uint256 amount; // Amount of tokens.\\n  }\\n\\n  struct Any2EVMMessage {\\n    bytes32 messageId; // MessageId corresponding to ccipSend on source.\\n    uint64 sourceChainSelector; // Source chain selector.\\n    bytes sender; // abi.decode(sender) if coming from an EVM chain.\\n    bytes data; // payload sent in original message.\\n    EVMTokenAmount[] destTokenAmounts; // Tokens and their amounts in their destination chain representation.\\n  }\\n\\n  // If extraArgs is empty bytes, the default is 200k gas limit.\\n  struct EVM2AnyMessage {\\n    bytes receiver; // abi.encode(receiver address) for dest EVM chains\\n    bytes data; // Data payload\\n    EVMTokenAmount[] tokenAmounts; // Token transfers\\n    address feeToken; // Address of feeToken. address(0) means you will send msg.value.\\n    bytes extraArgs; // Populate this with _argsToBytes(EVMExtraArgsV1)\\n  }\\n\\n  // bytes4(keccak256(\\\"CCIP EVMExtraArgsV1\\\"));\\n  bytes4 public constant EVM_EXTRA_ARGS_V1_TAG = 0x97a657c9;\\n  struct EVMExtraArgsV1 {\\n    uint256 gasLimit;\\n  }\\n\\n  function _argsToBytes(EVMExtraArgsV1 memory extraArgs) internal pure returns (bytes memory bts) {\\n    return abi.encodeWithSelector(EVM_EXTRA_ARGS_V1_TAG, extraArgs);\\n  }\\n}\\n\",\"keccak256\":\"0x8af3ac1085c87342373772fb1a0107c7b90258e6bfed318ab2a601a14477e679\",\"license\":\"MIT\"},\"@chainlink/contracts-ccip/src/v0.8/vendor/openzeppelin-solidity/v4.8.3/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\",\"keccak256\":\"0xa36a31b4bb17fad88d023474893b3b895fa421650543b1ce5aefc78efbd43244\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(\\n    uint80 _roundId\\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n}\\n\",\"keccak256\":\"0xfe4e8bb4861bb3860ba890ab91a3b818ec66e5a8f544fb608cfcb73f433472cd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xda898fa084aa1ddfdb346e6a40459e00a59d87071cce7c315a46d648dd71d0ba\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"@reclaimprotocol/verifier-solidity-sdk/contracts/Addresses.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/**\\n * Reclaim's addresses\\n */\\n\\nlibrary Addresses {\\n    address public constant BASE_MAINNET =\\n        0xACE04E6DeB9567C1B8F37D113F2Da9E690Fc128d;\\n    address public constant BNB_MAINNET =\\n        0x1bbb0896aC6F4E32a89157C73Fb830325a441cb9;\\n    address public constant POLYGON_MAINNET =\\n        0xEA11e7aBC9E4260747C11b1B9A25F65364a35A27;\\n    address public constant ARBITRUM_MAINNET =\\n        0xe79A453bD088F4A58656b315a7C1f8Ea3473CCf1;\\n    address public constant OPTIMISM_MAINNET =\\n        0xe79A453bD088F4A58656b315a7C1f8Ea3473CCf1;\\n    address public constant OPTIMISM_GOERLI_TESTNET =\\n        0x2f0306D698685BEf7ff50745BFF7178F0d117ba8;\\n    address public constant LINEA_TESTNET =\\n        0xf223E215B2c9A2E5FE1B2971d5694684b2E734C1;\\n    address public constant PLOYGON_MUMBAI_TESTNET =\\n        0xd6534f52CEB3d0139b915bc0C3278a94687fA5C7;\\n}\\n\",\"keccak256\":\"0xf49a4f3a618ab2f9ca2c056aba700f689694f0dc0b8766906a6390a58cf7b380\",\"license\":\"MIT\"},\"@reclaimprotocol/verifier-solidity-sdk/contracts/BytesUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/**\\n * Utilities for bytes manipulation & conversion\\n */\\nlibrary BytesUtils {\\n\\tfunction bytesToUInt(bytes memory data, uint offset) internal pure returns (uint) {\\n\\t\\trequire(offset + 4 <= data.length, \\\"Offset + 4 must be within data bounds\\\");\\n\\n\\t\\tuint32 result;\\n\\t\\tassembly {\\n\\t\\t\\t// Load the 32 bits (4 bytes) from the data at the given offset into the result variable\\n\\t\\t\\tresult := mload(add(add(data, 0x4), offset))\\n\\t\\t}\\n\\n\\t\\treturn result;\\n\\t}\\n}\\n\",\"keccak256\":\"0x63e91fce26f8c68c00a9de9c79e590e507a03d8f19355278b4316d7468a965b0\",\"license\":\"MIT\"},\"@reclaimprotocol/verifier-solidity-sdk/contracts/Claims.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport \\\"./StringUtils.sol\\\";\\n\\n/**\\n * Library to assist with requesting,\\n * serialising & verifying credentials\\n */\\nlibrary Claims {\\n\\t/** Data required to describe a claim */\\n\\tstruct CompleteClaimData {\\n\\t\\tbytes32 identifier;\\n\\t\\taddress owner;\\n\\t\\tuint32 timestampS;\\n\\t\\tuint32 epoch;\\n\\t}\\n\\n\\tstruct ClaimInfo {\\n\\t\\tstring provider;\\n\\t\\tstring parameters;\\n\\t\\tstring context;\\n\\t}\\n\\n\\t/** Claim with signatures & signer */\\n\\tstruct SignedClaim {\\n\\t\\tCompleteClaimData claim;\\n\\t\\tbytes[] signatures;\\n\\t}\\n\\n\\t/**\\n\\t * Asserts that the claim is signed by the expected witnesses\\n\\t */\\n\\tfunction assertValidSignedClaim(\\n\\t\\tSignedClaim memory self,\\n\\t\\taddress[] memory expectedWitnessAddresses\\n\\t) internal pure {\\n\\t\\trequire(self.signatures.length > 0, \\\"No signatures\\\");\\n\\t\\taddress[] memory signedWitnesses = recoverSignersOfSignedClaim(self);\\n\\t\\tfor (uint256 i = 0; i < expectedWitnessAddresses.length; i++) {\\n\\t\\t\\tbool found = false;\\n\\t\\t\\tfor (uint256 j = 0; j < signedWitnesses.length; j++) {\\n\\t\\t\\t\\tif (signedWitnesses[j] == expectedWitnessAddresses[i]) {\\n\\t\\t\\t\\t\\tfound = true;\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\trequire(found, \\\"Missing witness signature\\\");\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @dev recovers the signer of the claim\\n\\t */\\n\\tfunction recoverSignersOfSignedClaim(\\n\\t\\tSignedClaim memory self\\n\\t) internal pure returns (address[] memory) {\\n\\t\\tbytes memory serialised = serialise(self.claim);\\n\\t\\taddress[] memory signers = new address[](self.signatures.length);\\n\\t\\tfor (uint256 i = 0; i < self.signatures.length; i++) {\\n\\t\\t\\tsigners[i] = verifySignature(serialised, self.signatures[i]);\\n\\t\\t}\\n\\n\\t\\treturn signers;\\n\\t}\\n\\n\\t/**\\n\\t * @dev serialises the credential into a string;\\n\\t * the string is used to verify the signature\\n\\t *\\n\\t * the serialisation is the same as done by the TS library\\n\\t */\\n\\tfunction serialise(\\n\\t\\tCompleteClaimData memory self\\n\\t) internal pure returns (bytes memory) {\\n\\t\\treturn\\n\\t\\t\\tabi.encodePacked(\\n\\t\\t\\t\\tStringUtils.bytes2str(abi.encodePacked(self.identifier)),\\n\\t\\t\\t\\t\\\"\\\\n\\\",\\n\\t\\t\\t\\tStringUtils.address2str(self.owner),\\n\\t\\t\\t\\t\\\"\\\\n\\\",\\n\\t\\t\\t\\tStringUtils.uint2str(self.timestampS),\\n\\t\\t\\t\\t\\\"\\\\n\\\",\\n\\t\\t\\t\\tStringUtils.uint2str(self.epoch)\\n\\t\\t\\t);\\n\\t}\\n\\n\\t/**\\n\\t * @dev returns the address of the user that generated the signature\\n\\t */\\n\\tfunction verifySignature(\\n\\t\\tbytes memory content,\\n\\t\\tbytes memory signature\\n\\t) internal pure returns (address signer) {\\n\\t\\tbytes32 signedHash = keccak256(\\n\\t\\t\\tabi.encodePacked(\\n\\t\\t\\t\\t\\\"\\\\x19Ethereum Signed Message:\\\\n\\\",\\n\\t\\t\\t\\tStringUtils.uint2str(content.length),\\n\\t\\t\\t\\tcontent\\n\\t\\t\\t)\\n\\t\\t);\\n\\t\\treturn ECDSA.recover(signedHash, signature);\\n\\t}\\n\\n\\tfunction hashClaimInfo(ClaimInfo memory claimInfo) internal pure returns (bytes32) {\\n\\t\\tbytes memory serialised = abi.encodePacked(\\n\\t\\t\\tclaimInfo.provider,\\n\\t\\t\\t\\\"\\\\n\\\",\\n\\t\\t\\tclaimInfo.parameters,\\n\\t\\t\\t\\\"\\\\n\\\",\\n\\t\\t\\tclaimInfo.context\\n\\t\\t);\\n\\t\\treturn keccak256(serialised);\\n\\t}\\n}\\n\",\"keccak256\":\"0x87a41e75d358e86798456ad45e03446cde8f1519c8af17905f6c8b852a5f2da7\",\"license\":\"MIT\"},\"@reclaimprotocol/verifier-solidity-sdk/contracts/Random.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n// implementation from: https://stackoverflow.com/a/67332959\\n// Utils for random number generation\\nlibrary Random {\\n\\t/**\\n\\t * @dev generates a random number from the given seed\\n\\t * This will always return the same number for the same seed & block\\n\\t */\\n\\tfunction random(uint256 seed) internal view returns (uint) {\\n\\t\\treturn uint(keccak256(abi.encodePacked(block.difficulty, block.timestamp, seed)));\\n\\t}\\n}\\n\",\"keccak256\":\"0xa9741057f21ce63334586ff80b1fce32b08e9582e9064746711c1b45491594a5\",\"license\":\"MIT\"},\"@reclaimprotocol/verifier-solidity-sdk/contracts/Reclaim.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./Claims.sol\\\";\\nimport \\\"./Random.sol\\\";\\nimport \\\"./StringUtils.sol\\\";\\nimport \\\"./BytesUtils.sol\\\";\\n\\n// import \\\"hardhat/console.sol\\\";\\n\\n\\n/**\\n * Reclaim Beacon contract\\n */\\ncontract Reclaim {\\n\\tstruct Witness {\\n\\t\\t/** ETH address of the witness */\\n\\t\\taddress addr;\\n\\t\\t/** Host to connect to the witness */\\n\\t\\tstring host;\\n\\t}\\n\\n\\tstruct Epoch {\\n\\t\\t/** Epoch number */\\n\\t\\tuint32 id;\\n\\t\\t/** when the epoch changed */\\n\\t\\tuint32 timestampStart;\\n\\t\\t/** when the epoch will change */\\n\\t\\tuint32 timestampEnd;\\n\\t\\t/** Witnesses for this epoch */\\n\\t\\tWitness[] witnesses;\\n\\t\\t/**\\n\\t\\t * Minimum number of witnesses\\n\\t\\t * required to create a claim\\n\\t\\t * */\\n\\t\\tuint8 minimumWitnessesForClaimCreation;\\n\\t}\\n\\n\\tstruct Proof {\\n\\t\\tClaims.ClaimInfo claimInfo;\\n\\t\\tClaims.SignedClaim signedClaim;\\n\\t}\\n\\n\\t/** list of all epochs */\\n\\tEpoch[] public epochs;\\n\\n\\t/**\\n\\t * duration of each epoch.\\n\\t * is not a hard duration, but useful for\\n\\t * caching purposes\\n\\t * */\\n\\tuint32 public epochDurationS; // 1 day\\n\\n\\t/**\\n\\t * current epoch.\\n\\t * starts at 1, so that the first epoch is 1\\n\\t * */\\n\\tuint32 public currentEpoch;\\n\\n\\n\\tevent EpochAdded(Epoch epoch);\\n\\n\\taddress public owner;\\n\\n\\t/**\\n\\t * @notice Calls initialize on the base contracts\\n\\t *\\n\\t * @dev This acts as a constructor for the upgradeable proxy contract\\n\\t */\\n\\tconstructor() {\\n\\t\\tepochDurationS = 1 days;\\n\\t\\tcurrentEpoch = 0;\\n\\t\\towner = msg.sender;\\n\\t}\\n\\n\\tmodifier onlyOwner () {\\n\\t\\trequire(owner == msg.sender, \\\"Only Owner\\\");\\n\\t\\t_;\\n\\t}\\n\\t// epoch functions ---\\n\\n\\t/**\\n\\t * Fetch an epoch\\n\\t * @param epoch the epoch number to fetch;\\n\\t * pass 0 to fetch the current epoch\\n\\t */\\n\\tfunction fetchEpoch(uint32 epoch) public view returns (Epoch memory) {\\n\\t\\tif (epoch == 0) {\\n\\t\\t\\treturn epochs[epochs.length - 1];\\n\\t\\t}\\n\\t\\treturn epochs[epoch - 1];\\n\\t}\\n\\n\\t/**\\n\\t * Get the witnesses that'll sign the claim\\n\\t */\\n\\tfunction fetchWitnessesForClaim(\\n\\t\\tuint32 epoch,\\n\\t\\tbytes32 identifier,\\n\\t\\tuint32 timestampS\\n\\t) public view returns (Witness[] memory) {\\n\\t\\tEpoch memory epochData = fetchEpoch(epoch);\\n\\t\\tbytes memory completeInput = abi.encodePacked(\\n\\t\\t\\t// hex encode bytes\\n\\t\\t\\tStringUtils.bytes2str(\\n\\t\\t\\t\\t// convert bytes32 to bytes\\n\\t\\t\\t\\tabi.encodePacked(identifier)\\n\\t\\t\\t),\\n\\t\\t\\t\\\"\\\\n\\\",\\n\\t\\t\\tStringUtils.uint2str(epoch),\\n\\t\\t\\t\\\"\\\\n\\\",\\n\\t\\t\\tStringUtils.uint2str(epochData.minimumWitnessesForClaimCreation),\\n\\t\\t\\t\\\"\\\\n\\\",\\n\\t\\t\\tStringUtils.uint2str(timestampS)\\n\\t\\t);\\n\\t\\tbytes memory completeHash = abi.encodePacked(keccak256(completeInput));\\n\\n\\t\\tWitness[] memory witnessesLeftList = epochData.witnesses;\\n\\t\\tWitness[] memory selectedWitnesses = new Witness[](\\n\\t\\t\\tepochData.minimumWitnessesForClaimCreation\\n\\t\\t);\\n\\t\\tuint witnessesLeft = witnessesLeftList.length;\\n\\n\\t\\tuint byteOffset = 0;\\n\\t\\tfor (uint32 i = 0; i < epochData.minimumWitnessesForClaimCreation; i++) {\\n\\t\\t\\tuint randomSeed = BytesUtils.bytesToUInt(completeHash, byteOffset);\\n\\t\\t\\tuint witnessIndex = randomSeed % witnessesLeft;\\n\\t\\t\\tselectedWitnesses[i] = witnessesLeftList[witnessIndex];\\n\\t\\t\\t// remove the witness from the list of witnesses\\n\\t\\t\\t// we've utilised witness at index \\\"idx\\\"\\n\\t\\t\\t// we of course don't want to pick the same witness twice\\n\\t\\t\\t// so we remove it from the list of witnesses\\n\\t\\t\\t// and reduce the number of witnesses left to pick from\\n\\t\\t\\t// since solidity doesn't support \\\"pop()\\\" in memory arrays\\n\\t\\t\\t// we swap the last element with the element we want to remove\\n\\t\\t\\twitnessesLeftList[witnessIndex] = epochData.witnesses[witnessesLeft - 1];\\n\\t\\t\\tbyteOffset = (byteOffset + 4) % completeHash.length;\\n\\t\\t\\twitnessesLeft -= 1;\\n\\t\\t}\\n\\n\\t\\treturn selectedWitnesses;\\n\\t}\\n\\n\\t/**\\n\\t * Call the function to assert\\n\\t * the validity of several claims proofs\\n\\t */\\n\\tfunction verifyProof(Proof memory proof) public view {\\n\\t\\t// create signed claim using claimData and signature.\\n\\t\\trequire(proof.signedClaim.signatures.length > 0, \\\"No signatures\\\");\\n\\t\\tClaims.SignedClaim memory signed = Claims.SignedClaim(\\n\\t\\t\\tproof.signedClaim.claim,\\n\\t\\t\\tproof.signedClaim.signatures\\n\\t\\t);\\n\\n\\t\\t// check if the hash from the claimInfo is equal to the infoHash in the claimData\\n\\t\\tbytes32 hashed = Claims.hashClaimInfo(proof.claimInfo);\\n\\t\\trequire(proof.signedClaim.claim.identifier == hashed);\\n\\n\\t\\t// fetch witness list from fetchEpoch(_epoch).witnesses\\n\\t\\tWitness[] memory expectedWitnesses = fetchWitnessesForClaim(\\n\\t\\t\\tproof.signedClaim.claim.epoch,\\n\\t\\t\\tproof.signedClaim.claim.identifier,\\n\\t\\t\\tproof.signedClaim.claim.timestampS\\n\\t\\t);\\n\\t\\taddress[] memory signedWitnesses = Claims.recoverSignersOfSignedClaim(signed);\\n\\t\\t// check if the number of signatures is equal to the number of witnesses\\n\\t\\trequire(\\n\\t\\t\\tsignedWitnesses.length == expectedWitnesses.length,\\n\\t\\t\\t\\\"Number of signatures not equal to number of witnesses\\\"\\n\\t\\t);\\n\\n\\t\\t// Update awaited: more checks on whose signatures can be considered.\\n\\t\\tfor (uint256 i = 0; i < signed.signatures.length; i++) {\\n\\t\\t\\tbool found = false;\\n\\t\\t\\tfor (uint j = 0; j < expectedWitnesses.length; j++) {\\n\\t\\t\\t\\tif (signedWitnesses[i] == expectedWitnesses[j].addr) {\\n\\t\\t\\t\\t\\tfound = true;\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\trequire(found, \\\"Signature not appropriate\\\");\\n\\t\\t}\\n\\n\\t\\t//@TODO: verify zkproof\\n\\t}\\n\\n\\t// admin functions ---\\n\\n\\t/**\\n\\t * @dev Add a new epoch\\n\\t */\\n\\tfunction addNewEpoch(\\n\\t\\tWitness[] calldata witnesses,\\n\\t\\tuint8 requisiteWitnessesForClaimCreate\\n\\t) external onlyOwner {\\n\\t\\tif (epochDurationS == 0) {\\n\\t\\t\\tepochDurationS = 1 days;\\n\\t\\t}\\n\\t\\tif (epochs.length > 0) {\\n\\t\\t\\tepochs[epochs.length - 1].timestampEnd = uint32(block.timestamp);\\n\\t\\t}\\n\\n\\t\\tcurrentEpoch += 1;\\n\\t\\tEpoch storage epoch = epochs.push();\\n\\t\\tepoch.id = currentEpoch;\\n\\t\\tepoch.timestampStart = uint32(block.timestamp);\\n\\t\\tepoch.timestampEnd = uint32(block.timestamp + epochDurationS);\\n\\t\\tepoch.minimumWitnessesForClaimCreation = requisiteWitnessesForClaimCreate;\\n\\n\\t\\tfor (uint256 i = 0; i < witnesses.length; i++) {\\n\\t\\t\\tepoch.witnesses.push(witnesses[i]);\\n\\t\\t}\\n\\n\\t\\temit EpochAdded(epochs[epochs.length - 1]);\\n\\t}\\n\\n\\t// internal code -----\\n\\n\\tfunction uintDifference(uint256 a, uint256 b) internal pure returns (uint256) {\\n\\t\\tif (a > b) {\\n\\t\\t\\treturn a - b;\\n\\t\\t}\\n\\n\\t\\treturn b - a;\\n\\t}\\n}\\n\",\"keccak256\":\"0x89fd2ee012072abfba091530919a3222310db98ffa8f3b13ca1d087c27620f65\",\"license\":\"MIT\"},\"@reclaimprotocol/verifier-solidity-sdk/contracts/StringUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/**\\n * Utilities for string manipulation & conversion\\n */\\nlibrary StringUtils {\\n\\tfunction address2str(address x) internal pure returns (string memory) {\\n\\t\\tbytes memory s = new bytes(40);\\n\\t\\tfor (uint i = 0; i < 20; i++) {\\n\\t\\t\\tbytes1 b = bytes1(uint8(uint(uint160(x)) / (2 ** (8 * (19 - i)))));\\n\\t\\t\\tbytes1 hi = bytes1(uint8(b) / 16);\\n\\t\\t\\tbytes1 lo = bytes1(uint8(b) - 16 * uint8(hi));\\n\\t\\t\\ts[2 * i] = getChar(hi);\\n\\t\\t\\ts[2 * i + 1] = getChar(lo);\\n\\t\\t}\\n\\t\\treturn string(abi.encodePacked(\\\"0x\\\", s));\\n\\t}\\n\\n\\tfunction bytes2str(bytes memory buffer) internal pure returns (string memory) {\\n\\t\\t// Fixed buffer size for hexadecimal convertion\\n\\t\\tbytes memory converted = new bytes(buffer.length * 2);\\n\\t\\tbytes memory _base = \\\"0123456789abcdef\\\";\\n\\n\\t\\tfor (uint256 i = 0; i < buffer.length; i++) {\\n\\t\\t\\tconverted[i * 2] = _base[uint8(buffer[i]) / _base.length];\\n\\t\\t\\tconverted[i * 2 + 1] = _base[uint8(buffer[i]) % _base.length];\\n\\t\\t}\\n\\n\\t\\treturn string(abi.encodePacked(\\\"0x\\\", converted));\\n\\t}\\n\\n\\tfunction getChar(bytes1 b) internal pure returns (bytes1 c) {\\n\\t\\tif (uint8(b) < 10) return bytes1(uint8(b) + 0x30);\\n\\t\\telse return bytes1(uint8(b) + 0x57);\\n\\t}\\n\\n\\tfunction bool2str(bool _b) internal pure returns (string memory _uintAsString) {\\n\\t\\tif (_b) {\\n\\t\\t\\treturn \\\"true\\\";\\n\\t\\t} else {\\n\\t\\t\\treturn \\\"false\\\";\\n\\t\\t}\\n\\t}\\n\\n\\tfunction uint2str(uint _i) internal pure returns (string memory _uintAsString) {\\n\\t\\tif (_i == 0) {\\n\\t\\t\\treturn \\\"0\\\";\\n\\t\\t}\\n\\t\\tuint j = _i;\\n\\t\\tuint len;\\n\\t\\twhile (j != 0) {\\n\\t\\t\\tlen++;\\n\\t\\t\\tj /= 10;\\n\\t\\t}\\n\\t\\tbytes memory bstr = new bytes(len);\\n\\t\\tuint k = len;\\n\\t\\twhile (_i != 0) {\\n\\t\\t\\tk = k - 1;\\n\\t\\t\\tuint8 temp = (48 + uint8(_i - (_i / 10) * 10));\\n\\t\\t\\tbytes1 b1 = bytes1(temp);\\n\\t\\t\\tbstr[k] = b1;\\n\\t\\t\\t_i /= 10;\\n\\t\\t}\\n\\t\\treturn string(bstr);\\n\\t}\\n\\n\\tfunction areEqual(\\n\\t\\tstring calldata _a,\\n\\t\\tstring storage _b\\n\\t) internal pure returns (bool) {\\n\\t\\treturn keccak256(abi.encodePacked((_a))) == keccak256(abi.encodePacked((_b)));\\n\\t}\\n\\n\\tfunction areEqual(string memory _a, string memory _b) internal pure returns (bool) {\\n\\t\\treturn keccak256(abi.encodePacked((_a))) == keccak256(abi.encodePacked((_b)));\\n\\t}\\n\\n\\tfunction toLower(string memory str) internal pure returns (string memory) {\\n\\t\\tbytes memory bStr = bytes(str);\\n\\t\\tbytes memory bLower = new bytes(bStr.length);\\n\\t\\tfor (uint i = 0; i < bStr.length; i++) {\\n\\t\\t\\t// Uppercase character...\\n\\t\\t\\tif ((uint8(bStr[i]) >= 65) && (uint8(bStr[i]) <= 90)) {\\n\\t\\t\\t\\t// So we add 32 to make it lowercase\\n\\t\\t\\t\\tbLower[i] = bytes1(uint8(bStr[i]) + 32);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tbLower[i] = bStr[i];\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn string(bLower);\\n\\t}\\n\\n\\tfunction substring(\\n\\t\\tstring memory str,\\n\\t\\tuint startIndex,\\n\\t\\tuint endIndex\\n\\t) internal pure returns (string memory) {\\n\\t\\tbytes memory strBytes = bytes(str);\\n\\t\\tbytes memory result = new bytes(endIndex - startIndex);\\n\\t\\tfor (uint i = startIndex; i < endIndex; i++) {\\n\\t\\t\\tresult[i - startIndex] = strBytes[i];\\n\\t\\t}\\n\\t\\treturn string(result);\\n\\t}\\n}\\n\",\"keccak256\":\"0x15feebafef16d4c74c043b39e652ddae0e121987ceca74b663f6a2d2d7ba8b4b\",\"license\":\"MIT\"},\"contracts/IUniswapV3Factory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title The interface for the Uniswap V3 Factory\\n/// @notice The Uniswap V3 Factory facilitates creation of Uniswap V3 pools and control over the protocol fees\\ninterface IUniswapV3Factory {\\n    /// @notice Emitted when the owner of the factory is changed\\n    /// @param oldOwner The owner before the owner was changed\\n    /// @param newOwner The owner after the owner was changed\\n    event OwnerChanged(address indexed oldOwner, address indexed newOwner);\\n\\n    /// @notice Emitted when a pool is created\\n    /// @param token0 The first token of the pool by address sort order\\n    /// @param token1 The second token of the pool by address sort order\\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\\n    /// @param tickSpacing The minimum number of ticks between initialized ticks\\n    /// @param pool The address of the created pool\\n    event PoolCreated(\\n        address indexed token0,\\n        address indexed token1,\\n        uint24 indexed fee,\\n        int24 tickSpacing,\\n        address pool\\n    );\\n\\n    /// @notice Emitted when a new fee amount is enabled for pool creation via the factory\\n    /// @param fee The enabled fee, denominated in hundredths of a bip\\n    /// @param tickSpacing The minimum number of ticks between initialized ticks for pools created with the given fee\\n    event FeeAmountEnabled(uint24 indexed fee, int24 indexed tickSpacing);\\n\\n    /// @notice Returns the current owner of the factory\\n    /// @dev Can be changed by the current owner via setOwner\\n    /// @return The address of the factory owner\\n    function owner() external view returns (address);\\n\\n    /// @notice Returns the tick spacing for a given fee amount, if enabled, or 0 if not enabled\\n    /// @dev A fee amount can never be removed, so this value should be hard coded or cached in the calling context\\n    /// @param fee The enabled fee, denominated in hundredths of a bip. Returns 0 in case of unenabled fee\\n    /// @return The tick spacing\\n    function feeAmountTickSpacing(uint24 fee) external view returns (int24);\\n\\n    /// @notice Returns the pool address for a given pair of tokens and a fee, or address 0 if it does not exist\\n    /// @dev tokenA and tokenB may be passed in either token0/token1 or token1/token0 order\\n    /// @param tokenA The contract address of either token0 or token1\\n    /// @param tokenB The contract address of the other token\\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\\n    /// @return pool The pool address\\n    function getPool(\\n        address tokenA,\\n        address tokenB,\\n        uint24 fee\\n    ) external view returns (address pool);\\n\\n    /// @notice Creates a pool for the given two tokens and fee\\n    /// @param tokenA One of the two tokens in the desired pool\\n    /// @param tokenB The other of the two tokens in the desired pool\\n    /// @param fee The desired fee for the pool\\n    /// @dev tokenA and tokenB may be passed in either order: token0/token1 or token1/token0. tickSpacing is retrieved\\n    /// from the fee. The call will revert if the pool already exists, the fee is invalid, or the token arguments\\n    /// are invalid.\\n    /// @return pool The address of the newly created pool\\n    function createPool(\\n        address tokenA,\\n        address tokenB,\\n        uint24 fee\\n    ) external returns (address pool);\\n\\n    /// @notice Updates the owner of the factory\\n    /// @dev Must be called by the current owner\\n    /// @param _owner The new owner of the factory\\n    function setOwner(address _owner) external;\\n\\n    /// @notice Enables a fee amount with the given tickSpacing\\n    /// @dev Fee amounts may never be removed once enabled\\n    /// @param fee The fee amount to enable, denominated in hundredths of a bip (i.e. 1e-6)\\n    /// @param tickSpacing The spacing between ticks to be enforced for all pools created with the given fee amount\\n    function enableFeeAmount(uint24 fee, int24 tickSpacing) external;\\n}\",\"keccak256\":\"0x481936e26021d5a9d68da06803eb1c8474673d281c256c14a471764c59c031e6\",\"license\":\"GPL-2.0-or-later\"},\"contracts/IUniswapV3Pool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n\\n/// @title The interface for a Uniswap V3 Pool\\n/// @notice A Uniswap pool facilitates swapping and automated market making between any two assets that strictly conform\\n/// to the ERC20 specification\\n/// @dev The pool interface is broken up into many smaller pieces\\ninterface IUniswapV3Pool{\\n    function liquidity() external view returns (uint128);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n}\",\"keccak256\":\"0xd9fa5d92a3c7d1f53ff0ddbd4e04a5ef84faae96b067597e27016b8567e5fafc\",\"license\":\"GPL-2.0-or-later\"},\"contracts/IndexAggreagtor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\nimport {AggregatorV3Interface} from \\\"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {Client} from \\\"@chainlink/contracts-ccip/src/v0.8/ccip/libraries/Client.sol\\\";\\nimport {IRouterClient} from \\\"@chainlink/contracts-ccip/src/v0.8/ccip/interfaces/IRouterClient.sol\\\";\\nimport {CCIPReceiver} from \\\"@chainlink/contracts-ccip/src/v0.8/ccip/applications/CCIPReceiver.sol\\\";\\nimport {LiquidityManager} from \\\"./LiquidityManager.sol\\\";\\nimport {TaggingVerifier} from \\\"./TaggingVerifier.sol\\\";\\n\\nuint32 constant CALLBACK_GAS_LIMIT = 4_000_000;\\n\\nstruct ChainLinkData {\\n    address router;\\n    address link;\\n    uint64 currentChainSelectorId;\\n    bytes32 keyHash;\\n}\\n\\nstruct TokenInfo {\\n    string _symbol;\\n    address _address;\\n    uint32 _chainId;\\n    address _aggregator;\\n    string[] _tags;\\n}\\n\\nstruct LiquidityMessage {\\n    address token;\\n    uint256 liquidity;\\n    uint32 chainId;\\n    uint256 timestamp;\\n} \\n\\nstruct SupplyMessage {\\n    address token;\\n    uint256 supply;\\n    uint32 chainId;\\n    uint256 timestamp;\\n}\\n\\nstruct AggregatorParams {\\n    uint256 _timeWindow; \\n    uint256 _sampleSize;\\n    // uint32 _chainId;\\n    uint256 _bribeUnit;\\n}\\n\\nstruct IndexUpdateMessage {\\n    LiquidityMessage[] liquidityMessages;\\n    SupplyMessage[] supplyMessages;\\n}\\n\\nenum PayFeesIn {\\n    Native,\\n    LINK\\n}\\n\\nerror NotEnoughBalance(uint256 currentBalance, uint256 calculatedFees);\\n\\n\\ncontract IndexAggregator is CCIPReceiver {\\n    TokenInfo[] public tokenInfo;\\n    TokenInfo[] tmpTokens;\\n    LiquidityManager public liquidityManager;\\n    mapping(string => uint256) public tokens;\\n    string[] public tokenSymbols;\\n\\n    \\n    LiquidityMessage[] public liquidityMessages;\\n    SupplyMessage[] public supplyMessages;\\n    TaggingVerifier public taggingVerifier;\\n\\n    uint256[] public totalSupplies;\\n    uint256[] public liquidities;\\n    uint256[] public tokenParamsTimestampUpdates;\\n\\n    mapping(uint256 => uint256[]) public movingAverage;\\n    uint256 sampleSize;\\n    uint256 timeWindow;\\n    uint256 samplingFrequency;\\n    uint256 lastSampleTime;\\n    uint256[] public lastIndexOrder;\\n    mapping(string => uint256[]) public tagsIndexOrder; \\n    mapping(string => uint256) public tagsIndexTimestamp;\\n    uint256 public lastIndexTimestamp;\\n    uint256 public bribeUnit;\\n    uint32 public chainId;\\n    uint32 public mainChainId;\\n\\n    ChainLinkData public chainLinkData;\\n\\n    mapping(uint64 => address) public chainSelectorIdToSidechainAddress;\\n\\n\\n    constructor(TokenInfo[] memory _tokenInfo,  address _liquidityManager, address  router, AggregatorParams memory _aggregatorParams\\n    ) CCIPReceiver(router) {\\n        sampleSize = _aggregatorParams._sampleSize;\\n        timeWindow = _aggregatorParams._timeWindow;\\n        samplingFrequency = timeWindow / sampleSize;\\n        bribeUnit = _aggregatorParams._bribeUnit;\\n        liquidityManager = LiquidityManager(_liquidityManager);\\n        for (uint256 i = 0; i < _tokenInfo.length; i++) {\\n            tokenInfo.push(_tokenInfo[i]);\\n            tokenSymbols.push(_tokenInfo[i]._symbol);\\n            tokens[_tokenInfo[i]._symbol] = i;\\n            totalSupplies.push(IERC20(_tokenInfo[i]._address).totalSupply());\\n        }\\n    }\\n\\n    // Initialize methods\\n\\n    function setTaggingVerifier(address _taggingVerifier) external {\\n        taggingVerifier = TaggingVerifier(_taggingVerifier);\\n    }\\n\\n    function setChainLinkData(\\n        address _router,\\n        address _link,\\n        uint64 _currentChainSelectorId,\\n        bytes32 _keyHash\\n    ) external {\\n        chainLinkData = ChainLinkData({\\n            router: _router,\\n            link: _link,\\n            currentChainSelectorId: _currentChainSelectorId,\\n            keyHash: _keyHash\\n        });\\n    }\\n\\n    function setChainId(uint32 _chainId, uint32 _mainChainId) external {\\n        chainId = _chainId;\\n        mainChainId = _mainChainId;\\n    }\\n\\n    // END Initialize methods\\n\\n\\n    function isMainChain() public view returns (bool) {\\n        return chainId == mainChainId;\\n    }\\n\\n    function setSideChainAddress(\\n        uint64 chainSelectorId,\\n        address sideChainAddress\\n    ) external {\\n        chainSelectorIdToSidechainAddress[chainSelectorId] = sideChainAddress;\\n    }\\n\\n    function updateTokenParams(uint256[] memory _totalSupplies, uint256[] memory _liquidities) external {\\n\\n        for (uint256 i = 0; i < tokenInfo.length; i++) {\\n            if (tokenInfo[i]._chainId == chainId) {\\n                liquidities[i] = liquidityManager.getTotalLiquidityForToken(tokenInfo[i]._address);\\n                totalSupplies[i] = IERC20(tokenInfo[i]._address).totalSupply();\\n                tokenParamsTimestampUpdates[i] = block.timestamp;\\n            }\\n        }\\n\\n        if(isMainChain()){\\n            for (uint256 i = 0; i < totalSupplies.length; i++) {\\n                for (uint256 j = 0; j < tokenInfo.length; j++) {\\n                    if (tokenInfo[j]._address == supplyMessages[i].token) {\\n                        totalSupplies[j] = supplyMessages[i].supply;\\n                        tokenParamsTimestampUpdates[j] = liquidityMessages[i].timestamp;\\n                    }\\n                    continue;\\n                }\\n            }\\n\\n            for (uint256 i = 0; i < liquidities.length; i++) {\\n                for (uint256 j = 0; j < tokenInfo.length; j++) {\\n                    if (tokenInfo[j]._address == liquidityMessages[i].token) {\\n                        liquidities[j] = liquidityMessages[i].liquidity;\\n                        tokenParamsTimestampUpdates[j] = liquidityMessages[i].timestamp;\\n                    }\\n                    continue;\\n                }\\n            }\\n        }\\n\\n        if(!isMainChain()){\\n            SupplyMessage[] memory _supplyMessages = new SupplyMessage[](tokenInfo.length);\\n            LiquidityMessage[] memory _liquidityMessages = new LiquidityMessage[](tokenInfo.length);\\n            for (uint256 i = 0; i < tokenInfo.length; i++) {\\n                if(chainId == tokenInfo[i]._chainId){\\n                    _supplyMessages[i] = SupplyMessage(tokenInfo[i]._address, _totalSupplies[i], chainId, block.timestamp);\\n                    _liquidityMessages[i] = LiquidityMessage(tokenInfo[i]._address, _liquidities[i], chainId, block.timestamp);\\n                }\\n            }\\n        }\\n    }\\n\\n\\n    function checkTokenParams() public {\\n        for (uint256 i = 0; i < tokenInfo.length; i++) {\\n            if (block.timestamp - tokenParamsTimestampUpdates[i] >= timeWindow) {\\n                liquidities[i] = liquidityManager.getTotalLiquidityForToken(tokenInfo[i]._address);\\n                totalSupplies[i] = IERC20(tokenInfo[i]._address).totalSupply();\\n                tokenParamsTimestampUpdates[i] = block.timestamp;\\n            }\\n        }\\n    }\\n\\n\\n    function _ccipReceive(\\n        Client.Any2EVMMessage memory message\\n    ) internal virtual override {\\n\\n        IndexUpdateMessage memory indexMessage = abi.decode(\\n            message.data,\\n            (IndexUpdateMessage)\\n        );\\n        for (uint256 i = 0; i < indexMessage.liquidityMessages.length; i++) {\\n            LiquidityMessage memory liquidityMessage = indexMessage.liquidityMessages[i];\\n            liquidityMessages.push(liquidityMessage);\\n        }\\n        for (uint256 i = 0; i < indexMessage.supplyMessages.length; i++) {\\n            SupplyMessage memory supplyMessage = indexMessage.supplyMessages[i];\\n            supplyMessages.push(supplyMessage);\\n        }\\n    }\\n\\n    function collectPriceFeeds() external {\\n        // require(block.timestamp - lastSampleTime >= samplingFrequency, \\\"IndexAggregator: Sampling frequency not reached\\\");\\n\\n        // if (block.timestamp - lastSampleTime >= timeWindow) {\\n        //     for (uint256 i = 0; i < tokenInfo.length; i++) {\\n        //         if (movingAverage[i].length > 0) {\\n        //             movingAverage[i].pop();\\n        //         }\\n        //     }\\n        // }\\n\\n        for (uint256 i = 0; i < tokenInfo.length; i++) {\\n            (, int256 answer, , , ) = AggregatorV3Interface(tokenInfo[i]._aggregator).latestRoundData();\\n\\n            movingAverage[i].push(uint256(answer));\\n            uint256 sum = 0;\\n            if (movingAverage[i].length > sampleSize) {\\n                movingAverage[i].pop();\\n            }\\n            for (uint256 j = 0; j < movingAverage[i].length; j++) {\\n                sum += movingAverage[i][j];\\n            }\\n        }\\n        lastSampleTime = block.timestamp;\\n        // if there is enough bribe pay it to the caller\\n        if (bribeUnit > 0) {\\n            payable(msg.sender).transfer(bribeUnit);\\n        }\\n    }\\n\\n    function persistIndex(uint256[] memory indexOrders, string memory tag) public returns (bool)\\n    {\\n        // indexOrders is an array index order [2,0,1] means 2nd token, 0th token, 1st token for price calculation\\n        \\n        if(keccak256(abi.encodePacked(tag)) != keccak256(abi.encodePacked(\\\"\\\"))) {\\n            // Clean the temporary array in the future we may use transient storage for this)\\n            for (uint256 i = 0; i < tmpTokens.length; i++) {\\n                delete tmpTokens[i];\\n            }\\n\\n            for (uint256 i = 0; i < tokenInfo.length; i++) {\\n                for (uint256 j = 0; j < tokenInfo[i]._tags.length; j++) {\\n                    if (keccak256(abi.encodePacked(tokenInfo[i]._tags[j])) == keccak256(abi.encodePacked(tag))) {\\n                        // need to check if the tag was verified on the tagging system\\n                        // require(\\n                        //     taggingVerifier.tokenSymbolToVerifiedTagsMap(tokenInfo[i]._symbol, tag) == true,\\n                        //     \\\"IndexAggregator: Tag not verified\\\"\\n                        // );\\n                        tmpTokens.push(tokenInfo[i]);\\n                    }\\n                }\\n            }\\n            // require(\\n            //     tmpTokens.length == indexOrders.length,  \\\"IndexAggregator: Invalid length of token with required tags\\\");\\n        }\\n        else{\\n        //    require(indexOrders.length == tokenInfo.length, \\\"IndexAggregator: Invalid length of indexOrders\\\");\\n        }\\n\\n        uint256 token_a_value;\\n        uint256 token_b_value;\\n        for (uint256 i = 0; i < indexOrders.length - 1; i++) {\\n            token_a_value =  0;\\n            token_b_value = 0;\\n\\n            for (uint256 j = 0; j < movingAverage[indexOrders[i]].length; j++) {\\n                token_a_value += movingAverage[indexOrders[i]][j] * totalSupplies[indexOrders[i]];\\n                token_b_value += movingAverage[indexOrders[i + 1]][j] * totalSupplies[indexOrders[i + 1]];\\n            }\\n\\n\\n            require(token_a_value > 0, \\\"IndexAggregator: Token value is zero\\\");\\n            require(token_b_value > 0, \\\"IndexAggregator: Token value is zero\\\");\\n            require(token_a_value > token_b_value, \\\"IndexAggregator: order is not correct\\\");\\n        }\\n\\n        if(keccak256(abi.encodePacked(tag)) != keccak256(abi.encodePacked(\\\"\\\"))) {\\n           tagsIndexOrder[tag] = indexOrders;\\n        }\\n        else{\\n            lastIndexOrder = indexOrders;\\n            lastIndexTimestamp = block.timestamp;  \\n        }\\n        return true;\\n    }\\n\\n\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    )\\n        public\\n        pure\\n        override(CCIPReceiver)\\n        returns (bool)\\n    {\\n        return CCIPReceiver.supportsInterface(interfaceId);\\n    }\\n\\n    function send(\\n        uint64 destinationChainSelector,\\n        PayFeesIn payFeesIn,\\n        IndexUpdateMessage memory data\\n    ) internal returns (bytes32 messageId) {\\n        Client.EVM2AnyMessage memory message = Client.EVM2AnyMessage({\\n            receiver: abi.encode(\\n                chainSelectorIdToSidechainAddress[destinationChainSelector]\\n            ),\\n            data: abi.encode(data),\\n            tokenAmounts: new Client.EVMTokenAmount[](0),\\n            extraArgs: Client._argsToBytes(\\n                Client.EVMExtraArgsV1({\\n                    gasLimit: CALLBACK_GAS_LIMIT\\n                })\\n            ),\\n            feeToken: payFeesIn == PayFeesIn.LINK\\n                ? chainLinkData.link\\n                : address(0)\\n        });\\n\\n        uint256 fee = IRouterClient(chainLinkData.router).getFee(\\n            destinationChainSelector,\\n            message\\n        );\\n\\n        if (payFeesIn == PayFeesIn.LINK) {\\n            if (fee > IERC20(chainLinkData.link).balanceOf(address(this)))\\n                revert NotEnoughBalance(\\n                    IERC20(chainLinkData.link).balanceOf(address(this)),\\n                    fee\\n                );\\n            IERC20(chainLinkData.link).approve(chainLinkData.router, fee);\\n            messageId = IRouterClient(chainLinkData.router).ccipSend(\\n                destinationChainSelector,\\n                message\\n            );\\n        } else {\\n            if (fee > address(this).balance)\\n                revert NotEnoughBalance(address(this).balance, fee);\\n            messageId = IRouterClient(chainLinkData.router).ccipSend{\\n                value: fee\\n            }(destinationChainSelector, message);\\n        }\\n    }\\n}\",\"keccak256\":\"0x1fbabcccee300b59110287fb5e1e5f5cdc30c777cf90e0d6b8f18eeab0491d7c\",\"license\":\"MIT\"},\"contracts/LiquidityManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IUniswapV3Factory.sol\\\";\\nimport \\\"./IUniswapV3Pool.sol\\\";\\n\\ncontract LiquidityManager {\\n    IUniswapV3Factory public factory;\\n    uint24[] public feeTiers = [500, 3000, 10000]; // Example fee tiers: 0.05%, 0.3%, 1%\\n    address[] public comparisonTokens;\\n\\n    constructor(address _factory, address[] memory _comparisonTokens) {\\n        factory = IUniswapV3Factory(_factory);\\n        comparisonTokens = _comparisonTokens;\\n    }\\n\\n    function getPoolsForToken(address token) public view returns (address[] memory) {\\n        uint256 poolCount = 0;\\n        address[] memory tempPools = new address[](comparisonTokens.length * feeTiers.length);\\n\\n        for (uint256 i = 0; i < comparisonTokens.length; i++) {\\n            if (comparisonTokens[i] == token) continue;\\n            for (uint256 j = 0; j < feeTiers.length; j++) {\\n                address pool = factory.getPool(token, comparisonTokens[i], feeTiers[j]);\\n                if (pool != address(0)) {\\n                    tempPools[poolCount] = pool;\\n                    poolCount++;\\n                }\\n            }\\n        }\\n\\n        // Create an array of the actual size\\n        address[] memory pools = new address[](poolCount);\\n        for (uint256 i = 0; i < poolCount; i++) {\\n            pools[i] = tempPools[i];\\n        }\\n\\n        return pools;\\n    }\\n\\n    function getTotalLiquidityForToken(address token) public view returns (uint128 totalLiquidity) {\\n        address[] memory pools = getPoolsForToken(token);\\n        for (uint256 i = 0; i < pools.length; i++) {\\n            totalLiquidity += IUniswapV3Pool(pools[i]).liquidity();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe042c2267d2ea4f215d96a4ce994d291b95072f5b38110493e2b684218470fb2\",\"license\":\"MIT\"},\"contracts/TaggingVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// pragma solidity 0.8.20;\\npragma solidity 0.8.4;\\n\\nimport \\\"@reclaimprotocol/verifier-solidity-sdk/contracts/Reclaim.sol\\\";\\nimport \\\"@reclaimprotocol/verifier-solidity-sdk/contracts/Addresses.sol\\\";\\n \\ncontract TaggingVerifier {\\n  address public reclaimAddress;\\n  // add providersHashes for your permitted providers\\n  string[] public providersHashes;\\n  mapping(string => address) public tokenSymbolToAddress;\\n  mapping(string => string[]) public tokenSymbolToVerifiedTags;\\n  mapping (string => mapping(string => bool)) public tokenSymbolToVerifiedTagsMap;\\n  uint256 public lastUpdateTimestamp;\\n\\n  constructor(string[] memory _providersHashes){\\n     providersHashes = _providersHashes;\\n     reclaimAddress = Addresses.PLOYGON_MUMBAI_TESTNET; \\n  }\\n\\n  function setTokenAddress(string memory tokenSymbol, address tokenAddress) public \\n  // onlyOwner\\n  {\\n    tokenSymbolToAddress[tokenSymbol] = tokenAddress;\\n  }\\n\\n  function split(string memory str) public pure returns (string[] memory) {\\n        bytes memory strBytes = bytes(str);\\n        uint256 count = 1;\\n        for (uint256 i = 0; i < strBytes.length; i++) {\\n            if (strBytes[i] == \\\",\\\") {\\n                count++;\\n            }\\n        }\\n        string[] memory result = new string[](count);\\n        uint256 j = 0;\\n        bytes memory temp;\\n        for (uint256 i = 0; i < strBytes.length; i++) {\\n            if (strBytes[i] == \\\",\\\") {\\n                result[j] = string(temp);\\n                j++;\\n                temp = \\\"\\\";\\n            } else {\\n                temp = abi.encodePacked(temp, strBytes[i]);\\n            }\\n        }\\n\\n        result[j] = string(temp);\\n        return result;\\n    }\\n\\n  function verifyProof(Reclaim.Proof memory proof, string memory tokenSymbolTag) public {\\n      Reclaim(reclaimAddress).verifyProof(proof);\\n      require(keccak256(abi.encodePacked(proof.claimInfo.parameters)) == keccak256(abi.encodePacked(tokenSymbolTag)), \\\"Invalid token list parameters\\\");\\n      string[] memory stringList = split(tokenSymbolTag);    \\n      require(stringList.length == 2, \\\"Invalid token list parameters\\\");\\n      if (tokenSymbolToVerifiedTags[stringList[0]].length == 0) {\\n          tokenSymbolToVerifiedTags[stringList[0]] = new string[](0);\\n      }\\n      tokenSymbolToVerifiedTags[stringList[0]].push(stringList[1]);\\n      tokenSymbolToVerifiedTagsMap[stringList[0]][stringList[1]] = true;\\n      lastUpdateTimestamp = block.timestamp;\\n  }\\n}\\n\",\"keccak256\":\"0x4b86df1b4a1dc7dc3a88aa4d94aca04cfdc6198f55c2b8748700df814662831d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b50604051620035a4380380620035a483398101604081905262000034916200060b565b816001600160a01b03811662000064576040516335fdcccd60e21b81526000600482015260240160405180910390fd5b60601b6001600160601b0319166080526020810151600c8190558151600d81905562000091919062000879565b600e556040810151601455600280546001600160a01b0319166001600160a01b03851617905560005b84518110156200030e576000858281518110620000e757634e487b7160e01b600052603260045260246000fd5b602090810291909101810151825460018101845560009384529282902081518051929460040290910192620001229284929091019062000319565b50602082810151600183018054604086015163ffffffff16600160a01b026001600160c01b03199091166001600160a01b03938416171790556060840151600284018054919092166001600160a01b03199190911617905560808301518051620001939260038501920190620003a8565b5050506004858281518110620001b957634e487b7160e01b600052603260045260246000fd5b6020908102919091018101515182546001810184556000938452928290208151620001ee949190910192919091019062000319565b508060038683815181106200021357634e487b7160e01b600052603260045260246000fd5b6020026020010151600001516040516200022e9190620007d7565b90815260200160405180910390208190555060088582815181106200026357634e487b7160e01b600052603260045260246000fd5b6020026020010151602001516001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015620002a857600080fd5b505afa158015620002bd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002e39190620007be565b815460018101835560009283526020909220909101558062000305816200090a565b915050620000ba565b505050505062000948565b8280546200032790620008cd565b90600052602060002090601f0160209004810192826200034b576000855562000396565b82601f106200036657805160ff191683800117855562000396565b8280016001018555821562000396579182015b828111156200039657825182559160200191906001019062000379565b50620003a492915062000408565b5090565b828054828255906000526020600020908101928215620003fa579160200282015b82811115620003fa5782518051620003e991849160209091019062000319565b5091602001919060010190620003c9565b50620003a49291506200041f565b5b80821115620003a4576000815560010162000409565b80821115620003a457600062000436828262000440565b506001016200041f565b5080546200044e90620008cd565b6000825580601f106200045f575050565b601f0160209004906000526020600020908101906200047f919062000408565b50565b80516001600160a01b03811681146200049a57600080fd5b919050565b600082601f830112620004b0578081fd5b81516020620004c9620004c38362000853565b62000820565b80838252828201915082860187848660051b8901011115620004e9578586fd5b855b858110156200052e5781516001600160401b038111156200050a578788fd5b6200051a8a87838c01016200053b565b8552509284019290840190600101620004eb565b5090979650505050505050565b600082601f8301126200054c578081fd5b81516001600160401b0381111562000568576200056862000932565b6200057d601f8201601f191660200162000820565b81815284602083860101111562000592578283fd5b620005a58260208301602087016200089a565b949350505050565b600060608284031215620005bf578081fd5b604051606081016001600160401b0381118282101715620005e457620005e462000932565b80604052508091508251815260208301516020820152604083015160408201525092915050565b60008060008060c0858703121562000621578384fd5b84516001600160401b0381111562000637578485fd5b86601f828801011262000648578485fd5b808601516200065b620004c38262000853565b808282526020820191506020848a01018a60208560051b878d010101111562000682578889fd5b885b848110156200077b5781516001600160401b03811115620006a3578a8bfd5b8b87010160a0818e03601f19011215620006bb578a8bfd5b620006c5620007f5565b60208201516001600160401b03811115620006de578c8dfd5b620006ef8f6020838601016200053b565b825250620007006040830162000482565b6020820152606082015163ffffffff811681146200071c578c8dfd5b60408201526200072f6080830162000482565b606082015260a08201516001600160401b038111156200074d578c8dfd5b6200075e8f6020838601016200049f565b608083015250855250602093840193919091019060010162000684565b505080975050505050620007926020860162000482565b9250620007a26040860162000482565b9150620007b38660608701620005ad565b905092959194509250565b600060208284031215620007d0578081fd5b5051919050565b60008251620007eb8184602087016200089a565b9190910192915050565b60405160a081016001600160401b03811182821017156200081a576200081a62000932565b60405290565b604051601f8201601f191681016001600160401b03811182821017156200084b576200084b62000932565b604052919050565b60006001600160401b038211156200086f576200086f62000932565b5060051b60200190565b6000826200089557634e487b7160e01b81526012600452602481fd5b500490565b60005b83811015620008b75781810151838201526020016200089d565b83811115620008c7576000848401525b50505050565b600181811c90821680620008e257607f821691505b602082108114156200090457634e487b7160e01b600052602260045260246000fd5b50919050565b60006000198214156200092b57634e487b7160e01b81526011600452602481fd5b5060010190565b634e487b7160e01b600052604160045260246000fd5b60805160601c612c366200096e600039600081816104a1015261198d0152612c366000f3fe608060405234801561001057600080fd5b50600436106101f05760003560e01c806375ffdf5d1161010f578063bff349e7116100a2578063e1bbd9db11610071578063e1bbd9db1461060c578063eaeca5111461061f578063f156ebf514610627578063f7df834e1461063057600080fd5b8063bff349e71461051e578063cc33c8751461055c578063cf82f7671461057f578063d440b4581461060357600080fd5b8063b0f479a1116100de578063b0f479a11461049f578063b547eccf146104c5578063b54fa474146104f0578063b834f6fb1461050357600080fd5b806375ffdf5d1461045657806385572ffb146104695780639a8a05921461047c5780639ec3cd031461048c57600080fd5b80633382743811610187578063685c180011610156578063685c1800146103c857806369d7273d146103db57806369e3e4cd146104235780636e7ddea81461043657600080fd5b806333827438146103595780635dc55ac21461038457806365c3048e146103975780636703a8da146103c057600080fd5b80630f45ad43116101c35780630f45ad431461029b57806316ee5b04146102c8578063193e795e146102db5780631e5ba3d9146102ee57600080fd5b806301ffc9a7146101f557806304c2320b1461021d5780630713051d1461025657806309e74fef14610269575b600080fd5b61020861020336600461250d565b610677565b60405190151581526020015b60405180910390f35b61024861022b366004612535565b805160208183018101805160038252928201919093012091525481565b604051908152602001610214565b6102486102643660046126fb565b610688565b6102996102773660046123e6565b600780546001600160a01b0319166001600160a01b0392909216919091179055565b005b6015546102b390640100000000900463ffffffff1681565b60405163ffffffff9091168152602001610214565b6102486102d636600461256f565b6106a9565b6102486102e93660046126fb565b6106e9565b601654601754601854610320926001600160a01b039081169290811691600160a01b9091046001600160401b03169084565b604080516001600160a01b0395861681529490931660208501526001600160401b03909116918301919091526060820152608001610214565b60025461036c906001600160a01b031681565b6040516001600160a01b039091168152602001610214565b61024861039236600461272b565b6106f9565b61036c6103a5366004612784565b6019602052600090815260409020546001600160a01b031681565b610299610715565b60075461036c906001600160a01b031681565b6103ee6103e93660046126fb565b610987565b604080516001600160a01b039095168552602085019390935263ffffffff909116918301919091526060820152608001610214565b610299610431366004612457565b6109d1565b6104496104443660046126fb565b61128a565b60405161021491906128fb565b6102086104643660046124b7565b611336565b6102996104773660046125b1565b611982565b6015546102b39063ffffffff1681565b6103ee61049a3660046126fb565b6119de565b7f000000000000000000000000000000000000000000000000000000000000000061036c565b6102486104d3366004612535565b805160208183018101805160128252928201919093012091525481565b6102486104fe3660046126fb565b6119ee565b601554640100000000810463ffffffff908116911614610208565b61029961052c36600461274c565b6015805463ffffffff9283166401000000000267ffffffffffffffff199091169290931691909117919091179055565b61056f61056a3660046126fb565b6119fe565b604051610214949392919061290e565b61029961058d366004612409565b604080516080810182526001600160a01b0395861680825294909516602086018190526001600160401b03939093169085018190526060909401819052601680546001600160a01b031916909317909255601780546001600160e01b031916909117600160a01b90930292909217909155601855565b61024860145481565b61024861061a3660046126fb565b611adb565b610299611aeb565b61024860135481565b61029961063e36600461279e565b6001600160401b0391909116600090815260196020526040902080546001600160a01b0319166001600160a01b03909216919091179055565b600061068282611cf0565b92915050565b6009818154811061069857600080fd5b600091825260209091200154905081565b815160208184018101805160118252928201918501919091209190528054829081106106d457600080fd5b90600052602060002001600091509150505481565b6010818154811061069857600080fd5b600b60205281600052604060002081815481106106d457600080fd5b60005b60005481101561098457600d54600a828154811061074657634e487b7160e01b600052603260045260246000fd5b90600052602060002001544261075c9190612a68565b1061097257600254600080546001600160a01b03909216916361566a3e91908490811061079957634e487b7160e01b600052603260045260246000fd5b600091825260209091206004918202016001015460405160e084901b6001600160e01b03191681526001600160a01b039091169181019190915260240160206040518083038186803b1580156107ee57600080fd5b505afa158015610802573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061082691906126d4565b6001600160801b03166009828154811061085057634e487b7160e01b600052603260045260246000fd5b90600052602060002001819055506000818154811061087f57634e487b7160e01b600052603260045260246000fd5b906000526020600020906004020160010160009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156108dc57600080fd5b505afa1580156108f0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109149190612713565b6008828154811061093557634e487b7160e01b600052603260045260246000fd5b906000526020600020018190555042600a828154811061096557634e487b7160e01b600052603260045260246000fd5b6000918252602090912001555b8061097c81612b92565b915050610718565b50565b6005818154811061099757600080fd5b600091825260209091206004909102018054600182015460028301546003909301546001600160a01b0390921693509163ffffffff169084565b60005b600054811015610c56576015546000805463ffffffff9092169183908110610a0c57634e487b7160e01b600052603260045260246000fd5b6000918252602090912060049091020160010154600160a01b900463ffffffff161415610c4457600254600080546001600160a01b03909216916361566a3e919084908110610a6b57634e487b7160e01b600052603260045260246000fd5b600091825260209091206004918202016001015460405160e084901b6001600160e01b03191681526001600160a01b039091169181019190915260240160206040518083038186803b158015610ac057600080fd5b505afa158015610ad4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610af891906126d4565b6001600160801b031660098281548110610b2257634e487b7160e01b600052603260045260246000fd5b906000526020600020018190555060008181548110610b5157634e487b7160e01b600052603260045260246000fd5b906000526020600020906004020160010160009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015610bae57600080fd5b505afa158015610bc2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610be69190612713565b60088281548110610c0757634e487b7160e01b600052603260045260246000fd5b906000526020600020018190555042600a8281548110610c3757634e487b7160e01b600052603260045260246000fd5b6000918252602090912001555b80610c4e81612b92565b9150506109d4565b50601554640100000000810463ffffffff90811691161415610f7b5760005b600854811015610df55760005b600054811015610de25760068281548110610cad57634e487b7160e01b600052603260045260246000fd5b6000918252602082206004909102015481546001600160a01b03909116919083908110610cea57634e487b7160e01b600052603260045260246000fd5b60009182526020909120600160049092020101546001600160a01b03161415610dd05760068281548110610d2e57634e487b7160e01b600052603260045260246000fd5b90600052602060002090600402016001015460088281548110610d6157634e487b7160e01b600052603260045260246000fd5b906000526020600020018190555060058281548110610d9057634e487b7160e01b600052603260045260246000fd5b906000526020600020906004020160030154600a8281548110610dc357634e487b7160e01b600052603260045260246000fd5b6000918252602090912001555b80610dda81612b92565b915050610c82565b5080610ded81612b92565b915050610c75565b5060005b600954811015610f795760005b600054811015610f665760058281548110610e3157634e487b7160e01b600052603260045260246000fd5b6000918252602082206004909102015481546001600160a01b03909116919083908110610e6e57634e487b7160e01b600052603260045260246000fd5b60009182526020909120600160049092020101546001600160a01b03161415610f545760058281548110610eb257634e487b7160e01b600052603260045260246000fd5b90600052602060002090600402016001015460098281548110610ee557634e487b7160e01b600052603260045260246000fd5b906000526020600020018190555060058281548110610f1457634e487b7160e01b600052603260045260246000fd5b906000526020600020906004020160030154600a8281548110610f4757634e487b7160e01b600052603260045260246000fd5b6000918252602090912001555b80610f5e81612b92565b915050610e06565b5080610f7181612b92565b915050610df9565b505b601554640100000000810463ffffffff90811691161461128657600080546001600160401b03811115610fbe57634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561101057816020015b604080516080810182526000808252602080830182905292820181905260608201528252600019909201910181610fdc5790505b5060008054919250906001600160401b0381111561103e57634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561109057816020015b60408051608081018252600080825260208083018290529282018190526060820152825260001990920191018161105c5790505b50905060005b60005481101561128257600081815481106110c157634e487b7160e01b600052603260045260246000fd5b600091825260209091206001600490920201015460155463ffffffff908116600160a01b9092041614156112705760405180608001604052806000838154811061111b57634e487b7160e01b600052603260045260246000fd5b6000918252602091829020600160049092020101546001600160a01b03168252875191019087908490811061116057634e487b7160e01b600052603260045260246000fd5b602090810291909101810151825260155463ffffffff16908201524260409091015283518490839081106111a457634e487b7160e01b600052603260045260246000fd5b60200260200101819052506040518060800160405280600083815481106111db57634e487b7160e01b600052603260045260246000fd5b6000918252602091829020600160049092020101546001600160a01b03168252865191019086908490811061122057634e487b7160e01b600052603260045260246000fd5b602090810291909101810151825260155463ffffffff169082015242604090910152825183908390811061126457634e487b7160e01b600052603260045260246000fd5b60200260200101819052505b8061127a81612b92565b915050611096565b5050505b5050565b6004818154811061129a57600080fd5b9060005260206000200160009150905080546112b590612b57565b80601f01602080910402602001604051908101604052809291908181526020018280546112e190612b57565b801561132e5780601f106113035761010080835404028352916020019161132e565b820191906000526020600020905b81548152906001019060200180831161131157829003601f168201915b505050505081565b60408051600080825260208201808452825190209092909161135a91859101612844565b60405160208183030381529060405280519060200120146116045760005b60015481101561140457600181815481106113a357634e487b7160e01b600052603260045260246000fd5b600091825260208220600490910201906113bd8282611fbf565b6001820180546001600160c01b03191690556002820180546001600160a01b03191690556113ef600383016000611ff9565b505080806113fc90612b92565b915050611378565b5060005b6000548110156116025760005b6000828154811061143657634e487b7160e01b600052603260045260246000fd5b9060005260206000209060040201600301805490508110156115ef57836040516020016114639190612844565b604051602081830303815290604052805190602001206000838154811061149a57634e487b7160e01b600052603260045260246000fd5b906000526020600020906004020160030182815481106114ca57634e487b7160e01b600052603260045260246000fd5b906000526020600020016040516020016114e49190612860565b6040516020818303038152906040528051906020012014156115dd5760016000838154811061152357634e487b7160e01b600052603260045260246000fd5b6000918252602080832084546001810186559484529220600491820290920180549093909102909101908190839061155a90612b57565b611565929190612017565b506001828101805491830180546001600160a01b039384166001600160a01b03198083168217845593546001600160c01b031990921617600160a01b9182900463ffffffff169091021790556002808501549084018054919093169116179055600380830180546115d992840191906120a2565b5050505b806115e781612b92565b915050611415565b50806115fa81612b92565b915050611408565b505b60008060005b600186516116189190612a68565b8110156118ea57600092506000915060005b600b600088848151811061164e57634e487b7160e01b600052603260045260246000fd5b602002602001015181526020019081526020016000208054905081101561183157600887838151811061169157634e487b7160e01b600052603260045260246000fd5b6020026020010151815481106116b757634e487b7160e01b600052603260045260246000fd5b9060005260206000200154600b60008985815181106116e657634e487b7160e01b600052603260045260246000fd5b60200260200101518152602001908152602001600020828154811061171b57634e487b7160e01b600052603260045260246000fd5b90600052602060002001546117309190612a49565b61173a9085612a31565b935060088761174a846001612a31565b8151811061176857634e487b7160e01b600052603260045260246000fd5b60200260200101518154811061178e57634e487b7160e01b600052603260045260246000fd5b9060005260206000200154600b6000898560016117ab9190612a31565b815181106117c957634e487b7160e01b600052603260045260246000fd5b6020026020010151815260200190815260200160002082815481106117fe57634e487b7160e01b600052603260045260246000fd5b90600052602060002001546118139190612a49565b61181d9084612a31565b92508061182981612b92565b91505061162a565b506000831161185b5760405162461bcd60e51b815260040161185290612950565b60405180910390fd5b6000821161187b5760405162461bcd60e51b815260040161185290612950565b8183116118d85760405162461bcd60e51b815260206004820152602560248201527f496e64657841676772656761746f723a206f72646572206973206e6f7420636f6044820152641c9c9958dd60da1b6064820152608401611852565b806118e281612b92565b91505061160a565b50604080516000815260208101808352815190209161190b91879101612844565b604051602081830303815290604052805190602001201461195e57846011856040516119379190612844565b90815260200160405180910390209080519060200190611958929190612104565b50611977565b8451611971906010906020880190612104565b50426013555b506001949350505050565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146119cd576040516335fdcccd60e21b8152336004820152602401611852565b6109846119d982612a7f565b611d26565b6006818154811061099757600080fd5b6008818154811061069857600080fd5b60008181548110611a0e57600080fd5b9060005260206000209060040201600091509050806000018054611a3190612b57565b80601f0160208091040260200160405190810160405280929190818152602001828054611a5d90612b57565b8015611aaa5780601f10611a7f57610100808354040283529160200191611aaa565b820191906000526020600020905b815481529060010190602001808311611a8d57829003601f168201915b50505050600183015460029093015491926001600160a01b0380821693600160a01b90920463ffffffff1692501684565b600a818154811061069857600080fd5b60005b600054811015611cb3576000808281548110611b1a57634e487b7160e01b600052603260045260246000fd5b906000526020600020906004020160020160009054906101000a90046001600160a01b03166001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b158015611b7757600080fd5b505afa158015611b8b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611baf91906127c9565b5050506000848152600b6020908152604082208054600181018255818452918320909101839055600c5486835290549294509092501015611c2c576000838152600b60205260409020805480611c1557634e487b7160e01b600052603160045260246000fd5b600190038181906000526020600020016000905590555b60005b6000848152600b6020526040902054811015611c9d576000848152600b60205260409020805482908110611c7357634e487b7160e01b600052603260045260246000fd5b906000526020600020015482611c899190612a31565b915080611c9581612b92565b915050611c2f565b5050508080611cab90612b92565b915050611aee565b5042600f5560145415611cee57601454604051339180156108fc02916000818181858888f19350505050158015610984573d6000803e3d6000fd5b565b60006001600160e01b031982166385572ffb60e01b148061068257506001600160e01b031982166301ffc9a760e01b1492915050565b60008160600151806020019051810190611d4091906125e8565b905060005b815151811015611e7c57600082600001518281518110611d7557634e487b7160e01b600052603260045260246000fd5b6020908102919091018101516005805460018101825560009190915281517f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db0600490920291820180546001600160a01b0319166001600160a01b03909216919091179055918101517f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db183015560408101517f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db28301805463ffffffff191663ffffffff909216919091179055606001517f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db3909101555080611e7481612b92565b915050611d45565b5060005b816020015151811015611fba57600082602001518281518110611eb357634e487b7160e01b600052603260045260246000fd5b6020908102919091018101516006805460018101825560009190915281517ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f600490920291820180546001600160a01b0319166001600160a01b03909216919091179055918101517ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d4083015560408101517ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d418301805463ffffffff191663ffffffff909216919091179055606001517ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d42909101555080611fb281612b92565b915050611e80565b505050565b508054611fcb90612b57565b6000825580601f10611fdb575050565b601f016020900490600052602060002090810190610984919061213f565b50805460008255906000526020600020908101906109849190612154565b82805461202390612b57565b90600052602060002090601f0160209004810192826120455760008555612092565b82601f106120565780548555612092565b8280016001018555821561209257600052602060002091601f016020900482015b82811115612092578254825591600101919060010190612077565b5061209e92915061213f565b5090565b8280548282559060005260206000209081019282156120f85760005260206000209182015b828111156120f85782829080546120dd90612b57565b6120e8929190612017565b50916001019190600101906120c7565b5061209e929150612154565b828054828255906000526020600020908101928215612092579160200282015b82811115612092578251825591602001919060010190612124565b5b8082111561209e5760008155600101612140565b8082111561209e5760006121688282611fbf565b50600101612154565b600082601f830112612181578081fd5b8135602061219661219183612a0e565b6129de565b80838252828201915082860187848660061b89010111156121b5578586fd5b855b858110156121fe57604080838b0312156121cf578788fd5b6121d7612994565b83356121e281612bd9565b81528387013587820152855293850193909101906001016121b7565b5090979650505050505050565b600082601f83011261221b578081fd5b8151602061222b61219183612a0e565b80838252828201915082860187848660071b890101111561224a578586fd5b855b858110156121fe5761225e898361233a565b8452928401926080919091019060010161224c565b600082601f830112612283578081fd5b8135602061229361219183612a0e565b80838252828201915082860187848660051b89010111156122b2578586fd5b855b858110156121fe578135845292840192908401906001016122b4565b600082601f8301126122e0578081fd5b81356001600160401b038111156122f9576122f9612bc3565b61230c601f8201601f19166020016129de565b818152846020838601011115612320578283fd5b816020850160208301379081016020019190915292915050565b60006080828403121561234b578081fd5b604051608081018181106001600160401b038211171561236d5761236d612bc3565b8060405250809150825161238081612bd9565b815260208381015190820152604083015161239a81612bee565b6040820152606092830151920191909152919050565b80356001600160401b03811681146123c757600080fd5b919050565b805169ffffffffffffffffffff811681146123c757600080fd5b6000602082840312156123f7578081fd5b813561240281612bd9565b9392505050565b6000806000806080858703121561241e578283fd5b843561242981612bd9565b9350602085013561243981612bd9565b9250612447604086016123b0565b9396929550929360600135925050565b60008060408385031215612469578182fd5b82356001600160401b038082111561247f578384fd5b61248b86838701612273565b935060208501359150808211156124a0578283fd5b506124ad85828601612273565b9150509250929050565b600080604083850312156124c9578182fd5b82356001600160401b03808211156124df578384fd5b6124eb86838701612273565b93506020850135915080821115612500578283fd5b506124ad858286016122d0565b60006020828403121561251e578081fd5b81356001600160e01b031981168114612402578182fd5b600060208284031215612546578081fd5b81356001600160401b0381111561255b578182fd5b612567848285016122d0565b949350505050565b60008060408385031215612581578182fd5b82356001600160401b03811115612596578283fd5b6125a2858286016122d0565b95602094909401359450505050565b6000602082840312156125c2578081fd5b81356001600160401b038111156125d7578182fd5b820160a08185031215612402578182fd5b600060208083850312156125fa578182fd5b82516001600160401b0380821115612610578384fd5b9084019060408287031215612623578384fd5b61262b612994565b825182811115612639578586fd5b8301601f81018813612649578586fd5b805161265761219182612a0e565b8082825287820191508784018b898560071b870101111561267657898afd5b8994505b838510156126a15761268c8c8261233a565b8352600194909401939188019160800161267a565b50845250505082840151828111156126b7578586fd5b6126c38882860161220b565b948201949094529695505050505050565b6000602082840312156126e5578081fd5b81516001600160801b0381168114612402578182fd5b60006020828403121561270c578081fd5b5035919050565b600060208284031215612724578081fd5b5051919050565b6000806040838503121561273d578182fd5b50508035926020909101359150565b6000806040838503121561275e578182fd5b823561276981612bee565b9150602083013561277981612bee565b809150509250929050565b600060208284031215612795578081fd5b612402826123b0565b600080604083850312156127b0578182fd5b6127b9836123b0565b9150602083013561277981612bd9565b600080600080600060a086880312156127e0578283fd5b6127e9866123cc565b945060208601519350604086015192506060860151915061280c608087016123cc565b90509295509295909350565b60008151808452612830816020860160208601612b27565b601f01601f19169290920160200192915050565b60008251612856818460208701612b27565b9190910192915050565b600080835482600182811c91508083168061287c57607f831692505b602080841082141561289c57634e487b7160e01b87526022600452602487fd5b8180156128b057600181146128c1576128ed565b60ff198616895284890196506128ed565b60008a815260209020885b868110156128e55781548b8201529085019083016128cc565b505084890196505b509498975050505050505050565b6020815260006124026020830184612818565b6080815260006129216080830187612818565b6001600160a01b03958616602084015263ffffffff949094166040830152509216606090920191909152919050565b60208082526024908201527f496e64657841676772656761746f723a20546f6b656e2076616c7565206973206040820152637a65726f60e01b606082015260800190565b604080519081016001600160401b03811182821017156129b6576129b6612bc3565b60405290565b60405160a081016001600160401b03811182821017156129b6576129b6612bc3565b604051601f8201601f191681016001600160401b0381118282101715612a0657612a06612bc3565b604052919050565b60006001600160401b03821115612a2757612a27612bc3565b5060051b60200190565b60008219821115612a4457612a44612bad565b500190565b6000816000190483118215151615612a6357612a63612bad565b500290565b600082821015612a7a57612a7a612bad565b500390565b600060a08236031215612a90578081fd5b612a986129bc565b82358152612aa8602084016123b0565b602082015260408301356001600160401b0380821115612ac6578384fd5b612ad2368387016122d0565b60408401526060850135915080821115612aea578384fd5b612af6368387016122d0565b60608401526080850135915080821115612b0e578384fd5b50612b1b36828601612171565b60808301525092915050565b60005b83811015612b42578181015183820152602001612b2a565b83811115612b51576000848401525b50505050565b600181811c90821680612b6b57607f821691505b60208210811415612b8c57634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415612ba657612ba6612bad565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461098457600080fd5b63ffffffff8116811461098457600080fdfea26469706673582212201d525d9618f673ac1eaf434c9cd40f66f1dcc69919e4eb24d0e65bf4bd38581d64736f6c63430008040033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "ccipReceive((bytes32,uint64,bytes,bytes,(address,uint256)[]))": {
        "details": "Note ensure you check the msg.sender is the OffRampRouter",
        "params": {
          "message": "CCIP Message"
        }
      },
      "getRouter()": {
        "returns": {
          "_0": "CCIP router address"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "Should indicate whether the contract implements IAny2EVMMessageReceiver e.g. return interfaceId == type(IAny2EVMMessageReceiver).interfaceId || interfaceId == type(IERC165).interfaceId This allows CCIP to check if ccipReceive is available before calling it. If this returns false or reverts, only tokens are transferred to the receiver. If this returns true, tokens are transferred and ccipReceive is called atomically. Additionally, if the receiver address does not have code associated with it at the time of execution (EXTCODESIZE returns 0), only tokens will be transferred.",
        "params": {
          "interfaceId": "The interfaceId to check"
        },
        "returns": {
          "_0": "true if the interfaceId is supported"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "ccipReceive((bytes32,uint64,bytes,bytes,(address,uint256)[]))": {
        "notice": "Called by the Router to deliver a message. If this reverts, any token transfers also revert. The message will move to a FAILED state and become available for manual execution."
      },
      "getRouter()": {
        "notice": "Return the current router"
      },
      "supportsInterface(bytes4)": {
        "notice": "IERC165 supports an interfaceId"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3406,
        "contract": "contracts/IndexAggreagtor.sol:IndexAggregator",
        "label": "tokenInfo",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_struct(TokenInfo)3357_storage)dyn_storage"
      },
      {
        "astId": 3410,
        "contract": "contracts/IndexAggreagtor.sol:IndexAggregator",
        "label": "tmpTokens",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_struct(TokenInfo)3357_storage)dyn_storage"
      },
      {
        "astId": 3413,
        "contract": "contracts/IndexAggreagtor.sol:IndexAggregator",
        "label": "liquidityManager",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(LiquidityManager)4755"
      },
      {
        "astId": 3417,
        "contract": "contracts/IndexAggreagtor.sol:IndexAggregator",
        "label": "tokens",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_string_memory_ptr,t_uint256)"
      },
      {
        "astId": 3420,
        "contract": "contracts/IndexAggreagtor.sol:IndexAggregator",
        "label": "tokenSymbols",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_string_storage)dyn_storage"
      },
      {
        "astId": 3424,
        "contract": "contracts/IndexAggreagtor.sol:IndexAggregator",
        "label": "liquidityMessages",
        "offset": 0,
        "slot": "5",
        "type": "t_array(t_struct(LiquidityMessage)3366_storage)dyn_storage"
      },
      {
        "astId": 3428,
        "contract": "contracts/IndexAggreagtor.sol:IndexAggregator",
        "label": "supplyMessages",
        "offset": 0,
        "slot": "6",
        "type": "t_array(t_struct(SupplyMessage)3375_storage)dyn_storage"
      },
      {
        "astId": 3431,
        "contract": "contracts/IndexAggreagtor.sol:IndexAggregator",
        "label": "taggingVerifier",
        "offset": 0,
        "slot": "7",
        "type": "t_contract(TaggingVerifier)5033"
      },
      {
        "astId": 3434,
        "contract": "contracts/IndexAggreagtor.sol:IndexAggregator",
        "label": "totalSupplies",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 3437,
        "contract": "contracts/IndexAggreagtor.sol:IndexAggregator",
        "label": "liquidities",
        "offset": 0,
        "slot": "9",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 3440,
        "contract": "contracts/IndexAggreagtor.sol:IndexAggregator",
        "label": "tokenParamsTimestampUpdates",
        "offset": 0,
        "slot": "10",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 3445,
        "contract": "contracts/IndexAggreagtor.sol:IndexAggregator",
        "label": "movingAverage",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 3447,
        "contract": "contracts/IndexAggreagtor.sol:IndexAggregator",
        "label": "sampleSize",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 3449,
        "contract": "contracts/IndexAggreagtor.sol:IndexAggregator",
        "label": "timeWindow",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 3451,
        "contract": "contracts/IndexAggreagtor.sol:IndexAggregator",
        "label": "samplingFrequency",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 3453,
        "contract": "contracts/IndexAggreagtor.sol:IndexAggregator",
        "label": "lastSampleTime",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 3456,
        "contract": "contracts/IndexAggreagtor.sol:IndexAggregator",
        "label": "lastIndexOrder",
        "offset": 0,
        "slot": "16",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 3461,
        "contract": "contracts/IndexAggreagtor.sol:IndexAggregator",
        "label": "tagsIndexOrder",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_string_memory_ptr,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 3465,
        "contract": "contracts/IndexAggreagtor.sol:IndexAggregator",
        "label": "tagsIndexTimestamp",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_string_memory_ptr,t_uint256)"
      },
      {
        "astId": 3467,
        "contract": "contracts/IndexAggreagtor.sol:IndexAggregator",
        "label": "lastIndexTimestamp",
        "offset": 0,
        "slot": "19",
        "type": "t_uint256"
      },
      {
        "astId": 3469,
        "contract": "contracts/IndexAggreagtor.sol:IndexAggregator",
        "label": "bribeUnit",
        "offset": 0,
        "slot": "20",
        "type": "t_uint256"
      },
      {
        "astId": 3471,
        "contract": "contracts/IndexAggreagtor.sol:IndexAggregator",
        "label": "chainId",
        "offset": 0,
        "slot": "21",
        "type": "t_uint32"
      },
      {
        "astId": 3473,
        "contract": "contracts/IndexAggreagtor.sol:IndexAggregator",
        "label": "mainChainId",
        "offset": 4,
        "slot": "21",
        "type": "t_uint32"
      },
      {
        "astId": 3476,
        "contract": "contracts/IndexAggreagtor.sol:IndexAggregator",
        "label": "chainLinkData",
        "offset": 0,
        "slot": "22",
        "type": "t_struct(ChainLinkData)3345_storage"
      },
      {
        "astId": 3480,
        "contract": "contracts/IndexAggreagtor.sol:IndexAggregator",
        "label": "chainSelectorIdToSidechainAddress",
        "offset": 0,
        "slot": "25",
        "type": "t_mapping(t_uint64,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_string_storage)dyn_storage": {
        "base": "t_string_storage",
        "encoding": "dynamic_array",
        "label": "string[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(LiquidityMessage)3366_storage)dyn_storage": {
        "base": "t_struct(LiquidityMessage)3366_storage",
        "encoding": "dynamic_array",
        "label": "struct LiquidityMessage[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(SupplyMessage)3375_storage)dyn_storage": {
        "base": "t_struct(SupplyMessage)3375_storage",
        "encoding": "dynamic_array",
        "label": "struct SupplyMessage[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(TokenInfo)3357_storage)dyn_storage": {
        "base": "t_struct(TokenInfo)3357_storage",
        "encoding": "dynamic_array",
        "label": "struct TokenInfo[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(LiquidityManager)4755": {
        "encoding": "inplace",
        "label": "contract LiquidityManager",
        "numberOfBytes": "20"
      },
      "t_contract(TaggingVerifier)5033": {
        "encoding": "inplace",
        "label": "contract TaggingVerifier",
        "numberOfBytes": "20"
      },
      "t_mapping(t_string_memory_ptr,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_string_memory_ptr,t_uint256)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_uint64,t_address)": {
        "encoding": "mapping",
        "key": "t_uint64",
        "label": "mapping(uint64 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(ChainLinkData)3345_storage": {
        "encoding": "inplace",
        "label": "struct ChainLinkData",
        "members": [
          {
            "astId": 3338,
            "contract": "contracts/IndexAggreagtor.sol:IndexAggregator",
            "label": "router",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 3340,
            "contract": "contracts/IndexAggreagtor.sol:IndexAggregator",
            "label": "link",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 3342,
            "contract": "contracts/IndexAggreagtor.sol:IndexAggregator",
            "label": "currentChainSelectorId",
            "offset": 20,
            "slot": "1",
            "type": "t_uint64"
          },
          {
            "astId": 3344,
            "contract": "contracts/IndexAggreagtor.sol:IndexAggregator",
            "label": "keyHash",
            "offset": 0,
            "slot": "2",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(LiquidityMessage)3366_storage": {
        "encoding": "inplace",
        "label": "struct LiquidityMessage",
        "members": [
          {
            "astId": 3359,
            "contract": "contracts/IndexAggreagtor.sol:IndexAggregator",
            "label": "token",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 3361,
            "contract": "contracts/IndexAggreagtor.sol:IndexAggregator",
            "label": "liquidity",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 3363,
            "contract": "contracts/IndexAggreagtor.sol:IndexAggregator",
            "label": "chainId",
            "offset": 0,
            "slot": "2",
            "type": "t_uint32"
          },
          {
            "astId": 3365,
            "contract": "contracts/IndexAggreagtor.sol:IndexAggregator",
            "label": "timestamp",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(SupplyMessage)3375_storage": {
        "encoding": "inplace",
        "label": "struct SupplyMessage",
        "members": [
          {
            "astId": 3368,
            "contract": "contracts/IndexAggreagtor.sol:IndexAggregator",
            "label": "token",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 3370,
            "contract": "contracts/IndexAggreagtor.sol:IndexAggregator",
            "label": "supply",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 3372,
            "contract": "contracts/IndexAggreagtor.sol:IndexAggregator",
            "label": "chainId",
            "offset": 0,
            "slot": "2",
            "type": "t_uint32"
          },
          {
            "astId": 3374,
            "contract": "contracts/IndexAggreagtor.sol:IndexAggregator",
            "label": "timestamp",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(TokenInfo)3357_storage": {
        "encoding": "inplace",
        "label": "struct TokenInfo",
        "members": [
          {
            "astId": 3347,
            "contract": "contracts/IndexAggreagtor.sol:IndexAggregator",
            "label": "_symbol",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 3349,
            "contract": "contracts/IndexAggreagtor.sol:IndexAggregator",
            "label": "_address",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 3351,
            "contract": "contracts/IndexAggreagtor.sol:IndexAggregator",
            "label": "_chainId",
            "offset": 20,
            "slot": "1",
            "type": "t_uint32"
          },
          {
            "astId": 3353,
            "contract": "contracts/IndexAggreagtor.sol:IndexAggregator",
            "label": "_aggregator",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 3356,
            "contract": "contracts/IndexAggreagtor.sol:IndexAggregator",
            "label": "_tags",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_string_storage)dyn_storage"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}