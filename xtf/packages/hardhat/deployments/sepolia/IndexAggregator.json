{
  "address": "0xaD8a0139959d3012cD871AeDea7d764264E5f07E",
  "abi": [
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "_symbol",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "_address",
              "type": "address"
            },
            {
              "internalType": "uint32",
              "name": "_chainId",
              "type": "uint32"
            },
            {
              "internalType": "address",
              "name": "_aggregator",
              "type": "address"
            }
          ],
          "internalType": "struct TokenInfo[]",
          "name": "_tokenInfo",
          "type": "tuple[]"
        },
        {
          "internalType": "uint256",
          "name": "_timeWindow",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_sampleSize",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "bribeUnit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collectPriceFeeds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "lastIndexOrder",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastIndexTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "movingAverage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "indexOrders",
          "type": "uint256[]"
        }
      ],
      "name": "persistIndex",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokenInfo",
      "outputs": [
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "_chainId",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "_aggregator",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokenSymbols",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "tokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "totalSupplies",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x9401983b8c12d8f03d4d94dfec1f51a98e8ea9e0e5445e90d731cebfda6e055b",
  "receipt": {
    "to": null,
    "from": "0x2a1F5eB3e84e58e6F1e565306298B9dE1273f203",
    "contractAddress": "0xaD8a0139959d3012cD871AeDea7d764264E5f07E",
    "transactionIndex": 53,
    "gasUsed": "2386870",
    "logsBloom": "0x
    "blockHash": "0x73dcb76373ab182cb7c5ba5379e7db6c1844342e62d11bb8309c4d28d4a272fa",
    "transactionHash": "0x9401983b8c12d8f03d4d94dfec1f51a98e8ea9e0e5445e90d731cebfda6e055b",
    "logs": [],
    "blockNumber": 5964050,
    "cumulativeGasUsed": "12306489",
    "status": 1,
    "byzantium": true
  },
  "args": [
    [
      {
        "_symbol": "eth",
        "_address": "0x725fA785Da8BE83BB1E2d1D8bb63Bf7A585E5CA6",
        "_chainId": 11155111,
        "_aggregator": "0x5d9529A2cd36b1f78a2497b5B84b1a9C6acfDEf3"
      },
      {
        "_symbol": "sol",
        "_address": "0x205c56Fb2549BdfCf4D2091820AD83E8dB4fcc2f",
        "_chainId": 11155111,
        "_aggregator": "0x239067912Ea9E004C041ea5520458EAC7e322993"
      },
      {
        "_symbol": "near",
        "_address": "0x5d2a35cD83Cd066D876A004E2628A81c2462ed1C",
        "_chainId": 11155111,
        "_aggregator": "0x56789889E08a9ccc72427aFf7c12AA58f57Abe9E"
      },
      {
        "_symbol": "matic",
        "_address": "0x8A8c0CcF592e4E25D7A398AC46DfF92d4bc0B73a",
        "_chainId": 11155111,
        "_aggregator": "0x8eF3294Bf43d61850e7C7F21f8Af344cbE0394ff"
      },
      {
        "_symbol": "rndr",
        "_address": "0x2a24d9dD011fd98C3F723Beec05efa5bA86FD72F",
        "_chainId": 11155111,
        "_aggregator": "0xf210fCE8c152a4ECf711A2cB941a7567D9f774c8"
      },
      {
        "_symbol": "arb",
        "_address": "0x62200ed57b30a0b31002f0490c256a9DF4B6c103",
        "_chainId": 11155111,
        "_aggregator": "0xE2C05E6B83780b7CabEa3f575b0657cA4A03123D"
      },
      {
        "_symbol": "ftm",
        "_address": "0xC7FafB92aff7a2d4940CF2a85AAf035E789EB848",
        "_chainId": 11155111,
        "_aggregator": "0x6A14A2f19fC964B63d3204bF0dfA7991Dcbd3748"
      },
      {
        "_symbol": "ldo",
        "_address": "0x4Da05383E8ca58A711E734dd59fb21b550b7dBb3",
        "_chainId": 11155111,
        "_aggregator": "0x6dFcC49eaF1eb653e045ff87c57DB875A169b71A"
      },
      {
        "_symbol": "zbc",
        "_address": "0x3c7C4ab31b6aa9a88292254a568617133Be5A2AD",
        "_chainId": 11155111,
        "_aggregator": "0x1a877F36e8c8E4B87F91f01Bc84CFf2457F82F24"
      },
      {
        "_symbol": "strk",
        "_address": "0xC0eA2b88c6c510A5EbdafDE64366527d57C86f18",
        "_chainId": 11155111,
        "_aggregator": "0x269Dd5344EA5B1fc79D5eB146a771e32D994F02C"
      }
    ],
    60,
    5
  ],
  "numDeployments": 2,
  "solcInputHash": "f01c6f46beeef2ed1d553f7f030d159e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_chainId\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"_aggregator\",\"type\":\"address\"}],\"internalType\":\"struct TokenInfo[]\",\"name\":\"_tokenInfo\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"_timeWindow\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sampleSize\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"bribeUnit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectPriceFeeds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lastIndexOrder\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastIndexTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"movingAverage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"indexOrders\",\"type\":\"uint256[]\"}],\"name\":\"persistIndex\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenInfo\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_chainId\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"_aggregator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenSymbols\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"tokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"totalSupplies\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/IndexAggreagtor.sol\":\"IndexAggregator\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(\\n    uint80 _roundId\\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n}\\n\",\"keccak256\":\"0xfe4e8bb4861bb3860ba890ab91a3b818ec66e5a8f544fb608cfcb73f433472cd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"contracts/IndexAggreagtor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\nimport {AggregatorV3Interface} from \\\"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nstruct TokenInfo {\\n    string _symbol;\\n    address _address;\\n    uint32 _chainId;\\n    address _aggregator;\\n}\\n\\n\\ncontract IndexAggregator {\\n    TokenInfo[] public tokenInfo;\\n    mapping(string => uint256) public tokens;\\n    string[] public tokenSymbols;\\n    uint256[] public totalSupplies;\\n    mapping(uint256 => uint256[]) public movingAverage;\\n    uint256 sampleSize;\\n    uint256 timeWindow;\\n    uint256 samplingFrequency;\\n    uint256 lastSampleTime;\\n    uint256[] public lastIndexOrder; \\n    uint256 public lastIndexTimestamp;\\n    uint256 public bribeUnit;\\n\\n    constructor(TokenInfo[] memory _tokenInfo, uint256 _timeWindow, uint256 _sampleSize) {\\n        sampleSize = _sampleSize;\\n        timeWindow = _timeWindow;\\n        samplingFrequency = timeWindow / sampleSize;\\n        for (uint256 i = 0; i < _tokenInfo.length; i++) {\\n            tokenInfo.push(_tokenInfo[i]);\\n            tokenSymbols.push(_tokenInfo[i]._symbol);\\n            tokens[_tokenInfo[i]._symbol] = i;\\n            totalSupplies.push(IERC20(_tokenInfo[i]._address).totalSupply());\\n        }\\n    }\\n\\n    function collectPriceFeeds() external {\\n        require(block.timestamp - lastSampleTime >= samplingFrequency, \\\"IndexAggregator: Sampling frequency not reached\\\");\\n\\n        // if (block.timestamp - lastSampleTime >= timeWindow) {\\n        //     for (uint256 i = 0; i < tokenInfo.length; i++) {\\n        //         if (movingAverage[i].length > 0) {\\n        //             movingAverage[i].pop();\\n        //         }\\n        //     }\\n        // }\\n\\n        for (uint256 i = 0; i < tokenInfo.length; i++) {\\n            (, int256 answer, , , ) = AggregatorV3Interface(tokenInfo[i]._aggregator).latestRoundData();\\n\\n            movingAverage[i].push(uint256(answer));\\n            uint256 sum = 0;\\n            if (movingAverage[i].length > sampleSize) {\\n                movingAverage[i].pop();\\n            }\\n            for (uint256 j = 0; j < movingAverage[i].length; j++) {\\n                sum += movingAverage[i][j];\\n            }\\n        }\\n        lastSampleTime = block.timestamp;\\n        // if there is enough bribe pay it to the caller\\n        if (bribeUnit > 0) {\\n            payable(msg.sender).transfer(bribeUnit);\\n        }\\n    }\\n\\n    function persistIndex(uint256[] memory indexOrders) public returns (bool)\\n    {\\n        // indexOrders is an array index order [2,0,1] means 2nd token, 0th token, 1st token for price calculation\\n\\n        require(indexOrders.length == tokenInfo.length, \\\"IndexAggregator: Invalid length of indexOrders\\\");\\n\\n        uint256 token_a_value;\\n        uint256 token_b_value;\\n        for (uint256 i = 0; i < indexOrders.length - 1; i++) {\\n            token_a_value =  0;\\n            token_b_value = 0;\\n\\n            for (uint256 j = 0; j < movingAverage[indexOrders[i]].length; j++) {\\n                token_a_value += movingAverage[indexOrders[i]][j] * totalSupplies[indexOrders[i]];\\n                token_b_value += movingAverage[indexOrders[i + 1]][j] * totalSupplies[indexOrders[i + 1]];\\n            }\\n\\n\\n            require(token_a_value > 0, \\\"IndexAggregator: Token value is zero\\\");\\n            require(token_b_value > 0, \\\"IndexAggregator: Token value is zero\\\");\\n            require(token_a_value > token_b_value, \\\"IndexAggregator: order is not correct\\\");\\n        }\\n\\n        lastIndexOrder = indexOrders;\\n        lastIndexTimestamp = block.timestamp;\\n        return true;\\n    }\\n}\",\"keccak256\":\"0xddf6362a7f0f64df45571b3f4faf9eafd5bbf59a9f6ba86e758631de8e1a77c6\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620014763803806200147683398101604081905262000034916200044f565b600581905560068290556200004a8183620005c6565b60075560005b83518110156200028a5760008482815181106200007d57634e487b7160e01b600052603260045260246000fd5b602090810291909101810151825460018101845560009384529282902081518051929460030290910192620000b89284929091019062000294565b506020820151600182018054604085015163ffffffff16600160a01b026001600160c01b03199091166001600160a01b039384161717905560609092015160029182018054919093166001600160a01b0319919091161790915584518590839081106200013557634e487b7160e01b600052603260045260246000fd5b60209081029190910181015151825460018101845560009384529282902081516200016a949190910192919091019062000294565b508060018583815181106200018f57634e487b7160e01b600052603260045260246000fd5b602002602001015160000151604051620001aa91906200054a565b9081526020016040518091039020819055506003848281518110620001df57634e487b7160e01b600052603260045260246000fd5b6020026020010151602001516001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156200022457600080fd5b505afa15801562000239573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200025f919062000531565b8154600181018355600092835260209092209091015580620002818162000657565b91505062000050565b5050505062000695565b828054620002a2906200061a565b90600052602060002090601f016020900481019282620002c6576000855562000311565b82601f10620002e157805160ff191683800117855562000311565b8280016001018555821562000311579182015b8281111562000311578251825591602001919060010190620002f4565b506200031f92915062000323565b5090565b5b808211156200031f576000815560010162000324565b80516001600160a01b03811681146200035257600080fd5b919050565b60006080828403121562000369578081fd5b6200037362000568565b82519091506001600160401b03808211156200038e57600080fd5b818401915084601f830112620003a357600080fd5b8151602082821115620003ba57620003ba6200067f565b620003ce601f8301601f1916820162000593565b92508183528681838601011115620003e557600080fd5b620003f682828501838701620005e7565b828552620004068187016200033a565b81860152505050506200041c604083016200043a565b60408201526200042f606083016200033a565b606082015292915050565b805163ffffffff811681146200035257600080fd5b60008060006060848603121562000464578283fd5b83516001600160401b03808211156200047b578485fd5b818601915086601f8301126200048f578485fd5b8151602082821115620004a657620004a66200067f565b8160051b620004b782820162000593565b8381528281019086840183880185018d1015620004d2578a8bfd5b8a93505b858410156200051457805187811115620004ee578b8cfd5b620004fe8e87838c010162000357565b84525060019390930192918401918401620004d6565b50928a01516040909a0151929b999a509198975050505050505050565b60006020828403121562000543578081fd5b5051919050565b600082516200055e818460208701620005e7565b9190910192915050565b604051608081016001600160401b03811182821017156200058d576200058d6200067f565b60405290565b604051601f8201601f191681016001600160401b0381118282101715620005be57620005be6200067f565b604052919050565b600082620005e257634e487b7160e01b81526012600452602481fd5b500490565b60005b8381101562000604578181015183820152602001620005ea565b8381111562000614576000848401525b50505050565b600181811c908216806200062f57607f821691505b602082108114156200065157634e487b7160e01b600052602260045260246000fd5b50919050565b60006000198214156200067857634e487b7160e01b81526011600452602481fd5b5060010190565b634e487b7160e01b600052604160045260246000fd5b610dd180620006a56000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c8063cc33c87511610066578063cc33c8751461013a578063d440b4581461015d578063eaeca51114610166578063f156ebf514610170578063f23d9b571461017957600080fd5b806304c2320b146100a3578063193e795e146100e15780635dc55ac2146100f45780636e7ddea814610107578063b54fa47414610127575b600080fd5b6100ce6100b1366004610a9a565b805160208183018101805160018252928201919093012091525481565b6040519081526020015b60405180910390f35b6100ce6100ef366004610b27565b61019c565b6100ce610102366004610b3f565b6101bd565b61011a610115366004610b27565b6101ee565b6040516100d89190610bfa565b6100ce610135366004610b27565b61029a565b61014d610148366004610b27565b6102aa565b6040516100d89493929190610c14565b6100ce600b5481565b61016e610387565b005b6100ce600a5481565b61018c6101873660046109f2565b610609565b60405190151581526020016100d8565b600981815481106101ac57600080fd5b600091825260209091200154905081565b600460205281600052604060002081815481106101d957600080fd5b90600052602060002001600091509150505481565b600281815481106101fe57600080fd5b90600052602060002001600091509050805461021990610d19565b80601f016020809104026020016040519081016040528092919081815260200182805461024590610d19565b80156102925780601f1061026757610100808354040283529160200191610292565b820191906000526020600020905b81548152906001019060200180831161027557829003601f168201915b505050505081565b600381815481106101ac57600080fd5b600081815481106102ba57600080fd5b90600052602060002090600302016000915090508060000180546102dd90610d19565b80601f016020809104026020016040519081016040528092919081815260200182805461030990610d19565b80156103565780601f1061032b57610100808354040283529160200191610356565b820191906000526020600020905b81548152906001019060200180831161033957829003601f168201915b50505050600183015460029093015491926001600160a01b0380821693600160a01b90920463ffffffff1692501684565b6007546008546103979042610d02565b10156104025760405162461bcd60e51b815260206004820152602f60248201527f496e64657841676772656761746f723a2053616d706c696e672066726571756560448201526e1b98de481b9bdd081c995858da1959608a1b60648201526084015b60405180910390fd5b60005b6000548110156105ca57600080828154811061043157634e487b7160e01b600052603260045260246000fd5b906000526020600020906003020160020160009054906101000a90046001600160a01b03166001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561048e57600080fd5b505afa1580156104a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104c69190610b60565b5050506000848152600460209081526040822080546001810182558184529183209091018390556005548683529054929450909250101561054357600083815260046020526040902080548061052c57634e487b7160e01b600052603160045260246000fd5b600190038181906000526020600020016000905590555b60005b6000848152600460205260409020548110156105b457600084815260046020526040902080548290811061058a57634e487b7160e01b600052603260045260246000fd5b9060005260206000200154826105a09190610ccb565b9150806105ac81610d54565b915050610546565b50505080806105c290610d54565b915050610405565b5042600855600b541561060757600b54604051339180156108fc02916000818181858888f19350505050158015610605573d6000803e3d6000fd5b505b565b600080548251146106735760405162461bcd60e51b815260206004820152602e60248201527f496e64657841676772656761746f723a20496e76616c6964206c656e6774682060448201526d6f6620696e6465784f726465727360901b60648201526084016103f9565b60008060005b600185516106879190610d02565b81101561095057600092506000915060005b600460008784815181106106bd57634e487b7160e01b600052603260045260246000fd5b60200260200101518152602001908152602001600020805490508110156108a057600386838151811061070057634e487b7160e01b600052603260045260246000fd5b60200260200101518154811061072657634e487b7160e01b600052603260045260246000fd5b90600052602060002001546004600088858151811061075557634e487b7160e01b600052603260045260246000fd5b60200260200101518152602001908152602001600020828154811061078a57634e487b7160e01b600052603260045260246000fd5b906000526020600020015461079f9190610ce3565b6107a99085610ccb565b93506003866107b9846001610ccb565b815181106107d757634e487b7160e01b600052603260045260246000fd5b6020026020010151815481106107fd57634e487b7160e01b600052603260045260246000fd5b9060005260206000200154600460008885600161081a9190610ccb565b8151811061083857634e487b7160e01b600052603260045260246000fd5b60200260200101518152602001908152602001600020828154811061086d57634e487b7160e01b600052603260045260246000fd5b90600052602060002001546108829190610ce3565b61088c9084610ccb565b92508061089881610d54565b915050610699565b50600083116108c15760405162461bcd60e51b81526004016103f990610c56565b600082116108e15760405162461bcd60e51b81526004016103f990610c56565b81831161093e5760405162461bcd60e51b815260206004820152602560248201527f496e64657841676772656761746f723a206f72646572206973206e6f7420636f6044820152641c9c9958dd60da1b60648201526084016103f9565b8061094881610d54565b915050610679565b508351610964906009906020870190610973565b505042600a5550600192915050565b8280548282559060005260206000209081019282156109ae579160200282015b828111156109ae578251825591602001919060010190610993565b506109ba9291506109be565b5090565b5b808211156109ba57600081556001016109bf565b805169ffffffffffffffffffff811681146109ed57600080fd5b919050565b60006020808385031215610a04578182fd5b823567ffffffffffffffff80821115610a1b578384fd5b818501915085601f830112610a2e578384fd5b813581811115610a4057610a40610d85565b8060051b9150610a51848301610c9a565b8181528481019084860184860187018a1015610a6b578788fd5b8795505b83861015610a8d578035835260019590950194918601918601610a6f565b5098975050505050505050565b60006020808385031215610aac578182fd5b823567ffffffffffffffff80821115610ac3578384fd5b818501915085601f830112610ad6578384fd5b813581811115610ae857610ae8610d85565b610afa601f8201601f19168501610c9a565b91508082528684828501011115610b0f578485fd5b80848401858401378101909201929092529392505050565b600060208284031215610b38578081fd5b5035919050565b60008060408385031215610b51578081fd5b50508035926020909101359150565b600080600080600060a08688031215610b77578081fd5b610b80866109d3565b9450602086015193506040860151925060608601519150610ba3608087016109d3565b90509295509295909350565b60008151808452815b81811015610bd457602081850181015186830182015201610bb8565b81811115610be55782602083870101525b50601f01601f19169290920160200192915050565b602081526000610c0d6020830184610baf565b9392505050565b608081526000610c276080830187610baf565b6001600160a01b03958616602084015263ffffffff949094166040830152509216606090920191909152919050565b60208082526024908201527f496e64657841676772656761746f723a20546f6b656e2076616c7565206973206040820152637a65726f60e01b606082015260800190565b604051601f8201601f1916810167ffffffffffffffff81118282101715610cc357610cc3610d85565b604052919050565b60008219821115610cde57610cde610d6f565b500190565b6000816000190483118215151615610cfd57610cfd610d6f565b500290565b600082821015610d1457610d14610d6f565b500390565b600181811c90821680610d2d57607f821691505b60208210811415610d4e57634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415610d6857610d68610d6f565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fdfea26469706673582212204396f9fdaa7770ee207f628af23b1fa72abbd266e3c4dc9dbd25cc77941ba37164736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061009e5760003560e01c8063cc33c87511610066578063cc33c8751461013a578063d440b4581461015d578063eaeca51114610166578063f156ebf514610170578063f23d9b571461017957600080fd5b806304c2320b146100a3578063193e795e146100e15780635dc55ac2146100f45780636e7ddea814610107578063b54fa47414610127575b600080fd5b6100ce6100b1366004610a9a565b805160208183018101805160018252928201919093012091525481565b6040519081526020015b60405180910390f35b6100ce6100ef366004610b27565b61019c565b6100ce610102366004610b3f565b6101bd565b61011a610115366004610b27565b6101ee565b6040516100d89190610bfa565b6100ce610135366004610b27565b61029a565b61014d610148366004610b27565b6102aa565b6040516100d89493929190610c14565b6100ce600b5481565b61016e610387565b005b6100ce600a5481565b61018c6101873660046109f2565b610609565b60405190151581526020016100d8565b600981815481106101ac57600080fd5b600091825260209091200154905081565b600460205281600052604060002081815481106101d957600080fd5b90600052602060002001600091509150505481565b600281815481106101fe57600080fd5b90600052602060002001600091509050805461021990610d19565b80601f016020809104026020016040519081016040528092919081815260200182805461024590610d19565b80156102925780601f1061026757610100808354040283529160200191610292565b820191906000526020600020905b81548152906001019060200180831161027557829003601f168201915b505050505081565b600381815481106101ac57600080fd5b600081815481106102ba57600080fd5b90600052602060002090600302016000915090508060000180546102dd90610d19565b80601f016020809104026020016040519081016040528092919081815260200182805461030990610d19565b80156103565780601f1061032b57610100808354040283529160200191610356565b820191906000526020600020905b81548152906001019060200180831161033957829003601f168201915b50505050600183015460029093015491926001600160a01b0380821693600160a01b90920463ffffffff1692501684565b6007546008546103979042610d02565b10156104025760405162461bcd60e51b815260206004820152602f60248201527f496e64657841676772656761746f723a2053616d706c696e672066726571756560448201526e1b98de481b9bdd081c995858da1959608a1b60648201526084015b60405180910390fd5b60005b6000548110156105ca57600080828154811061043157634e487b7160e01b600052603260045260246000fd5b906000526020600020906003020160020160009054906101000a90046001600160a01b03166001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561048e57600080fd5b505afa1580156104a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104c69190610b60565b5050506000848152600460209081526040822080546001810182558184529183209091018390556005548683529054929450909250101561054357600083815260046020526040902080548061052c57634e487b7160e01b600052603160045260246000fd5b600190038181906000526020600020016000905590555b60005b6000848152600460205260409020548110156105b457600084815260046020526040902080548290811061058a57634e487b7160e01b600052603260045260246000fd5b9060005260206000200154826105a09190610ccb565b9150806105ac81610d54565b915050610546565b50505080806105c290610d54565b915050610405565b5042600855600b541561060757600b54604051339180156108fc02916000818181858888f19350505050158015610605573d6000803e3d6000fd5b505b565b600080548251146106735760405162461bcd60e51b815260206004820152602e60248201527f496e64657841676772656761746f723a20496e76616c6964206c656e6774682060448201526d6f6620696e6465784f726465727360901b60648201526084016103f9565b60008060005b600185516106879190610d02565b81101561095057600092506000915060005b600460008784815181106106bd57634e487b7160e01b600052603260045260246000fd5b60200260200101518152602001908152602001600020805490508110156108a057600386838151811061070057634e487b7160e01b600052603260045260246000fd5b60200260200101518154811061072657634e487b7160e01b600052603260045260246000fd5b90600052602060002001546004600088858151811061075557634e487b7160e01b600052603260045260246000fd5b60200260200101518152602001908152602001600020828154811061078a57634e487b7160e01b600052603260045260246000fd5b906000526020600020015461079f9190610ce3565b6107a99085610ccb565b93506003866107b9846001610ccb565b815181106107d757634e487b7160e01b600052603260045260246000fd5b6020026020010151815481106107fd57634e487b7160e01b600052603260045260246000fd5b9060005260206000200154600460008885600161081a9190610ccb565b8151811061083857634e487b7160e01b600052603260045260246000fd5b60200260200101518152602001908152602001600020828154811061086d57634e487b7160e01b600052603260045260246000fd5b90600052602060002001546108829190610ce3565b61088c9084610ccb565b92508061089881610d54565b915050610699565b50600083116108c15760405162461bcd60e51b81526004016103f990610c56565b600082116108e15760405162461bcd60e51b81526004016103f990610c56565b81831161093e5760405162461bcd60e51b815260206004820152602560248201527f496e64657841676772656761746f723a206f72646572206973206e6f7420636f6044820152641c9c9958dd60da1b60648201526084016103f9565b8061094881610d54565b915050610679565b508351610964906009906020870190610973565b505042600a5550600192915050565b8280548282559060005260206000209081019282156109ae579160200282015b828111156109ae578251825591602001919060010190610993565b506109ba9291506109be565b5090565b5b808211156109ba57600081556001016109bf565b805169ffffffffffffffffffff811681146109ed57600080fd5b919050565b60006020808385031215610a04578182fd5b823567ffffffffffffffff80821115610a1b578384fd5b818501915085601f830112610a2e578384fd5b813581811115610a4057610a40610d85565b8060051b9150610a51848301610c9a565b8181528481019084860184860187018a1015610a6b578788fd5b8795505b83861015610a8d578035835260019590950194918601918601610a6f565b5098975050505050505050565b60006020808385031215610aac578182fd5b823567ffffffffffffffff80821115610ac3578384fd5b818501915085601f830112610ad6578384fd5b813581811115610ae857610ae8610d85565b610afa601f8201601f19168501610c9a565b91508082528684828501011115610b0f578485fd5b80848401858401378101909201929092529392505050565b600060208284031215610b38578081fd5b5035919050565b60008060408385031215610b51578081fd5b50508035926020909101359150565b600080600080600060a08688031215610b77578081fd5b610b80866109d3565b9450602086015193506040860151925060608601519150610ba3608087016109d3565b90509295509295909350565b60008151808452815b81811015610bd457602081850181015186830182015201610bb8565b81811115610be55782602083870101525b50601f01601f19169290920160200192915050565b602081526000610c0d6020830184610baf565b9392505050565b608081526000610c276080830187610baf565b6001600160a01b03958616602084015263ffffffff949094166040830152509216606090920191909152919050565b60208082526024908201527f496e64657841676772656761746f723a20546f6b656e2076616c7565206973206040820152637a65726f60e01b606082015260800190565b604051601f8201601f1916810167ffffffffffffffff81118282101715610cc357610cc3610d85565b604052919050565b60008219821115610cde57610cde610d6f565b500190565b6000816000190483118215151615610cfd57610cfd610d6f565b500290565b600082821015610d1457610d14610d6f565b500390565b600181811c90821680610d2d57607f821691505b60208210811415610d4e57634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415610d6857610d68610d6f565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fdfea26469706673582212204396f9fdaa7770ee207f628af23b1fa72abbd266e3c4dc9dbd25cc77941ba37164736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 142,
        "contract": "contracts/IndexAggreagtor.sol:IndexAggregator",
        "label": "tokenInfo",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_struct(TokenInfo)138_storage)dyn_storage"
      },
      {
        "astId": 146,
        "contract": "contracts/IndexAggreagtor.sol:IndexAggregator",
        "label": "tokens",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_string_memory_ptr,t_uint256)"
      },
      {
        "astId": 149,
        "contract": "contracts/IndexAggreagtor.sol:IndexAggregator",
        "label": "tokenSymbols",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_string_storage)dyn_storage"
      },
      {
        "astId": 152,
        "contract": "contracts/IndexAggreagtor.sol:IndexAggregator",
        "label": "totalSupplies",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 157,
        "contract": "contracts/IndexAggreagtor.sol:IndexAggregator",
        "label": "movingAverage",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 159,
        "contract": "contracts/IndexAggreagtor.sol:IndexAggregator",
        "label": "sampleSize",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 161,
        "contract": "contracts/IndexAggreagtor.sol:IndexAggregator",
        "label": "timeWindow",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 163,
        "contract": "contracts/IndexAggreagtor.sol:IndexAggregator",
        "label": "samplingFrequency",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 165,
        "contract": "contracts/IndexAggreagtor.sol:IndexAggregator",
        "label": "lastSampleTime",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 168,
        "contract": "contracts/IndexAggreagtor.sol:IndexAggregator",
        "label": "lastIndexOrder",
        "offset": 0,
        "slot": "9",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 170,
        "contract": "contracts/IndexAggreagtor.sol:IndexAggregator",
        "label": "lastIndexTimestamp",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 172,
        "contract": "contracts/IndexAggreagtor.sol:IndexAggregator",
        "label": "bribeUnit",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_string_storage)dyn_storage": {
        "base": "t_string_storage",
        "encoding": "dynamic_array",
        "label": "string[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(TokenInfo)138_storage)dyn_storage": {
        "base": "t_struct(TokenInfo)138_storage",
        "encoding": "dynamic_array",
        "label": "struct TokenInfo[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_mapping(t_string_memory_ptr,t_uint256)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(TokenInfo)138_storage": {
        "encoding": "inplace",
        "label": "struct TokenInfo",
        "members": [
          {
            "astId": 131,
            "contract": "contracts/IndexAggreagtor.sol:IndexAggregator",
            "label": "_symbol",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 133,
            "contract": "contracts/IndexAggreagtor.sol:IndexAggregator",
            "label": "_address",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 135,
            "contract": "contracts/IndexAggreagtor.sol:IndexAggregator",
            "label": "_chainId",
            "offset": 20,
            "slot": "1",
            "type": "t_uint32"
          },
          {
            "astId": 137,
            "contract": "contracts/IndexAggreagtor.sol:IndexAggregator",
            "label": "_aggregator",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}