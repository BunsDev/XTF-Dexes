{
  "address": "0x2fe3607A273FFe2589193945CDC3952c7DDC2230",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract ISP",
          "name": "_spInstance",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "_schemaId",
          "type": "uint64"
        },
        {
          "internalType": "address[]",
          "name": "_trustedEntities",
          "type": "address[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "approveTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "approvedAddresses",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastAttestationId",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastAttestationTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "_name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "_symbol",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "_address",
              "type": "address"
            },
            {
              "internalType": "uint32",
              "name": "_chainId",
              "type": "uint32"
            }
          ],
          "internalType": "struct AttestationEntities.TokenInfo[]",
          "name": "tokens",
          "type": "tuple[]"
        }
      ],
      "name": "proposeTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "proposedTokens",
      "outputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "_chainId",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_weights",
          "type": "uint256[]"
        }
      ],
      "name": "publishListofTokens",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "schemaId",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_trustedEntities",
          "type": "address[]"
        }
      ],
      "name": "setTrustedEntities",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "signatures",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "spInstance",
      "outputs": [
        {
          "internalType": "contract ISP",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "trustedEntities",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "weights",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x6054040008f78ef95da3172d46f05d9004e777dcfc89867d31f3ce68add42fc7",
  "receipt": {
    "to": null,
    "from": "0x2a1F5eB3e84e58e6F1e565306298B9dE1273f203",
    "contractAddress": "0x2fe3607A273FFe2589193945CDC3952c7DDC2230",
    "transactionIndex": 47,
    "gasUsed": "1145792",
    "logsBloom": "0x
    "blockHash": "0x27e0f8baa4e5ac15a2cf7e77ce6b3fc619158a8cf936d18cfc6016bb9dccba8b",
    "transactionHash": "0x6054040008f78ef95da3172d46f05d9004e777dcfc89867d31f3ce68add42fc7",
    "logs": [],
    "blockNumber": 6019500,
    "cumulativeGasUsed": "13892435",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x878c92fd89d8e0b93dc0a3c907a2adc7577e39c5",
    "0x5f",
    [
      "0x2a1f5eb3e84e58e6f1e565306298b9de1273f203",
      "0x2a1f5eb3e84e58e6f1e565306298b9de1273f203"
    ]
  ],
  "numDeployments": 5,
  "solcInputHash": "aee75215f1c9aabe19251880df32e51d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract ISP\",\"name\":\"_spInstance\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"_schemaId\",\"type\":\"uint64\"},{\"internalType\":\"address[]\",\"name\":\"_trustedEntities\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"approveTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"approvedAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastAttestationId\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastAttestationTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_chainId\",\"type\":\"uint32\"}],\"internalType\":\"struct AttestationEntities.TokenInfo[]\",\"name\":\"tokens\",\"type\":\"tuple[]\"}],\"name\":\"proposeTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"proposedTokens\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_chainId\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_weights\",\"type\":\"uint256[]\"}],\"name\":\"publishListofTokens\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"schemaId\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_trustedEntities\",\"type\":\"address[]\"}],\"name\":\"setTrustedEntities\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"signatures\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"spInstance\",\"outputs\":[{\"internalType\":\"contract ISP\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"trustedEntities\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"weights\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/AttestationEntities.sol\":\"AttestationEntities\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@ethsign/sign-protocol-evm/src/interfaces/ISP.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport { IVersionable } from \\\"./IVersionable.sol\\\";\\nimport { Schema } from \\\"../models/Schema.sol\\\";\\nimport { Attestation, OffchainAttestation } from \\\"../models/Attestation.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @title Sign Protocol Interface\\n * @author Jack Xu @ EthSign\\n */\\ninterface ISP is IVersionable {\\n    event SchemaRegistered(uint64 schemaId);\\n    event AttestationMade(uint64 attestationId, string indexingKey);\\n    event AttestationRevoked(uint64 attestationId, string reason);\\n    event OffchainAttestationMade(string attestationId);\\n    event OffchainAttestationRevoked(string attestationId, string reason);\\n\\n    /**\\n     * @dev 0x9e87fac8\\n     */\\n    error Paused();\\n    /**\\n     * @dev 0x38f8c6c4\\n     */\\n    error SchemaNonexistent();\\n    /**\\n     * @dev 0x71984561\\n     */\\n    error SchemaWrongRegistrant();\\n    /**\\n     * @dev 0x8ac42f49\\n     */\\n    error AttestationIrrevocable();\\n    /**\\n     * @dev 0x54681a13\\n     */\\n    error AttestationNonexistent();\\n    /**\\n     * @dev 0xa65e02ed\\n     */\\n    error AttestationInvalidDuration();\\n    /**\\n     * @dev 0xd8c3da86\\n     */\\n    error AttestationAlreadyRevoked();\\n    /**\\n     * @dev 0xa9ad2007\\n     */\\n    error AttestationWrongAttester();\\n    /**\\n     * @dev 0xc83e3cdf\\n     */\\n    error OffchainAttestationExists();\\n    /**\\n     * @dev 0xa006519a\\n     */\\n    error OffchainAttestationNonexistent();\\n    /**\\n     * @dev 0xa0671d20\\n     */\\n    error OffchainAttestationAlreadyRevoked();\\n    /**\\n     * @dev 0xfdf4e6f9\\n     */\\n    error InvalidDelegateSignature();\\n    /**\\n     * @dev 0x5c34b9cc\\n     */\\n    error LegacySPRequired();\\n\\n    /**\\n     * @notice Registers a Schema.\\n     * @dev Emits `SchemaRegistered`.\\n     * @param schema See `Schema`.\\n     * @param delegateSignature An optional ECDSA delegateSignature if this is a delegated attestation. Use `\\\"\\\"` or `0x`\\n     * otherwise.\\n     * @return schemaId The assigned ID of the registered schema.\\n     */\\n    function register(Schema memory schema, bytes calldata delegateSignature) external returns (uint64 schemaId);\\n\\n    /**\\n     * @notice Makes an attestation.\\n     * @dev Emits `AttestationMade`.\\n     * @param attestation See `Attestation`.\\n     * @param indexingKey Used by the frontend to aid indexing.\\n     * @param delegateSignature An optional ECDSA delegateSignature if this is a delegated attestation. Use `\\\"\\\"` or `0x`\\n     * otherwise.\\n     * @param extraData This is forwarded to the resolver directly.\\n     * @return attestationId The assigned ID of the attestation.\\n     */\\n    function attest(\\n        Attestation calldata attestation,\\n        string calldata indexingKey,\\n        bytes calldata delegateSignature,\\n        bytes calldata extraData\\n    )\\n        external\\n        returns (uint64 attestationId);\\n\\n    /**\\n     * @notice Makes an attestation where the schema hook expects ETH payment.\\n     * @dev Emits `AttestationMade`.\\n     * @param attestation See `Attestation`.\\n     * @param resolverFeesETH Amount of funds to send to the hook.\\n     * @param indexingKey Used by the frontend to aid indexing.\\n     * @param delegateSignature An optional ECDSA delegateSignature if this is a delegated attestation. Use `\\\"\\\"` or `0x`\\n     * otherwise.\\n     * @param extraData This is forwarded to the resolver directly.\\n     * @return attestationId The assigned ID of the attestation.\\n     */\\n    function attest(\\n        Attestation calldata attestation,\\n        uint256 resolverFeesETH,\\n        string calldata indexingKey,\\n        bytes calldata delegateSignature,\\n        bytes calldata extraData\\n    )\\n        external\\n        payable\\n        returns (uint64 attestationId);\\n\\n    /**\\n     * @notice Makes an attestation where the schema hook expects ERC20 payment.\\n     * @dev Emits `AttestationMade`.\\n     * @param attestation See `Attestation`.\\n     * @param resolverFeesERC20Token ERC20 token address used for payment.\\n     * @param resolverFeesERC20Amount Amount of funds to send to the hook.\\n     * @param indexingKey Used by the frontend to aid indexing.\\n     * @param delegateSignature An optional ECDSA delegateSignature if this is a delegated attestation. Use `\\\"\\\"` or `0x`\\n     * otherwise.\\n     * @param extraData This is forwarded to the resolver directly.\\n     * @return attestationId The assigned ID of the attestation.\\n     */\\n    function attest(\\n        Attestation calldata attestation,\\n        IERC20 resolverFeesERC20Token,\\n        uint256 resolverFeesERC20Amount,\\n        string calldata indexingKey,\\n        bytes calldata delegateSignature,\\n        bytes calldata extraData\\n    )\\n        external\\n        returns (uint64 attestationId);\\n\\n    /**\\n     * @notice Timestamps an off-chain data ID.\\n     * @dev Emits `OffchainAttestationMade`.\\n     * @param offchainAttestationId The off-chain data ID.\\n     * @param delegateAttester An optional delegated attester that authorized the caller to attest on their behalf if\\n     * this is a delegated attestation. Use `address(0)` otherwise.\\n     * @param delegateSignature An optional ECDSA delegateSignature if this is a delegated attestation. Use `\\\"\\\"` or `0x`\\n     * otherwise. Use `\\\"\\\"` or `0x` otherwise.\\n     */\\n    function attestOffchain(\\n        string calldata offchainAttestationId,\\n        address delegateAttester,\\n        bytes calldata delegateSignature\\n    )\\n        external;\\n\\n    /**\\n     * @notice Revokes an existing revocable attestation.\\n     * @dev Emits `AttestationRevoked`. Must be called by the attester.\\n     * @param attestationId An existing attestation ID.\\n     * @param reason The revocation reason. This is only emitted as an event to save gas.\\n     * @param delegateSignature An optional ECDSA delegateSignature if this is a delegated revocation.\\n     * @param extraData This is forwarded to the resolver directly.\\n     */\\n    function revoke(\\n        uint64 attestationId,\\n        string calldata reason,\\n        bytes calldata delegateSignature,\\n        bytes calldata extraData\\n    )\\n        external;\\n\\n    /**\\n     * @notice Revokes an existing revocable attestation where the schema hook expects ERC20 payment.\\n     * @dev Emits `AttestationRevoked`. Must be called by the attester.\\n     * @param attestationId An existing attestation ID.\\n     * @param reason The revocation reason. This is only emitted as an event to save gas.\\n     * @param resolverFeesETH Amount of funds to send to the hook.\\n     * @param delegateSignature An optional ECDSA delegateSignature if this is a delegated revocation.\\n     * @param extraData This is forwarded to the resolver directly.\\n     */\\n    function revoke(\\n        uint64 attestationId,\\n        string calldata reason,\\n        uint256 resolverFeesETH,\\n        bytes calldata delegateSignature,\\n        bytes calldata extraData\\n    )\\n        external\\n        payable;\\n\\n    /**\\n     * @notice Revokes an existing revocable attestation where the schema hook expects ERC20 payment.\\n     * @dev Emits `AttestationRevoked`. Must be called by the attester.\\n     * @param attestationId An existing attestation ID.\\n     * @param reason The revocation reason. This is only emitted as an event to save gas.\\n     * @param resolverFeesERC20Token ERC20 token address used for payment.\\n     * @param resolverFeesERC20Amount Amount of funds to send to the hook.\\n     * @param delegateSignature An optional ECDSA delegateSignature if this is a delegated revocation.\\n     * @param extraData This is forwarded to the resolver directly.\\n     */\\n    function revoke(\\n        uint64 attestationId,\\n        string calldata reason,\\n        IERC20 resolverFeesERC20Token,\\n        uint256 resolverFeesERC20Amount,\\n        bytes calldata delegateSignature,\\n        bytes calldata extraData\\n    )\\n        external;\\n\\n    /**\\n     * @notice Revokes an existing offchain attestation.\\n     * @dev Emits `OffchainAttestationRevoked`. Must be called by the attester.\\n     * @param offchainAttestationId An existing attestation ID.\\n     * @param reason The revocation reason. This is only emitted as an event to save gas.\\n     * @param delegateSignature An optional ECDSA delegateSignature if this is a delegated revocation.\\n     */\\n    function revokeOffchain(\\n        string calldata offchainAttestationId,\\n        string calldata reason,\\n        bytes calldata delegateSignature\\n    )\\n        external;\\n\\n    /**\\n     * @notice Batch registers a Schema.\\n     */\\n    function registerBatch(\\n        Schema[] calldata schemas,\\n        bytes calldata delegateSignature\\n    )\\n        external\\n        returns (uint64[] calldata schemaIds);\\n\\n    /**\\n     * @notice Batch attests.\\n     */\\n    function attestBatch(\\n        Attestation[] calldata attestations,\\n        string[] calldata indexingKeys,\\n        bytes calldata delegateSignature,\\n        bytes calldata extraData\\n    )\\n        external\\n        returns (uint64[] calldata attestationIds);\\n\\n    /**\\n     * @notice Batch attests where the schema hook expects ETH payment.\\n     */\\n    function attestBatch(\\n        Attestation[] calldata attestations,\\n        uint256[] calldata resolverFeesETH,\\n        string[] calldata indexingKeys,\\n        bytes calldata delegateSignature,\\n        bytes calldata extraData\\n    )\\n        external\\n        payable\\n        returns (uint64[] calldata attestationIds);\\n\\n    /**\\n     * @notice Batch attests where the schema hook expects ERC20 payment.\\n     */\\n    function attestBatch(\\n        Attestation[] calldata attestations,\\n        IERC20[] calldata resolverFeesERC20Tokens,\\n        uint256[] calldata resolverFeesERC20Amount,\\n        string[] calldata indexingKeys,\\n        bytes calldata delegateSignature,\\n        bytes calldata extraData\\n    )\\n        external\\n        returns (uint64[] calldata attestationIds);\\n\\n    /**\\n     * @notice Batch timestamps off-chain data IDs.\\n     */\\n    function attestOffchainBatch(\\n        string[] calldata offchainAttestationIds,\\n        address delegateAttester,\\n        bytes calldata delegateSignature\\n    )\\n        external;\\n\\n    /**\\n     * @notice Batch revokes revocable on-chain attestations.\\n     */\\n    function revokeBatch(\\n        uint64[] calldata attestationIds,\\n        string[] calldata reasons,\\n        bytes calldata delegateSignature,\\n        bytes calldata extraData\\n    )\\n        external;\\n\\n    /**\\n     * @notice Batch revokes revocable on-chain attestations where the schema hook expects ETH payment.\\n     */\\n    function revokeBatch(\\n        uint64[] calldata attestationIds,\\n        string[] calldata reasons,\\n        uint256[] calldata resolverFeesETH,\\n        bytes calldata delegateSignature,\\n        bytes calldata extraData\\n    )\\n        external\\n        payable;\\n\\n    /**\\n     * @notice Batch revokes revocable on-chain attestations where the schema hook expects ERC20 payment.\\n     */\\n    function revokeBatch(\\n        uint64[] calldata attestationIds,\\n        string[] calldata reasons,\\n        IERC20[] calldata resolverFeesERC20Tokens,\\n        uint256[] calldata resolverFeesERC20Amount,\\n        bytes calldata delegateSignature,\\n        bytes calldata extraData\\n    )\\n        external;\\n\\n    /**\\n     * @notice Batch revokes off-chain attestations.\\n     */\\n    function revokeOffchainBatch(\\n        string[] calldata offchainAttestationIds,\\n        string[] calldata reasons,\\n        bytes calldata delegateSignature\\n    )\\n        external;\\n\\n    /**\\n     * @notice Returns the specified `Schema`.\\n     */\\n    function getSchema(uint64 schemaId) external view returns (Schema calldata);\\n\\n    /**\\n     * @notice Returns the specified `Attestation`.\\n     */\\n    function getAttestation(uint64 attestationId) external view returns (Attestation calldata);\\n\\n    /**\\n     * @notice Returns the specified `OffchainAttestation`.\\n     */\\n    function getOffchainAttestation(string calldata offchainAttestationId)\\n        external\\n        view\\n        returns (OffchainAttestation calldata);\\n\\n    /**\\n     * @notice Returns the hash that will be used to authorize a delegated registration.\\n     */\\n    function getDelegatedRegisterHash(Schema memory schema) external pure returns (bytes32);\\n\\n    /**\\n     * @notice Returns the hash that will be used to authorize a delegated batch registration.\\n     */\\n    function getDelegatedRegisterBatchHash(Schema[] memory schemas) external pure returns (bytes32);\\n\\n    /**\\n     * @notice Returns the hash that will be used to authorize a delegated attestation.\\n     */\\n    function getDelegatedAttestHash(Attestation calldata attestation) external pure returns (bytes32);\\n\\n    /**\\n     * @notice Returns the hash that will be used to authorize a delegated batch attestation.\\n     */\\n    function getDelegatedAttestBatchHash(Attestation[] calldata attestations) external pure returns (bytes32);\\n\\n    /**\\n     * @notice Returns the hash that will be used to authorize a delegated offchain attestation.\\n     */\\n    function getDelegatedOffchainAttestHash(string calldata offchainAttestationId) external pure returns (bytes32);\\n\\n    /**\\n     * @notice Returns the hash that will be used to authorize a delegated batch offchain attestation.\\n     */\\n    function getDelegatedOffchainAttestBatchHash(string[] calldata offchainAttestationIds)\\n        external\\n        pure\\n        returns (bytes32);\\n\\n    /**\\n     * @notice Returns the hash that will be used to authorize a delegated revocation.\\n     */\\n    function getDelegatedRevokeHash(uint64 attestationId, string memory reason) external pure returns (bytes32);\\n\\n    /**\\n     * @notice Returns the hash that will be used to authorize a delegated batch revocation.\\n     */\\n    function getDelegatedRevokeBatchHash(\\n        uint64[] memory attestationIds,\\n        string[] memory reasons\\n    )\\n        external\\n        pure\\n        returns (bytes32);\\n\\n    /**\\n     * @notice Returns the hash that will be used to authorize a delegated offchain revocation.\\n     */\\n    function getDelegatedOffchainRevokeHash(\\n        string memory offchainAttestationId,\\n        string memory reason\\n    )\\n        external\\n        pure\\n        returns (bytes32);\\n\\n    /**\\n     * @notice Returns the hash that will be used to authorize a delegated batch offchain revocation.\\n     */\\n    function getDelegatedOffchainRevokeBatchHash(\\n        string[] memory offchainAttestationIds,\\n        string[] memory reasons\\n    )\\n        external\\n        pure\\n        returns (bytes32);\\n\\n    /**\\n     * @notice Returns the current schema counter. This is incremented for each `Schema` registered.\\n     */\\n    function schemaCounter() external view returns (uint64);\\n\\n    /**\\n     * @notice Returns the current on-chain attestation counter. This is incremented for each `Attestation` made.\\n     */\\n    function attestationCounter() external view returns (uint64);\\n}\\n\",\"keccak256\":\"0xd5ddbb7cc6af2ee4c11d6c5dac739fc6254d84e13167bc054eb4477244490756\",\"license\":\"MIT\"},\"@ethsign/sign-protocol-evm/src/interfaces/ISPHook.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @title SIGN Attestation Protocol Resolver Interface\\n * @author Jack Xu @ EthSign\\n */\\ninterface ISPHook {\\n    function didReceiveAttestation(\\n        address attester,\\n        uint64 schemaId,\\n        uint64 attestationId,\\n        bytes calldata extraData\\n    )\\n        external\\n        payable;\\n\\n    function didReceiveAttestation(\\n        address attester,\\n        uint64 schemaId,\\n        uint64 attestationId,\\n        IERC20 resolverFeeERC20Token,\\n        uint256 resolverFeeERC20Amount,\\n        bytes calldata extraData\\n    )\\n        external;\\n\\n    function didReceiveRevocation(\\n        address attester,\\n        uint64 schemaId,\\n        uint64 attestationId,\\n        bytes calldata extraData\\n    )\\n        external\\n        payable;\\n\\n    function didReceiveRevocation(\\n        address attester,\\n        uint64 schemaId,\\n        uint64 attestationId,\\n        IERC20 resolverFeeERC20Token,\\n        uint256 resolverFeeERC20Amount,\\n        bytes calldata extraData\\n    )\\n        external;\\n}\\n\",\"keccak256\":\"0xa42159d34c4b8fa91507efacad81c14106f466efdc63b81a7d566dc0d2e736f4\",\"license\":\"MIT\"},\"@ethsign/sign-protocol-evm/src/interfaces/IVersionable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title IVersionable\\n * @author Jack Xu @ EthSign\\n * @dev This interface helps contracts to keep track of their versioning for upgrade compatibility checks.\\n */\\ninterface IVersionable {\\n    function version() external pure returns (string memory);\\n}\\n\",\"keccak256\":\"0xbcf1955aa8423f4f77a46a988a7cd41a46ae92af42aa4546cfebdc2a92916129\",\"license\":\"MIT\"},\"@ethsign/sign-protocol-evm/src/models/Attestation.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport { DataLocation } from \\\"./DataLocation.sol\\\";\\n\\n/**\\n * @title Attestation\\n * @author Jack Xu @ EthSign\\n * @notice This struct represents an on-chain attestation record. This record is not deleted after revocation.\\n *\\n * `schemaId`: The `Schema` that this Attestation is based on. It must exist.\\n * `linkedAttestationId`: Useful if the current Attestation references a previous Attestation. It can either be 0 or an\\n * existing attestation ID.\\n * `attestTimestamp`: When the attestation was made. This is automatically populated by `_attest(...)`.\\n * `revokeTimestamp`: When the attestation was revoked. This is automatically populated by `_revoke(...)`.\\n * `attester`: The attester. At this time, the attester must be the caller of `attest()`.\\n * `validUntil`: The expiration timestamp of the Attestation. Must respect `Schema.maxValidFor`. 0 indicates no\\n * expiration date.\\n * `dataLocation`: Where `Attestation.data` is stored. See `DataLocation.DataLocation`.\\n * `revoked`: If the Attestation has been revoked. It is possible to make a revoked Attestation.\\n * `recipients`: The intended ABI-encoded recipients of this Attestation. This is of type `bytes` to support non-EVM\\n * repicients.\\n * `data`: The raw data of the Attestation based on `Schema.schema`. There is no enforcement here, however. Recommended\\n * to use `abi.encode`.\\n */\\nstruct Attestation {\\n    uint64 schemaId;\\n    uint64 linkedAttestationId;\\n    uint64 attestTimestamp;\\n    uint64 revokeTimestamp;\\n    address attester;\\n    uint64 validUntil;\\n    DataLocation dataLocation;\\n    bool revoked;\\n    bytes[] recipients;\\n    bytes data;\\n}\\n\\n/**\\n * @title OffchainAttestation\\n * @author Jack Xu @ EthSign\\n * @notice This struct represents an off-chain attestation record. This record is not deleted after revocation.\\n *\\n * `attester`: The attester. At this time, the attester must be the caller of `attestOffchain()`.\\n * `timestamp`: The `block.timestamp` of the function call.\\n */\\nstruct OffchainAttestation {\\n    address attester;\\n    uint64 timestamp;\\n}\\n\",\"keccak256\":\"0x8e2a182141d06bfdcce1325d70e8dd307f7d6b3d7b6fafcedc2dbabeb99fa30f\",\"license\":\"MIT\"},\"@ethsign/sign-protocol-evm/src/models/DataLocation.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title DataLocation\\n * @author Jack Xu @ EthSign\\n * @notice This enum indicates where `Schema.data` and `Attestation.data` are stored.\\n */\\nenum DataLocation {\\n    ONCHAIN,\\n    ARWEAVE,\\n    IPFS,\\n    CUSTOM\\n}\\n\",\"keccak256\":\"0x14f64929317cae8ae822a0dd2c20315ac141f10fa255cd2b13a0a4962385ec10\",\"license\":\"MIT\"},\"@ethsign/sign-protocol-evm/src/models/Schema.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport { ISPHook } from \\\"../interfaces/ISPHook.sol\\\";\\nimport { DataLocation } from \\\"./DataLocation.sol\\\";\\n\\n/**\\n * @title Schema\\n * @author Jack Xu @ EthSign\\n * @notice This struct represents an on-chain Schema that Attestations can conform to.\\n *\\n * `registrant`: The address that registered this schema.\\n * `revocable`: Whether Attestations that adopt this Schema can be revoked.\\n * `dataLocation`: Where `Schema.data` is stored. See `DataLocation.DataLocation`.\\n * `maxValidFor`: The maximum number of seconds that an Attestation can remain valid. 0 means Attestations can be valid\\n * forever. This is enforced through `Attestation.validUntil`.\\n * `hook`: The `ISPHook` that is called at the end of every function. 0 means there is no hook set. See\\n * `ISPHook`.\\n * `timestamp`: When the schema was registered. This is automatically populated by `_register(...)`.\\n * `data`: The raw schema that `Attestation.data` should follow. Since there is no way to enforce this, it is a `string`\\n * for easy readability.\\n */\\nstruct Schema {\\n    address registrant;\\n    bool revocable;\\n    DataLocation dataLocation;\\n    uint64 maxValidFor;\\n    ISPHook hook;\\n    uint64 timestamp;\\n    string data;\\n}\\n\",\"keccak256\":\"0xcf3bd964790fdc7f72bacc86380b307e58bf15fa5f7332852d4969fe0db58216\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"contracts/AttestationEntities.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n\\nimport { ISP } from \\\"@ethsign/sign-protocol-evm/src/interfaces/ISP.sol\\\";\\nimport { Attestation } from \\\"@ethsign/sign-protocol-evm/src/models/Attestation.sol\\\";\\nimport { DataLocation } from \\\"@ethsign/sign-protocol-evm/src/models/DataLocation.sol\\\";\\n\\ncontract AttestationEntities {\\n    ISP public spInstance;\\n    uint64 public schemaId;\\n    uint64 public lastAttestationId;\\n    uint256 public lastAttestationTimestamp;\\n    address[] public trustedEntities;\\n    TokenInfo[] public proposedTokens;\\n    address[] public signatures;\\n    address[] public approvedAddresses;\\n    uint64[] public weights;\\n    \\n\\n    struct TokenInfo {\\n    string _name;\\n    string _symbol;\\n    address _address;\\n    uint32 _chainId;\\n    }\\n\\n    constructor(ISP _spInstance, uint64 _schemaId, address[] memory _trustedEntities) {\\n        spInstance = _spInstance;\\n        schemaId = _schemaId;\\n        trustedEntities = _trustedEntities;\\n    }\\n\\n    function setTrustedEntities(address[] memory _trustedEntities) public {\\n        trustedEntities = _trustedEntities;\\n    }\\n\\n    function proposeTokens(TokenInfo[] memory tokens) public {\\n        bool inTrustedEntities = false;\\n        for (uint i = 0; i < trustedEntities.length; i++) {\\n            if (msg.sender == trustedEntities[i]) {\\n                inTrustedEntities = true;\\n                break;\\n            }\\n        }\\n        require(inTrustedEntities, \\\"Only trusted entities can propose tokens\\\");\\n        // clear proposed tokens\\n        for (uint i = 0; i < proposedTokens.length; i++) {\\n            delete proposedTokens[i];\\n        }\\n\\n        for (uint i = 0; i < tokens.length; i++) {\\n            proposedTokens.push(tokens[i]);\\n        }\\n        signatures.push(msg.sender);\\n    }\\n\\n    function approveTokens() public {\\n        bool inTrustedEntities = false;\\n        bool hasAlreadyApproved = false;\\n        for (uint i = 0; i < trustedEntities.length; i++) {\\n            if (msg.sender == trustedEntities[i]) {\\n                inTrustedEntities = true;\\n                break;\\n            }\\n        }\\n\\n        require(inTrustedEntities, \\\"Only trusted entities can approve tokens\\\");\\n\\n        // for (uint i = 0; i < signatures.length; i++) {\\n        //     if (msg.sender == signatures[i]) {\\n        //         hasAlreadyApproved = true;\\n        //         break;\\n        //     }\\n        // }\\n\\n        // require(!hasAlreadyApproved, \\\"You have already approved the tokens\\\");\\n\\n        signatures.push(msg.sender);\\n    }\\n\\n\\n    function publishListofTokens(uint256[] memory _weights) public returns (uint64) {\\n        // require(signatures.length == trustedEntities.length, \\\"All trusted entities must approve tokens\\\");\\n        \\n        for (uint256 i = 0; i < proposedTokens.length; i++) {\\n            approvedAddresses.push(proposedTokens[i]._address);\\n        }\\n        \\n        Attestation memory attestation = Attestation({\\n            schemaId: schemaId,\\n            linkedAttestationId: 0,\\n            attestTimestamp: uint64(block.timestamp),\\n            revokeTimestamp: 0,\\n            attester: address(this),\\n            validUntil: 0,\\n            dataLocation: DataLocation.ONCHAIN,\\n            revoked: false,\\n            recipients: new bytes[](0),\\n            data: abi.encode(\\n                approvedAddresses,\\n                _weights\\n            )\\n        });\\n\\n        lastAttestationId =  spInstance.attest(attestation, \\\"\\\", \\\"\\\", \\\"\\\");\\n        lastAttestationTimestamp = block.timestamp;\\n        return lastAttestationId;\\n    }\\n}\\n\\n\\n\\n\\n\",\"keccak256\":\"0x13e053ff3eec6beec0fa147cf390908d22ebadb53d2f632262118e5a27e70a96\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040516200144b3803806200144b833981016040819052620000349162000143565b600080546001600160401b038416600160a01b026001600160e01b03199091166001600160a01b0386161717905580516200007790600390602084019062000081565b5050505062000247565b828054828255906000526020600020908101928215620000d9579160200282015b82811115620000d957825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190620000a2565b50620000e7929150620000eb565b5090565b5b80821115620000e75760008155600101620000ec565b6001600160a01b03811681146200011857600080fd5b50565b634e487b7160e01b600052604160045260246000fd5b80516200013e8162000102565b919050565b6000806000606084860312156200015957600080fd5b8351620001668162000102565b602085810151919450906001600160401b0380821682146200018757600080fd5b6040870151919450808211156200019d57600080fd5b818701915087601f830112620001b257600080fd5b815181811115620001c757620001c76200011b565b8060051b604051601f19603f83011681018181108582111715620001ef57620001ef6200011b565b60405291825284820192508381018501918a8311156200020e57600080fd5b938501935b828510156200023757620002278562000131565b8452938501939285019262000213565b8096505050505050509250925092565b6111f480620002576000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c80638be101941161008c578063b5f163ff11610066578063b5f163ff146101bd578063bef99f52146101d0578063c395a474146101e7578063fd68f2231461020a57600080fd5b80638be101941461018457806395bf190e14610197578063a8c5dc33146101aa57600080fd5b8063024a0751146100d457806303191696146100e9578063075b1a0914610119578063238023561461013357806355b124aa1461014657806379741e1014610171575b600080fd5b6100e76100e2366004610ad2565b610212565b005b6001546100fc906001600160401b031681565b6040516001600160401b0390911681526020015b60405180910390f35b6000546100fc90600160a01b90046001600160401b031681565b6100e7610141366004610c15565b61043a565b610159610154366004610cac565b610451565b6040516001600160a01b039091168152602001610110565b6100fc61017f366004610cc5565b61047b565b610159610192366004610cac565b610641565b6101596101a5366004610cac565b610651565b600054610159906001600160a01b031681565b6100fc6101cb366004610cac565b610661565b6101d960025481565b604051908152602001610110565b6101fa6101f5366004610cac565b61069e565b6040516101109493929190610d90565b6100e7610801565b6000805b600354811015610269576003818154811061023357610233610ddd565b6000918252602090912001546001600160a01b031633036102575760019150610269565b8061026181610df3565b915050610216565b50806102cd5760405162461bcd60e51b815260206004820152602860248201527f4f6e6c79207472757374656420656e7469746965732063616e2070726f706f736044820152676520746f6b656e7360c01b60648201526084015b60405180910390fd5b60005b60045481101561033957600481815481106102ed576102ed610ddd565b6000918252602082206003909102019061030782826108ff565b6103156001830160006108ff565b5060020180546001600160c01b03191690558061033181610df3565b9150506102d0565b5060005b82518110156103f357600483828151811061035a5761035a610ddd565b6020908102919091018101518254600181018455600093845291909220825160039092020190819061038c9082610ea3565b50602082015160018201906103a19082610ea3565b5060408201516002909101805460609093015163ffffffff16600160a01b026001600160c01b03199093166001600160a01b0390921691909117919091179055806103eb81610df3565b91505061033d565b5050600580546001810182556000919091527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db00180546001600160a01b0319163317905550565b805161044d90600390602084019061093c565b5050565b6003818154811061046157600080fd5b6000918252602090912001546001600160a01b0316905081565b6000805b6004548110156104f45760066004828154811061049e5761049e610ddd565b60009182526020808320600260039093020191909101548354600181018555938352912090910180546001600160a01b0319166001600160a01b03909216919091179055806104ec81610df3565b91505061047f565b50604080516101408101825260008054600160a01b90046001600160401b039081168352602080840183905242909116838501526060830182905230608084015260a0830182905260c0830182905260e0830182905283518281529081019093529161010082019083610577565b60608152602001906001900390816105625790505b508152602001600685604051602001610591929190610f62565b60408051601f198184030181529181529152600054905163b82916cb60e01b81529192506001600160a01b03169063b82916cb906105d390849060040161105b565b6020604051808303816000875af11580156105f2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610616919061118e565b6001805467ffffffffffffffff19166001600160401b03929092169182179055426002559392505050565b6005818154811061046157600080fd5b6006818154811061046157600080fd5b6007818154811061067157600080fd5b9060005260206000209060049182820401919006600802915054906101000a90046001600160401b031681565b600481815481106106ae57600080fd5b90600052602060002090600302016000915090508060000180546106d190610e1a565b80601f01602080910402602001604051908101604052809291908181526020018280546106fd90610e1a565b801561074a5780601f1061071f5761010080835404028352916020019161074a565b820191906000526020600020905b81548152906001019060200180831161072d57829003601f168201915b50505050509080600101805461075f90610e1a565b80601f016020809104026020016040519081016040528092919081815260200182805461078b90610e1a565b80156107d85780601f106107ad576101008083540402835291602001916107d8565b820191906000526020600020905b8154815290600101906020018083116107bb57829003601f168201915b505050600290930154919250506001600160a01b0381169063ffffffff600160a01b9091041684565b60008060005b60035481101561085a576003818154811061082457610824610ddd565b6000918252602090912001546001600160a01b03163303610848576001925061085a565b8061085281610df3565b915050610807565b50816108b95760405162461bcd60e51b815260206004820152602860248201527f4f6e6c79207472757374656420656e7469746965732063616e20617070726f766044820152676520746f6b656e7360c01b60648201526084016102c4565b5050600580546001810182556000919091527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db00180546001600160a01b03191633179055565b50805461090b90610e1a565b6000825580601f1061091b575050565b601f01602090049060005260206000209081019061093991906109a1565b50565b828054828255906000526020600020908101928215610991579160200282015b8281111561099157825182546001600160a01b0319166001600160a01b0390911617825560209092019160019091019061095c565b5061099d9291506109a1565b5090565b5b8082111561099d57600081556001016109a2565b634e487b7160e01b600052604160045260246000fd5b604051608081016001600160401b03811182821017156109ee576109ee6109b6565b60405290565b604051601f8201601f191681016001600160401b0381118282101715610a1c57610a1c6109b6565b604052919050565b60006001600160401b03821115610a3d57610a3d6109b6565b5060051b60200190565b600082601f830112610a5857600080fd5b81356001600160401b03811115610a7157610a716109b6565b610a84601f8201601f19166020016109f4565b818152846020838601011115610a9957600080fd5b816020850160208301376000918101602001919091529392505050565b80356001600160a01b0381168114610acd57600080fd5b919050565b60006020808385031215610ae557600080fd5b82356001600160401b0380821115610afc57600080fd5b818501915085601f830112610b1057600080fd5b8135610b23610b1e82610a24565b6109f4565b81815260059190911b83018401908481019088831115610b4257600080fd5b8585015b83811015610c0857803585811115610b5e5760008081fd5b86016080818c03601f1901811315610b765760008081fd5b610b7e6109cc565b8983013588811115610b905760008081fd5b610b9e8e8c83870101610a47565b82525060408084013589811115610bb55760008081fd5b610bc38f8d83880101610a47565b8c840152506060610bd5818601610ab6565b83830152938301359363ffffffff85168514610bf357600093508384fd5b82019390935285525050918601918601610b46565b5098975050505050505050565b60006020808385031215610c2857600080fd5b82356001600160401b03811115610c3e57600080fd5b8301601f81018513610c4f57600080fd5b8035610c5d610b1e82610a24565b81815260059190911b82018301908381019087831115610c7c57600080fd5b928401925b82841015610ca157610c9284610ab6565b82529284019290840190610c81565b979650505050505050565b600060208284031215610cbe57600080fd5b5035919050565b60006020808385031215610cd857600080fd5b82356001600160401b03811115610cee57600080fd5b8301601f81018513610cff57600080fd5b8035610d0d610b1e82610a24565b81815260059190911b82018301908381019087831115610d2c57600080fd5b928401925b82841015610ca157833582529284019290840190610d31565b6000815180845260005b81811015610d7057602081850181015186830182015201610d54565b506000602082860101526020601f19601f83011685010191505092915050565b608081526000610da36080830187610d4a565b8281036020840152610db58187610d4a565b6001600160a01b03959095166040840152505063ffffffff9190911660609091015292915050565b634e487b7160e01b600052603260045260246000fd5b600060018201610e1357634e487b7160e01b600052601160045260246000fd5b5060010190565b600181811c90821680610e2e57607f821691505b602082108103610e4e57634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115610e9e57600081815260208120601f850160051c81016020861015610e7b5750805b601f850160051c820191505b81811015610e9a57828155600101610e87565b5050505b505050565b81516001600160401b03811115610ebc57610ebc6109b6565b610ed081610eca8454610e1a565b84610e54565b602080601f831160018114610f055760008415610eed5750858301515b600019600386901b1c1916600185901b178555610e9a565b600085815260208120601f198616915b82811015610f3457888601518255948401946001909101908401610f15565b5085821015610f525787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6000604082016040835280855480835260608501915086600052602092508260002060005b82811015610fac5781546001600160a01b031684529284019260019182019101610f87565b5050508381038285015284518082528583019183019060005b81811015610fe157835183529284019291840191600101610fc5565b5090979650505050505050565b6004811061100c57634e487b7160e01b600052602160045260246000fd5b9052565b600082825180855260208086019550808260051b84010181860160005b84811015610fe157601f19868403018952611049838351610d4a565b9884019892509083019060010161102d565b608081526110756080820183516001600160401b03169052565b6000602083015161109160a08401826001600160401b03169052565b5060408301516001600160401b0390811660c084015260608401511660e083015260808301516001600160a01b0381166101008085019190915260a085015191506101206110e9818601846001600160401b03169052565b60c086015192506101406110ff81870185610fee565b60e087015115156101608701528287015161018087019190915292506111296101c0860184611010565b90860151858203607f19016101a087015290925090506111498282610d4a565b9150508281036020840152611162816000815260200190565b838103604085015260008152905060208101838103606085015260008152905060208101949350505050565b6000602082840312156111a057600080fd5b81516001600160401b03811681146111b757600080fd5b939250505056fea2646970667358221220a48a65fbfe0b3cd3b7a793bc6d4ba9677c70e552ac2e5cb55203e7883b952bab64736f6c63430008140033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100cf5760003560e01c80638be101941161008c578063b5f163ff11610066578063b5f163ff146101bd578063bef99f52146101d0578063c395a474146101e7578063fd68f2231461020a57600080fd5b80638be101941461018457806395bf190e14610197578063a8c5dc33146101aa57600080fd5b8063024a0751146100d457806303191696146100e9578063075b1a0914610119578063238023561461013357806355b124aa1461014657806379741e1014610171575b600080fd5b6100e76100e2366004610ad2565b610212565b005b6001546100fc906001600160401b031681565b6040516001600160401b0390911681526020015b60405180910390f35b6000546100fc90600160a01b90046001600160401b031681565b6100e7610141366004610c15565b61043a565b610159610154366004610cac565b610451565b6040516001600160a01b039091168152602001610110565b6100fc61017f366004610cc5565b61047b565b610159610192366004610cac565b610641565b6101596101a5366004610cac565b610651565b600054610159906001600160a01b031681565b6100fc6101cb366004610cac565b610661565b6101d960025481565b604051908152602001610110565b6101fa6101f5366004610cac565b61069e565b6040516101109493929190610d90565b6100e7610801565b6000805b600354811015610269576003818154811061023357610233610ddd565b6000918252602090912001546001600160a01b031633036102575760019150610269565b8061026181610df3565b915050610216565b50806102cd5760405162461bcd60e51b815260206004820152602860248201527f4f6e6c79207472757374656420656e7469746965732063616e2070726f706f736044820152676520746f6b656e7360c01b60648201526084015b60405180910390fd5b60005b60045481101561033957600481815481106102ed576102ed610ddd565b6000918252602082206003909102019061030782826108ff565b6103156001830160006108ff565b5060020180546001600160c01b03191690558061033181610df3565b9150506102d0565b5060005b82518110156103f357600483828151811061035a5761035a610ddd565b6020908102919091018101518254600181018455600093845291909220825160039092020190819061038c9082610ea3565b50602082015160018201906103a19082610ea3565b5060408201516002909101805460609093015163ffffffff16600160a01b026001600160c01b03199093166001600160a01b0390921691909117919091179055806103eb81610df3565b91505061033d565b5050600580546001810182556000919091527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db00180546001600160a01b0319163317905550565b805161044d90600390602084019061093c565b5050565b6003818154811061046157600080fd5b6000918252602090912001546001600160a01b0316905081565b6000805b6004548110156104f45760066004828154811061049e5761049e610ddd565b60009182526020808320600260039093020191909101548354600181018555938352912090910180546001600160a01b0319166001600160a01b03909216919091179055806104ec81610df3565b91505061047f565b50604080516101408101825260008054600160a01b90046001600160401b039081168352602080840183905242909116838501526060830182905230608084015260a0830182905260c0830182905260e0830182905283518281529081019093529161010082019083610577565b60608152602001906001900390816105625790505b508152602001600685604051602001610591929190610f62565b60408051601f198184030181529181529152600054905163b82916cb60e01b81529192506001600160a01b03169063b82916cb906105d390849060040161105b565b6020604051808303816000875af11580156105f2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610616919061118e565b6001805467ffffffffffffffff19166001600160401b03929092169182179055426002559392505050565b6005818154811061046157600080fd5b6006818154811061046157600080fd5b6007818154811061067157600080fd5b9060005260206000209060049182820401919006600802915054906101000a90046001600160401b031681565b600481815481106106ae57600080fd5b90600052602060002090600302016000915090508060000180546106d190610e1a565b80601f01602080910402602001604051908101604052809291908181526020018280546106fd90610e1a565b801561074a5780601f1061071f5761010080835404028352916020019161074a565b820191906000526020600020905b81548152906001019060200180831161072d57829003601f168201915b50505050509080600101805461075f90610e1a565b80601f016020809104026020016040519081016040528092919081815260200182805461078b90610e1a565b80156107d85780601f106107ad576101008083540402835291602001916107d8565b820191906000526020600020905b8154815290600101906020018083116107bb57829003601f168201915b505050600290930154919250506001600160a01b0381169063ffffffff600160a01b9091041684565b60008060005b60035481101561085a576003818154811061082457610824610ddd565b6000918252602090912001546001600160a01b03163303610848576001925061085a565b8061085281610df3565b915050610807565b50816108b95760405162461bcd60e51b815260206004820152602860248201527f4f6e6c79207472757374656420656e7469746965732063616e20617070726f766044820152676520746f6b656e7360c01b60648201526084016102c4565b5050600580546001810182556000919091527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db00180546001600160a01b03191633179055565b50805461090b90610e1a565b6000825580601f1061091b575050565b601f01602090049060005260206000209081019061093991906109a1565b50565b828054828255906000526020600020908101928215610991579160200282015b8281111561099157825182546001600160a01b0319166001600160a01b0390911617825560209092019160019091019061095c565b5061099d9291506109a1565b5090565b5b8082111561099d57600081556001016109a2565b634e487b7160e01b600052604160045260246000fd5b604051608081016001600160401b03811182821017156109ee576109ee6109b6565b60405290565b604051601f8201601f191681016001600160401b0381118282101715610a1c57610a1c6109b6565b604052919050565b60006001600160401b03821115610a3d57610a3d6109b6565b5060051b60200190565b600082601f830112610a5857600080fd5b81356001600160401b03811115610a7157610a716109b6565b610a84601f8201601f19166020016109f4565b818152846020838601011115610a9957600080fd5b816020850160208301376000918101602001919091529392505050565b80356001600160a01b0381168114610acd57600080fd5b919050565b60006020808385031215610ae557600080fd5b82356001600160401b0380821115610afc57600080fd5b818501915085601f830112610b1057600080fd5b8135610b23610b1e82610a24565b6109f4565b81815260059190911b83018401908481019088831115610b4257600080fd5b8585015b83811015610c0857803585811115610b5e5760008081fd5b86016080818c03601f1901811315610b765760008081fd5b610b7e6109cc565b8983013588811115610b905760008081fd5b610b9e8e8c83870101610a47565b82525060408084013589811115610bb55760008081fd5b610bc38f8d83880101610a47565b8c840152506060610bd5818601610ab6565b83830152938301359363ffffffff85168514610bf357600093508384fd5b82019390935285525050918601918601610b46565b5098975050505050505050565b60006020808385031215610c2857600080fd5b82356001600160401b03811115610c3e57600080fd5b8301601f81018513610c4f57600080fd5b8035610c5d610b1e82610a24565b81815260059190911b82018301908381019087831115610c7c57600080fd5b928401925b82841015610ca157610c9284610ab6565b82529284019290840190610c81565b979650505050505050565b600060208284031215610cbe57600080fd5b5035919050565b60006020808385031215610cd857600080fd5b82356001600160401b03811115610cee57600080fd5b8301601f81018513610cff57600080fd5b8035610d0d610b1e82610a24565b81815260059190911b82018301908381019087831115610d2c57600080fd5b928401925b82841015610ca157833582529284019290840190610d31565b6000815180845260005b81811015610d7057602081850181015186830182015201610d54565b506000602082860101526020601f19601f83011685010191505092915050565b608081526000610da36080830187610d4a565b8281036020840152610db58187610d4a565b6001600160a01b03959095166040840152505063ffffffff9190911660609091015292915050565b634e487b7160e01b600052603260045260246000fd5b600060018201610e1357634e487b7160e01b600052601160045260246000fd5b5060010190565b600181811c90821680610e2e57607f821691505b602082108103610e4e57634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115610e9e57600081815260208120601f850160051c81016020861015610e7b5750805b601f850160051c820191505b81811015610e9a57828155600101610e87565b5050505b505050565b81516001600160401b03811115610ebc57610ebc6109b6565b610ed081610eca8454610e1a565b84610e54565b602080601f831160018114610f055760008415610eed5750858301515b600019600386901b1c1916600185901b178555610e9a565b600085815260208120601f198616915b82811015610f3457888601518255948401946001909101908401610f15565b5085821015610f525787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6000604082016040835280855480835260608501915086600052602092508260002060005b82811015610fac5781546001600160a01b031684529284019260019182019101610f87565b5050508381038285015284518082528583019183019060005b81811015610fe157835183529284019291840191600101610fc5565b5090979650505050505050565b6004811061100c57634e487b7160e01b600052602160045260246000fd5b9052565b600082825180855260208086019550808260051b84010181860160005b84811015610fe157601f19868403018952611049838351610d4a565b9884019892509083019060010161102d565b608081526110756080820183516001600160401b03169052565b6000602083015161109160a08401826001600160401b03169052565b5060408301516001600160401b0390811660c084015260608401511660e083015260808301516001600160a01b0381166101008085019190915260a085015191506101206110e9818601846001600160401b03169052565b60c086015192506101406110ff81870185610fee565b60e087015115156101608701528287015161018087019190915292506111296101c0860184611010565b90860151858203607f19016101a087015290925090506111498282610d4a565b9150508281036020840152611162816000815260200190565b838103604085015260008152905060208101838103606085015260008152905060208101949350505050565b6000602082840312156111a057600080fd5b81516001600160401b03811681146111b757600080fd5b939250505056fea2646970667358221220a48a65fbfe0b3cd3b7a793bc6d4ba9677c70e552ac2e5cb55203e7883b952bab64736f6c63430008140033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 719,
        "contract": "contracts/AttestationEntities.sol:AttestationEntities",
        "label": "spInstance",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(ISP)495"
      },
      {
        "astId": 721,
        "contract": "contracts/AttestationEntities.sol:AttestationEntities",
        "label": "schemaId",
        "offset": 20,
        "slot": "0",
        "type": "t_uint64"
      },
      {
        "astId": 723,
        "contract": "contracts/AttestationEntities.sol:AttestationEntities",
        "label": "lastAttestationId",
        "offset": 0,
        "slot": "1",
        "type": "t_uint64"
      },
      {
        "astId": 725,
        "contract": "contracts/AttestationEntities.sol:AttestationEntities",
        "label": "lastAttestationTimestamp",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 728,
        "contract": "contracts/AttestationEntities.sol:AttestationEntities",
        "label": "trustedEntities",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 732,
        "contract": "contracts/AttestationEntities.sol:AttestationEntities",
        "label": "proposedTokens",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_struct(TokenInfo)750_storage)dyn_storage"
      },
      {
        "astId": 735,
        "contract": "contracts/AttestationEntities.sol:AttestationEntities",
        "label": "signatures",
        "offset": 0,
        "slot": "5",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 738,
        "contract": "contracts/AttestationEntities.sol:AttestationEntities",
        "label": "approvedAddresses",
        "offset": 0,
        "slot": "6",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 741,
        "contract": "contracts/AttestationEntities.sol:AttestationEntities",
        "label": "weights",
        "offset": 0,
        "slot": "7",
        "type": "t_array(t_uint64)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(TokenInfo)750_storage)dyn_storage": {
        "base": "t_struct(TokenInfo)750_storage",
        "encoding": "dynamic_array",
        "label": "struct AttestationEntities.TokenInfo[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint64)dyn_storage": {
        "base": "t_uint64",
        "encoding": "dynamic_array",
        "label": "uint64[]",
        "numberOfBytes": "32"
      },
      "t_contract(ISP)495": {
        "encoding": "inplace",
        "label": "contract ISP",
        "numberOfBytes": "20"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(TokenInfo)750_storage": {
        "encoding": "inplace",
        "label": "struct AttestationEntities.TokenInfo",
        "members": [
          {
            "astId": 743,
            "contract": "contracts/AttestationEntities.sol:AttestationEntities",
            "label": "_name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 745,
            "contract": "contracts/AttestationEntities.sol:AttestationEntities",
            "label": "_symbol",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 747,
            "contract": "contracts/AttestationEntities.sol:AttestationEntities",
            "label": "_address",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 749,
            "contract": "contracts/AttestationEntities.sol:AttestationEntities",
            "label": "_chainId",
            "offset": 20,
            "slot": "2",
            "type": "t_uint32"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}