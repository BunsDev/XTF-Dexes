{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts-ccip/src/v0.8/ccip/applications/CCIPReceiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {IAny2EVMMessageReceiver} from \"../interfaces/IAny2EVMMessageReceiver.sol\";\n\nimport {Client} from \"../libraries/Client.sol\";\n\nimport {IERC165} from \"../../vendor/openzeppelin-solidity/v4.8.3/contracts/utils/introspection/IERC165.sol\";\n\n/// @title CCIPReceiver - Base contract for CCIP applications that can receive messages.\nabstract contract CCIPReceiver is IAny2EVMMessageReceiver, IERC165 {\n  address internal immutable i_ccipRouter;\n\n  constructor(address router) {\n    if (router == address(0)) revert InvalidRouter(address(0));\n    i_ccipRouter = router;\n  }\n\n  /// @notice IERC165 supports an interfaceId\n  /// @param interfaceId The interfaceId to check\n  /// @return true if the interfaceId is supported\n  /// @dev Should indicate whether the contract implements IAny2EVMMessageReceiver\n  /// e.g. return interfaceId == type(IAny2EVMMessageReceiver).interfaceId || interfaceId == type(IERC165).interfaceId\n  /// This allows CCIP to check if ccipReceive is available before calling it.\n  /// If this returns false or reverts, only tokens are transferred to the receiver.\n  /// If this returns true, tokens are transferred and ccipReceive is called atomically.\n  /// Additionally, if the receiver address does not have code associated with\n  /// it at the time of execution (EXTCODESIZE returns 0), only tokens will be transferred.\n  function supportsInterface(bytes4 interfaceId) public pure virtual override returns (bool) {\n    return interfaceId == type(IAny2EVMMessageReceiver).interfaceId || interfaceId == type(IERC165).interfaceId;\n  }\n\n  /// @inheritdoc IAny2EVMMessageReceiver\n  function ccipReceive(Client.Any2EVMMessage calldata message) external virtual override onlyRouter {\n    _ccipReceive(message);\n  }\n\n  /// @notice Override this function in your implementation.\n  /// @param message Any2EVMMessage\n  function _ccipReceive(Client.Any2EVMMessage memory message) internal virtual;\n\n  /////////////////////////////////////////////////////////////////////\n  // Plumbing\n  /////////////////////////////////////////////////////////////////////\n\n  /// @notice Return the current router\n  /// @return CCIP router address\n  function getRouter() public view returns (address) {\n    return address(i_ccipRouter);\n  }\n\n  error InvalidRouter(address router);\n\n  /// @dev only calls from the set router are accepted.\n  modifier onlyRouter() {\n    if (msg.sender != address(i_ccipRouter)) revert InvalidRouter(msg.sender);\n    _;\n  }\n}\n"
    },
    "@chainlink/contracts-ccip/src/v0.8/ccip/interfaces/IAny2EVMMessageReceiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {Client} from \"../libraries/Client.sol\";\n\n/// @notice Application contracts that intend to receive messages from\n/// the router should implement this interface.\ninterface IAny2EVMMessageReceiver {\n  /// @notice Called by the Router to deliver a message.\n  /// If this reverts, any token transfers also revert. The message\n  /// will move to a FAILED state and become available for manual execution.\n  /// @param message CCIP Message\n  /// @dev Note ensure you check the msg.sender is the OffRampRouter\n  function ccipReceive(Client.Any2EVMMessage calldata message) external;\n}\n"
    },
    "@chainlink/contracts-ccip/src/v0.8/ccip/interfaces/IRouterClient.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {Client} from \"../libraries/Client.sol\";\n\ninterface IRouterClient {\n  error UnsupportedDestinationChain(uint64 destChainSelector);\n  error InsufficientFeeTokenAmount();\n  error InvalidMsgValue();\n\n  /// @notice Checks if the given chain ID is supported for sending/receiving.\n  /// @param chainSelector The chain to check.\n  /// @return supported is true if it is supported, false if not.\n  function isChainSupported(uint64 chainSelector) external view returns (bool supported);\n\n  /// @notice Gets a list of all supported tokens which can be sent or received\n  /// to/from a given chain id.\n  /// @param chainSelector The chainSelector.\n  /// @return tokens The addresses of all tokens that are supported.\n  function getSupportedTokens(uint64 chainSelector) external view returns (address[] memory tokens);\n\n  /// @param destinationChainSelector The destination chainSelector\n  /// @param message The cross-chain CCIP message including data and/or tokens\n  /// @return fee returns execution fee for the message\n  /// delivery to destination chain, denominated in the feeToken specified in the message.\n  /// @dev Reverts with appropriate reason upon invalid message.\n  function getFee(\n    uint64 destinationChainSelector,\n    Client.EVM2AnyMessage memory message\n  ) external view returns (uint256 fee);\n\n  /// @notice Request a message to be sent to the destination chain\n  /// @param destinationChainSelector The destination chain ID\n  /// @param message The cross-chain CCIP message including data and/or tokens\n  /// @return messageId The message ID\n  /// @dev Note if msg.value is larger than the required fee (from getFee) we accept\n  /// the overpayment with no refund.\n  /// @dev Reverts with appropriate reason upon invalid message.\n  function ccipSend(\n    uint64 destinationChainSelector,\n    Client.EVM2AnyMessage calldata message\n  ) external payable returns (bytes32);\n}\n"
    },
    "@chainlink/contracts-ccip/src/v0.8/ccip/libraries/Client.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// End consumer library.\nlibrary Client {\n  /// @dev RMN depends on this struct, if changing, please notify the RMN maintainers.\n  struct EVMTokenAmount {\n    address token; // token address on the local chain.\n    uint256 amount; // Amount of tokens.\n  }\n\n  struct Any2EVMMessage {\n    bytes32 messageId; // MessageId corresponding to ccipSend on source.\n    uint64 sourceChainSelector; // Source chain selector.\n    bytes sender; // abi.decode(sender) if coming from an EVM chain.\n    bytes data; // payload sent in original message.\n    EVMTokenAmount[] destTokenAmounts; // Tokens and their amounts in their destination chain representation.\n  }\n\n  // If extraArgs is empty bytes, the default is 200k gas limit.\n  struct EVM2AnyMessage {\n    bytes receiver; // abi.encode(receiver address) for dest EVM chains\n    bytes data; // Data payload\n    EVMTokenAmount[] tokenAmounts; // Token transfers\n    address feeToken; // Address of feeToken. address(0) means you will send msg.value.\n    bytes extraArgs; // Populate this with _argsToBytes(EVMExtraArgsV1)\n  }\n\n  // bytes4(keccak256(\"CCIP EVMExtraArgsV1\"));\n  bytes4 public constant EVM_EXTRA_ARGS_V1_TAG = 0x97a657c9;\n  struct EVMExtraArgsV1 {\n    uint256 gasLimit;\n  }\n\n  function _argsToBytes(EVMExtraArgsV1 memory extraArgs) internal pure returns (bytes memory bts) {\n    return abi.encodeWithSelector(EVM_EXTRA_ARGS_V1_TAG, extraArgs);\n  }\n}\n"
    },
    "@chainlink/contracts-ccip/src/v0.8/vendor/openzeppelin-solidity/v4.8.3/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}"
    },
    "@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(\n    uint80 _roundId\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n\n  function latestRoundData()\n    external\n    view\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Strings.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV // Deprecated in v4.8\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1);\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator,\n        Rounding rounding\n    ) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10**64) {\n                value /= 10**64;\n                result += 64;\n            }\n            if (value >= 10**32) {\n                value /= 10**32;\n                result += 32;\n            }\n            if (value >= 10**16) {\n                value /= 10**16;\n                result += 16;\n            }\n            if (value >= 10**8) {\n                value /= 10**8;\n                result += 8;\n            }\n            if (value >= 10**4) {\n                value /= 10**4;\n                result += 4;\n            }\n            if (value >= 10**2) {\n                value /= 10**2;\n                result += 2;\n            }\n            if (value >= 10**1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
    },
    "@reclaimprotocol/verifier-solidity-sdk/contracts/Addresses.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\n/**\n * Reclaim's addresses\n */\n\nlibrary Addresses {\n    address public constant BASE_MAINNET =\n        0xACE04E6DeB9567C1B8F37D113F2Da9E690Fc128d;\n    address public constant BNB_MAINNET =\n        0x1bbb0896aC6F4E32a89157C73Fb830325a441cb9;\n    address public constant POLYGON_MAINNET =\n        0xEA11e7aBC9E4260747C11b1B9A25F65364a35A27;\n    address public constant ARBITRUM_MAINNET =\n        0xe79A453bD088F4A58656b315a7C1f8Ea3473CCf1;\n    address public constant OPTIMISM_MAINNET =\n        0xe79A453bD088F4A58656b315a7C1f8Ea3473CCf1;\n    address public constant OPTIMISM_GOERLI_TESTNET =\n        0x2f0306D698685BEf7ff50745BFF7178F0d117ba8;\n    address public constant LINEA_TESTNET =\n        0xf223E215B2c9A2E5FE1B2971d5694684b2E734C1;\n    address public constant PLOYGON_MUMBAI_TESTNET =\n        0xd6534f52CEB3d0139b915bc0C3278a94687fA5C7;\n}\n"
    },
    "@reclaimprotocol/verifier-solidity-sdk/contracts/BytesUtils.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\n/**\n * Utilities for bytes manipulation & conversion\n */\nlibrary BytesUtils {\n\tfunction bytesToUInt(bytes memory data, uint offset) internal pure returns (uint) {\n\t\trequire(offset + 4 <= data.length, \"Offset + 4 must be within data bounds\");\n\n\t\tuint32 result;\n\t\tassembly {\n\t\t\t// Load the 32 bits (4 bytes) from the data at the given offset into the result variable\n\t\t\tresult := mload(add(add(data, 0x4), offset))\n\t\t}\n\n\t\treturn result;\n\t}\n}\n"
    },
    "@reclaimprotocol/verifier-solidity-sdk/contracts/Claims.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nimport \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\nimport \"./StringUtils.sol\";\n\n/**\n * Library to assist with requesting,\n * serialising & verifying credentials\n */\nlibrary Claims {\n\t/** Data required to describe a claim */\n\tstruct CompleteClaimData {\n\t\tbytes32 identifier;\n\t\taddress owner;\n\t\tuint32 timestampS;\n\t\tuint32 epoch;\n\t}\n\n\tstruct ClaimInfo {\n\t\tstring provider;\n\t\tstring parameters;\n\t\tstring context;\n\t}\n\n\t/** Claim with signatures & signer */\n\tstruct SignedClaim {\n\t\tCompleteClaimData claim;\n\t\tbytes[] signatures;\n\t}\n\n\t/**\n\t * Asserts that the claim is signed by the expected witnesses\n\t */\n\tfunction assertValidSignedClaim(\n\t\tSignedClaim memory self,\n\t\taddress[] memory expectedWitnessAddresses\n\t) internal pure {\n\t\trequire(self.signatures.length > 0, \"No signatures\");\n\t\taddress[] memory signedWitnesses = recoverSignersOfSignedClaim(self);\n\t\tfor (uint256 i = 0; i < expectedWitnessAddresses.length; i++) {\n\t\t\tbool found = false;\n\t\t\tfor (uint256 j = 0; j < signedWitnesses.length; j++) {\n\t\t\t\tif (signedWitnesses[j] == expectedWitnessAddresses[i]) {\n\t\t\t\t\tfound = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\trequire(found, \"Missing witness signature\");\n\t\t}\n\t}\n\n\t/**\n\t * @dev recovers the signer of the claim\n\t */\n\tfunction recoverSignersOfSignedClaim(\n\t\tSignedClaim memory self\n\t) internal pure returns (address[] memory) {\n\t\tbytes memory serialised = serialise(self.claim);\n\t\taddress[] memory signers = new address[](self.signatures.length);\n\t\tfor (uint256 i = 0; i < self.signatures.length; i++) {\n\t\t\tsigners[i] = verifySignature(serialised, self.signatures[i]);\n\t\t}\n\n\t\treturn signers;\n\t}\n\n\t/**\n\t * @dev serialises the credential into a string;\n\t * the string is used to verify the signature\n\t *\n\t * the serialisation is the same as done by the TS library\n\t */\n\tfunction serialise(\n\t\tCompleteClaimData memory self\n\t) internal pure returns (bytes memory) {\n\t\treturn\n\t\t\tabi.encodePacked(\n\t\t\t\tStringUtils.bytes2str(abi.encodePacked(self.identifier)),\n\t\t\t\t\"\\n\",\n\t\t\t\tStringUtils.address2str(self.owner),\n\t\t\t\t\"\\n\",\n\t\t\t\tStringUtils.uint2str(self.timestampS),\n\t\t\t\t\"\\n\",\n\t\t\t\tStringUtils.uint2str(self.epoch)\n\t\t\t);\n\t}\n\n\t/**\n\t * @dev returns the address of the user that generated the signature\n\t */\n\tfunction verifySignature(\n\t\tbytes memory content,\n\t\tbytes memory signature\n\t) internal pure returns (address signer) {\n\t\tbytes32 signedHash = keccak256(\n\t\t\tabi.encodePacked(\n\t\t\t\t\"\\x19Ethereum Signed Message:\\n\",\n\t\t\t\tStringUtils.uint2str(content.length),\n\t\t\t\tcontent\n\t\t\t)\n\t\t);\n\t\treturn ECDSA.recover(signedHash, signature);\n\t}\n\n\tfunction hashClaimInfo(ClaimInfo memory claimInfo) internal pure returns (bytes32) {\n\t\tbytes memory serialised = abi.encodePacked(\n\t\t\tclaimInfo.provider,\n\t\t\t\"\\n\",\n\t\t\tclaimInfo.parameters,\n\t\t\t\"\\n\",\n\t\t\tclaimInfo.context\n\t\t);\n\t\treturn keccak256(serialised);\n\t}\n}\n"
    },
    "@reclaimprotocol/verifier-solidity-sdk/contracts/Random.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\n// implementation from: https://stackoverflow.com/a/67332959\n// Utils for random number generation\nlibrary Random {\n\t/**\n\t * @dev generates a random number from the given seed\n\t * This will always return the same number for the same seed & block\n\t */\n\tfunction random(uint256 seed) internal view returns (uint) {\n\t\treturn uint(keccak256(abi.encodePacked(block.difficulty, block.timestamp, seed)));\n\t}\n}\n"
    },
    "@reclaimprotocol/verifier-solidity-sdk/contracts/Reclaim.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nimport \"./Claims.sol\";\nimport \"./Random.sol\";\nimport \"./StringUtils.sol\";\nimport \"./BytesUtils.sol\";\n\n// import \"hardhat/console.sol\";\n\n\n/**\n * Reclaim Beacon contract\n */\ncontract Reclaim {\n\tstruct Witness {\n\t\t/** ETH address of the witness */\n\t\taddress addr;\n\t\t/** Host to connect to the witness */\n\t\tstring host;\n\t}\n\n\tstruct Epoch {\n\t\t/** Epoch number */\n\t\tuint32 id;\n\t\t/** when the epoch changed */\n\t\tuint32 timestampStart;\n\t\t/** when the epoch will change */\n\t\tuint32 timestampEnd;\n\t\t/** Witnesses for this epoch */\n\t\tWitness[] witnesses;\n\t\t/**\n\t\t * Minimum number of witnesses\n\t\t * required to create a claim\n\t\t * */\n\t\tuint8 minimumWitnessesForClaimCreation;\n\t}\n\n\tstruct Proof {\n\t\tClaims.ClaimInfo claimInfo;\n\t\tClaims.SignedClaim signedClaim;\n\t}\n\n\t/** list of all epochs */\n\tEpoch[] public epochs;\n\n\t/**\n\t * duration of each epoch.\n\t * is not a hard duration, but useful for\n\t * caching purposes\n\t * */\n\tuint32 public epochDurationS; // 1 day\n\n\t/**\n\t * current epoch.\n\t * starts at 1, so that the first epoch is 1\n\t * */\n\tuint32 public currentEpoch;\n\n\n\tevent EpochAdded(Epoch epoch);\n\n\taddress public owner;\n\n\t/**\n\t * @notice Calls initialize on the base contracts\n\t *\n\t * @dev This acts as a constructor for the upgradeable proxy contract\n\t */\n\tconstructor() {\n\t\tepochDurationS = 1 days;\n\t\tcurrentEpoch = 0;\n\t\towner = msg.sender;\n\t}\n\n\tmodifier onlyOwner () {\n\t\trequire(owner == msg.sender, \"Only Owner\");\n\t\t_;\n\t}\n\t// epoch functions ---\n\n\t/**\n\t * Fetch an epoch\n\t * @param epoch the epoch number to fetch;\n\t * pass 0 to fetch the current epoch\n\t */\n\tfunction fetchEpoch(uint32 epoch) public view returns (Epoch memory) {\n\t\tif (epoch == 0) {\n\t\t\treturn epochs[epochs.length - 1];\n\t\t}\n\t\treturn epochs[epoch - 1];\n\t}\n\n\t/**\n\t * Get the witnesses that'll sign the claim\n\t */\n\tfunction fetchWitnessesForClaim(\n\t\tuint32 epoch,\n\t\tbytes32 identifier,\n\t\tuint32 timestampS\n\t) public view returns (Witness[] memory) {\n\t\tEpoch memory epochData = fetchEpoch(epoch);\n\t\tbytes memory completeInput = abi.encodePacked(\n\t\t\t// hex encode bytes\n\t\t\tStringUtils.bytes2str(\n\t\t\t\t// convert bytes32 to bytes\n\t\t\t\tabi.encodePacked(identifier)\n\t\t\t),\n\t\t\t\"\\n\",\n\t\t\tStringUtils.uint2str(epoch),\n\t\t\t\"\\n\",\n\t\t\tStringUtils.uint2str(epochData.minimumWitnessesForClaimCreation),\n\t\t\t\"\\n\",\n\t\t\tStringUtils.uint2str(timestampS)\n\t\t);\n\t\tbytes memory completeHash = abi.encodePacked(keccak256(completeInput));\n\n\t\tWitness[] memory witnessesLeftList = epochData.witnesses;\n\t\tWitness[] memory selectedWitnesses = new Witness[](\n\t\t\tepochData.minimumWitnessesForClaimCreation\n\t\t);\n\t\tuint witnessesLeft = witnessesLeftList.length;\n\n\t\tuint byteOffset = 0;\n\t\tfor (uint32 i = 0; i < epochData.minimumWitnessesForClaimCreation; i++) {\n\t\t\tuint randomSeed = BytesUtils.bytesToUInt(completeHash, byteOffset);\n\t\t\tuint witnessIndex = randomSeed % witnessesLeft;\n\t\t\tselectedWitnesses[i] = witnessesLeftList[witnessIndex];\n\t\t\t// remove the witness from the list of witnesses\n\t\t\t// we've utilised witness at index \"idx\"\n\t\t\t// we of course don't want to pick the same witness twice\n\t\t\t// so we remove it from the list of witnesses\n\t\t\t// and reduce the number of witnesses left to pick from\n\t\t\t// since solidity doesn't support \"pop()\" in memory arrays\n\t\t\t// we swap the last element with the element we want to remove\n\t\t\twitnessesLeftList[witnessIndex] = epochData.witnesses[witnessesLeft - 1];\n\t\t\tbyteOffset = (byteOffset + 4) % completeHash.length;\n\t\t\twitnessesLeft -= 1;\n\t\t}\n\n\t\treturn selectedWitnesses;\n\t}\n\n\t/**\n\t * Call the function to assert\n\t * the validity of several claims proofs\n\t */\n\tfunction verifyProof(Proof memory proof) public view {\n\t\t// create signed claim using claimData and signature.\n\t\trequire(proof.signedClaim.signatures.length > 0, \"No signatures\");\n\t\tClaims.SignedClaim memory signed = Claims.SignedClaim(\n\t\t\tproof.signedClaim.claim,\n\t\t\tproof.signedClaim.signatures\n\t\t);\n\n\t\t// check if the hash from the claimInfo is equal to the infoHash in the claimData\n\t\tbytes32 hashed = Claims.hashClaimInfo(proof.claimInfo);\n\t\trequire(proof.signedClaim.claim.identifier == hashed);\n\n\t\t// fetch witness list from fetchEpoch(_epoch).witnesses\n\t\tWitness[] memory expectedWitnesses = fetchWitnessesForClaim(\n\t\t\tproof.signedClaim.claim.epoch,\n\t\t\tproof.signedClaim.claim.identifier,\n\t\t\tproof.signedClaim.claim.timestampS\n\t\t);\n\t\taddress[] memory signedWitnesses = Claims.recoverSignersOfSignedClaim(signed);\n\t\t// check if the number of signatures is equal to the number of witnesses\n\t\trequire(\n\t\t\tsignedWitnesses.length == expectedWitnesses.length,\n\t\t\t\"Number of signatures not equal to number of witnesses\"\n\t\t);\n\n\t\t// Update awaited: more checks on whose signatures can be considered.\n\t\tfor (uint256 i = 0; i < signed.signatures.length; i++) {\n\t\t\tbool found = false;\n\t\t\tfor (uint j = 0; j < expectedWitnesses.length; j++) {\n\t\t\t\tif (signedWitnesses[i] == expectedWitnesses[j].addr) {\n\t\t\t\t\tfound = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\trequire(found, \"Signature not appropriate\");\n\t\t}\n\n\t\t//@TODO: verify zkproof\n\t}\n\n\t// admin functions ---\n\n\t/**\n\t * @dev Add a new epoch\n\t */\n\tfunction addNewEpoch(\n\t\tWitness[] calldata witnesses,\n\t\tuint8 requisiteWitnessesForClaimCreate\n\t) external onlyOwner {\n\t\tif (epochDurationS == 0) {\n\t\t\tepochDurationS = 1 days;\n\t\t}\n\t\tif (epochs.length > 0) {\n\t\t\tepochs[epochs.length - 1].timestampEnd = uint32(block.timestamp);\n\t\t}\n\n\t\tcurrentEpoch += 1;\n\t\tEpoch storage epoch = epochs.push();\n\t\tepoch.id = currentEpoch;\n\t\tepoch.timestampStart = uint32(block.timestamp);\n\t\tepoch.timestampEnd = uint32(block.timestamp + epochDurationS);\n\t\tepoch.minimumWitnessesForClaimCreation = requisiteWitnessesForClaimCreate;\n\n\t\tfor (uint256 i = 0; i < witnesses.length; i++) {\n\t\t\tepoch.witnesses.push(witnesses[i]);\n\t\t}\n\n\t\temit EpochAdded(epochs[epochs.length - 1]);\n\t}\n\n\t// internal code -----\n\n\tfunction uintDifference(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\tif (a > b) {\n\t\t\treturn a - b;\n\t\t}\n\n\t\treturn b - a;\n\t}\n}\n"
    },
    "@reclaimprotocol/verifier-solidity-sdk/contracts/StringUtils.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\n/**\n * Utilities for string manipulation & conversion\n */\nlibrary StringUtils {\n\tfunction address2str(address x) internal pure returns (string memory) {\n\t\tbytes memory s = new bytes(40);\n\t\tfor (uint i = 0; i < 20; i++) {\n\t\t\tbytes1 b = bytes1(uint8(uint(uint160(x)) / (2 ** (8 * (19 - i)))));\n\t\t\tbytes1 hi = bytes1(uint8(b) / 16);\n\t\t\tbytes1 lo = bytes1(uint8(b) - 16 * uint8(hi));\n\t\t\ts[2 * i] = getChar(hi);\n\t\t\ts[2 * i + 1] = getChar(lo);\n\t\t}\n\t\treturn string(abi.encodePacked(\"0x\", s));\n\t}\n\n\tfunction bytes2str(bytes memory buffer) internal pure returns (string memory) {\n\t\t// Fixed buffer size for hexadecimal convertion\n\t\tbytes memory converted = new bytes(buffer.length * 2);\n\t\tbytes memory _base = \"0123456789abcdef\";\n\n\t\tfor (uint256 i = 0; i < buffer.length; i++) {\n\t\t\tconverted[i * 2] = _base[uint8(buffer[i]) / _base.length];\n\t\t\tconverted[i * 2 + 1] = _base[uint8(buffer[i]) % _base.length];\n\t\t}\n\n\t\treturn string(abi.encodePacked(\"0x\", converted));\n\t}\n\n\tfunction getChar(bytes1 b) internal pure returns (bytes1 c) {\n\t\tif (uint8(b) < 10) return bytes1(uint8(b) + 0x30);\n\t\telse return bytes1(uint8(b) + 0x57);\n\t}\n\n\tfunction bool2str(bool _b) internal pure returns (string memory _uintAsString) {\n\t\tif (_b) {\n\t\t\treturn \"true\";\n\t\t} else {\n\t\t\treturn \"false\";\n\t\t}\n\t}\n\n\tfunction uint2str(uint _i) internal pure returns (string memory _uintAsString) {\n\t\tif (_i == 0) {\n\t\t\treturn \"0\";\n\t\t}\n\t\tuint j = _i;\n\t\tuint len;\n\t\twhile (j != 0) {\n\t\t\tlen++;\n\t\t\tj /= 10;\n\t\t}\n\t\tbytes memory bstr = new bytes(len);\n\t\tuint k = len;\n\t\twhile (_i != 0) {\n\t\t\tk = k - 1;\n\t\t\tuint8 temp = (48 + uint8(_i - (_i / 10) * 10));\n\t\t\tbytes1 b1 = bytes1(temp);\n\t\t\tbstr[k] = b1;\n\t\t\t_i /= 10;\n\t\t}\n\t\treturn string(bstr);\n\t}\n\n\tfunction areEqual(\n\t\tstring calldata _a,\n\t\tstring storage _b\n\t) internal pure returns (bool) {\n\t\treturn keccak256(abi.encodePacked((_a))) == keccak256(abi.encodePacked((_b)));\n\t}\n\n\tfunction areEqual(string memory _a, string memory _b) internal pure returns (bool) {\n\t\treturn keccak256(abi.encodePacked((_a))) == keccak256(abi.encodePacked((_b)));\n\t}\n\n\tfunction toLower(string memory str) internal pure returns (string memory) {\n\t\tbytes memory bStr = bytes(str);\n\t\tbytes memory bLower = new bytes(bStr.length);\n\t\tfor (uint i = 0; i < bStr.length; i++) {\n\t\t\t// Uppercase character...\n\t\t\tif ((uint8(bStr[i]) >= 65) && (uint8(bStr[i]) <= 90)) {\n\t\t\t\t// So we add 32 to make it lowercase\n\t\t\t\tbLower[i] = bytes1(uint8(bStr[i]) + 32);\n\t\t\t} else {\n\t\t\t\tbLower[i] = bStr[i];\n\t\t\t}\n\t\t}\n\t\treturn string(bLower);\n\t}\n\n\tfunction substring(\n\t\tstring memory str,\n\t\tuint startIndex,\n\t\tuint endIndex\n\t) internal pure returns (string memory) {\n\t\tbytes memory strBytes = bytes(str);\n\t\tbytes memory result = new bytes(endIndex - startIndex);\n\t\tfor (uint i = startIndex; i < endIndex; i++) {\n\t\t\tresult[i - startIndex] = strBytes[i];\n\t\t}\n\t\treturn string(result);\n\t}\n}\n"
    },
    "contracts/DefiPulseIndexForbes.sol": {
      "content": "\n// Attestor.sol\n\n// SPDX-License-Identifier: MIT\n// pragma solidity 0.8.20;\npragma solidity 0.8.4;\n\n \n \nimport \"@reclaimprotocol/verifier-solidity-sdk/contracts/Reclaim.sol\";\nimport \"@reclaimprotocol/verifier-solidity-sdk/contracts/Addresses.sol\";\n \ncontract TLSIndexNotary {\n  address public reclaimAddress;\n  // add providersHashes for your permitted providers\n  string[] public providersHashes;\n  mapping(string => address) public tokenSymbolToAddress;\n  uint256 public lastUpdateTimestamp;\n  string[] public defiPulseIndexForbes;\n\n\n  constructor(string[] memory _providersHashes){\n     providersHashes = _providersHashes;\n     reclaimAddress = Addresses.PLOYGON_MUMBAI_TESTNET; \n  }\n\n  function setTokenAddress(string memory tokenSymbol, address tokenAddress) public \n  // onlyOwner\n  {\n    tokenSymbolToAddress[tokenSymbol] = tokenAddress;\n  }\n\n  function split(string memory str) public pure returns (string[] memory) {\n        bytes memory strBytes = bytes(str);\n        uint256 count = 1;\n        for (uint256 i = 0; i < strBytes.length; i++) {\n            if (strBytes[i] == \",\") {\n                count++;\n            }\n        }\n        string[] memory result = new string[](count);\n        uint256 j = 0;\n        bytes memory temp;\n        for (uint256 i = 0; i < strBytes.length; i++) {\n            if (strBytes[i] == \",\") {\n                result[j] = string(temp);\n                j++;\n                temp = \"\";\n            } else {\n                temp = abi.encodePacked(temp, strBytes[i]);\n            }\n        }\n\n        result[j] = string(temp);\n        return result;\n    }\n\n  function verifyProof(Reclaim.Proof memory proof, string memory tokenListParamsString) public {\n      // Reclaim(reclaimAddress).verifyProof(proof);\n      // require(keccak256(abi.encodePacked(proof.claimInfo.parameters)) == keccak256(abi.encodePacked(tokenListParamsString)), \"Invalid token list parameters\");\n\n      // parse the token List string into a list of strings\n      string[] memory tokenList = split(tokenListParamsString);\n\n      for(uint i = 0; i < tokenList.length; i++){\n        require(tokenSymbolToAddress[tokenList[i]] != address(0), \"Token not yet registered\");\n        defiPulseIndexForbes.push(tokenList[i]);\n      }\n      lastUpdateTimestamp = block.timestamp;\n  }\n}"
    },
    "contracts/IndexAggreagtor.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\nimport {AggregatorV3Interface} from \"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol\";\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {Client} from \"@chainlink/contracts-ccip/src/v0.8/ccip/libraries/Client.sol\";\nimport {IRouterClient} from \"@chainlink/contracts-ccip/src/v0.8/ccip/interfaces/IRouterClient.sol\";\nimport {CCIPReceiver} from \"@chainlink/contracts-ccip/src/v0.8/ccip/applications/CCIPReceiver.sol\";\nimport {LiquidityManager} from \"./LiquidityManager.sol\";\nimport {TaggingVerifier} from \"./TaggingVerifier.sol\";\n\nuint32 constant CALLBACK_GAS_LIMIT = 4_000_000;\n\nstruct ChainLinkData {\n    address router;\n    address link;\n    uint64 currentChainSelectorId;\n    bytes32 keyHash;\n}\n\nstruct TokenInfo {\n    string _symbol;\n    address _address;\n    uint32 _chainId;\n    address _aggregator;\n    string[] _tags;\n}\n\nstruct LiquidityMessage {\n    address token;\n    uint256 liquidity;\n    uint32 chainId;\n    uint256 timestamp;\n} \n\nstruct SupplyMessage {\n    address token;\n    uint256 supply;\n    uint32 chainId;\n    uint256 timestamp;\n}\n\nstruct AggregatorParams {\n    uint256 _timeWindow; \n    uint256 _sampleSize;\n    // uint32 _chainId;3\n    uint256 _bribeUnit;\n}\n\nstruct IndexUpdateMessage {\n    LiquidityMessage[] liquidityMessages;\n    SupplyMessage[] supplyMessages;\n}\n\nenum PayFeesIn {\n    Native,\n    LINK\n}\n\nerror NotEnoughBalance(uint256 currentBalance, uint256 calculatedFees);\n\n\ncontract IndexAggregator is CCIPReceiver {\n    TokenInfo[] public tokenInfo;\n    TokenInfo[] tmpTokens;\n    LiquidityManager public liquidityManager;\n    mapping(string => uint256) public tokens;\n    string[] public tokenSymbols;\n\n    \n    LiquidityMessage[] public liquidityMessages;\n    SupplyMessage[] public supplyMessages;\n    TaggingVerifier public taggingVerifier;\n\n    uint256[] public totalSupplies;\n    uint256[] public liquidities;\n    uint256[] public tokenParamsTimestampUpdates;\n\n    mapping(uint256 => uint256[]) public movingAverage;\n    uint256 sampleSize;\n    uint256 timeWindow;\n    uint256 samplingFrequency;\n    uint256 lastSampleTime;\n    uint256[] public lastIndexOrder;\n    mapping(string => uint256[]) public tagsIndexOrder; \n    mapping(string => uint256) public tagsIndexTimestamp;\n    uint256 public lastIndexTimestamp;\n    uint256 public bribeUnit;\n    uint32 public chainId;\n    uint32 public mainChainId;\n\n    ChainLinkData public chainLinkData;\n\n    mapping(uint64 => address) public chainSelectorIdToSidechainAddress;\n\n\n    constructor(TokenInfo[] memory _tokenInfo,  address _liquidityManager, address  router, AggregatorParams memory _aggregatorParams\n    ) CCIPReceiver(router) {\n        sampleSize = _aggregatorParams._sampleSize;\n        timeWindow = _aggregatorParams._timeWindow;\n        samplingFrequency = timeWindow / sampleSize;\n        bribeUnit = _aggregatorParams._bribeUnit;\n        liquidityManager = LiquidityManager(_liquidityManager);\n        for (uint256 i = 0; i < _tokenInfo.length; i++) {\n            tokenInfo.push(_tokenInfo[i]);\n            tokenSymbols.push(_tokenInfo[i]._symbol);\n            tokens[_tokenInfo[i]._symbol] = i;\n            totalSupplies.push(IERC20(_tokenInfo[i]._address).totalSupply());\n        }\n    }\n\n    // Initialize methods\n\n    function setTaggingVerifier(address _taggingVerifier) external {\n        taggingVerifier = TaggingVerifier(_taggingVerifier);\n    }\n\n    function setChainLinkData(\n        address _router,\n        address _link,\n        uint64 _currentChainSelectorId,\n        bytes32 _keyHash\n    ) external {\n        chainLinkData = ChainLinkData({\n            router: _router,\n            link: _link,\n            currentChainSelectorId: _currentChainSelectorId,\n            keyHash: _keyHash\n        });\n    }\n\n    function setChainId(uint32 _chainId, uint32 _mainChainId) external {\n        chainId = _chainId;\n        mainChainId = _mainChainId;\n    }\n\n    // END Initialize methods\n\n\n    function isMainChain() public view returns (bool) {\n        return chainId == mainChainId;\n    }\n\n    function setSideChainAddress(\n        uint64 chainSelectorId,\n        address sideChainAddress\n    ) external {\n        chainSelectorIdToSidechainAddress[chainSelectorId] = sideChainAddress;\n    }\n\n    function updateTokenParams(uint256[] memory _totalSupplies, uint256[] memory _liquidities) external {\n\n        for (uint256 i = 0; i < tokenInfo.length; i++) {\n            if (tokenInfo[i]._chainId == chainId) {\n                liquidities[i] = liquidityManager.getTotalLiquidityForToken(tokenInfo[i]._address);\n                totalSupplies[i] = IERC20(tokenInfo[i]._address).totalSupply();\n                tokenParamsTimestampUpdates[i] = block.timestamp;\n            }\n        }\n\n        if(isMainChain()){\n            for (uint256 i = 0; i < totalSupplies.length; i++) {\n                for (uint256 j = 0; j < tokenInfo.length; j++) {\n                    if (tokenInfo[j]._address == supplyMessages[i].token) {\n                        totalSupplies[j] = supplyMessages[i].supply;\n                        tokenParamsTimestampUpdates[j] = liquidityMessages[i].timestamp;\n                    }\n                    continue;\n                }\n            }\n\n            for (uint256 i = 0; i < liquidities.length; i++) {\n                for (uint256 j = 0; j < tokenInfo.length; j++) {\n                    if (tokenInfo[j]._address == liquidityMessages[i].token) {\n                        liquidities[j] = liquidityMessages[i].liquidity;\n                        tokenParamsTimestampUpdates[j] = liquidityMessages[i].timestamp;\n                    }\n                    continue;\n                }\n            }\n        }\n\n        if(!isMainChain()){\n            SupplyMessage[] memory _supplyMessages = new SupplyMessage[](tokenInfo.length);\n            LiquidityMessage[] memory _liquidityMessages = new LiquidityMessage[](tokenInfo.length);\n            for (uint256 i = 0; i < tokenInfo.length; i++) {\n                if(chainId == tokenInfo[i]._chainId){\n                    _supplyMessages[i] = SupplyMessage(tokenInfo[i]._address, _totalSupplies[i], chainId, block.timestamp);\n                    _liquidityMessages[i] = LiquidityMessage(tokenInfo[i]._address, _liquidities[i], chainId, block.timestamp);\n                }\n            }\n        }\n    }\n\n\n    function checkTokenParams() public {\n        for (uint256 i = 0; i < tokenInfo.length; i++) {\n            if (block.timestamp - tokenParamsTimestampUpdates[i] >= timeWindow) {\n                liquidities[i] = liquidityManager.getTotalLiquidityForToken(tokenInfo[i]._address);\n                totalSupplies[i] = IERC20(tokenInfo[i]._address).totalSupply();\n                tokenParamsTimestampUpdates[i] = block.timestamp;\n            }\n        }\n    }\n\n\n    function _ccipReceive(\n        Client.Any2EVMMessage memory message\n    ) internal virtual override {\n\n        IndexUpdateMessage memory indexMessage = abi.decode(\n            message.data,\n            (IndexUpdateMessage)\n        );\n        for (uint256 i = 0; i < indexMessage.liquidityMessages.length; i++) {\n            LiquidityMessage memory liquidityMessage = indexMessage.liquidityMessages[i];\n            liquidityMessages.push(liquidityMessage);\n        }\n        for (uint256 i = 0; i < indexMessage.supplyMessages.length; i++) {\n            SupplyMessage memory supplyMessage = indexMessage.supplyMessages[i];\n            supplyMessages.push(supplyMessage);\n        }\n    }\n\n    function collectPriceFeeds() external {\n        require(block.timestamp - lastSampleTime >= samplingFrequency, \"IndexAggregator: Sampling frequency not reached\");\n\n        // if (block.timestamp - lastSampleTime >= timeWindow) {\n        //     for (uint256 i = 0; i < tokenInfo.length; i++) {\n        //         if (movingAverage[i].length > 0) {\n        //             movingAverage[i].pop();\n        //         }\n        //     }\n        // }\n\n        for (uint256 i = 0; i < tokenInfo.length; i++) {\n            (, int256 answer, , , ) = AggregatorV3Interface(tokenInfo[i]._aggregator).latestRoundData();\n\n            movingAverage[i].push(uint256(answer));\n            uint256 sum = 0;\n            if (movingAverage[i].length > sampleSize) {\n                movingAverage[i].pop();\n            }\n            for (uint256 j = 0; j < movingAverage[i].length; j++) {\n                sum += movingAverage[i][j];\n            }\n        }\n        lastSampleTime = block.timestamp;\n        // if there is enough bribe pay it to the caller\n        if (bribeUnit > 0) {\n            payable(msg.sender).transfer(bribeUnit);\n        }\n    }\n\n    function persistIndex(uint256[] memory indexOrders, string memory tag) public returns (bool)\n    {\n        // indexOrders is an array index order [2,0,1] means 2nd token, 0th token, 1st token for price calculation\n        \n        if(keccak256(abi.encodePacked(tag)) != keccak256(abi.encodePacked(\"\"))) {\n            // Clean the temporary array in the future we may use transient storage for this)\n            for (uint256 i = 0; i < tmpTokens.length; i++) {\n                delete tmpTokens[i];\n            }\n\n            for (uint256 i = 0; i < tokenInfo.length; i++) {\n                for (uint256 j = 0; j < tokenInfo[i]._tags.length; j++) {\n                    if (keccak256(abi.encodePacked(tokenInfo[i]._tags[j])) == keccak256(abi.encodePacked(tag))) {\n                        // need to check if the tag was verified on the tagging system\n                        require(\n                            taggingVerifier.tokenSymbolToVerifiedTagsMap(tokenInfo[i]._symbol, tag) == true,\n                            \"IndexAggregator: Tag not verified\"\n                        );\n                        tmpTokens.push(tokenInfo[i]);\n                    }\n                }\n            }\n            require(\n                tmpTokens.length == indexOrders.length,  \"IndexAggregator: Invalid length of token with required tags\");\n        }\n        else{\n           require(indexOrders.length == tokenInfo.length, \"IndexAggregator: Invalid length of indexOrders\");\n        }\n\n        uint256 token_a_value;\n        uint256 token_b_value;\n        for (uint256 i = 0; i < indexOrders.length - 1; i++) {\n            token_a_value =  0;\n            token_b_value = 0;\n\n            for (uint256 j = 0; j < movingAverage[indexOrders[i]].length; j++) {\n                token_a_value += movingAverage[indexOrders[i]][j] * totalSupplies[indexOrders[i]];\n                token_b_value += movingAverage[indexOrders[i + 1]][j] * totalSupplies[indexOrders[i + 1]];\n            }\n\n\n            require(token_a_value > 0, \"IndexAggregator: Token value is zero\");\n            require(token_b_value > 0, \"IndexAggregator: Token value is zero\");\n            require(token_a_value > token_b_value, \"IndexAggregator: order is not correct\");\n        }\n\n        if(keccak256(abi.encodePacked(tag)) != keccak256(abi.encodePacked(\"\"))) {\n           tagsIndexOrder[tag] = indexOrders;\n        }\n        else{\n            lastIndexOrder = indexOrders;\n            lastIndexTimestamp = block.timestamp;  \n        }\n        return true;\n    }\n\n\n    function supportsInterface(\n        bytes4 interfaceId\n    )\n        public\n        pure\n        override(CCIPReceiver)\n        returns (bool)\n    {\n        return CCIPReceiver.supportsInterface(interfaceId);\n    }\n\n    function send(\n        uint64 destinationChainSelector,\n        PayFeesIn payFeesIn,\n        IndexUpdateMessage memory data\n    ) internal returns (bytes32 messageId) {\n        Client.EVM2AnyMessage memory message = Client.EVM2AnyMessage({\n            receiver: abi.encode(\n                chainSelectorIdToSidechainAddress[destinationChainSelector]\n            ),\n            data: abi.encode(data),\n            tokenAmounts: new Client.EVMTokenAmount[](0),\n            extraArgs: Client._argsToBytes(\n                Client.EVMExtraArgsV1({\n                    gasLimit: CALLBACK_GAS_LIMIT\n                })\n            ),\n            feeToken: payFeesIn == PayFeesIn.LINK\n                ? chainLinkData.link\n                : address(0)\n        });\n\n        uint256 fee = IRouterClient(chainLinkData.router).getFee(\n            destinationChainSelector,\n            message\n        );\n\n        if (payFeesIn == PayFeesIn.LINK) {\n            if (fee > IERC20(chainLinkData.link).balanceOf(address(this)))\n                revert NotEnoughBalance(\n                    IERC20(chainLinkData.link).balanceOf(address(this)),\n                    fee\n                );\n            IERC20(chainLinkData.link).approve(chainLinkData.router, fee);\n            messageId = IRouterClient(chainLinkData.router).ccipSend(\n                destinationChainSelector,\n                message\n            );\n        } else {\n            if (fee > address(this).balance)\n                revert NotEnoughBalance(address(this).balance, fee);\n            messageId = IRouterClient(chainLinkData.router).ccipSend{\n                value: fee\n            }(destinationChainSelector, message);\n        }\n    }\n}"
    },
    "contracts/IUniswapV3Factory.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title The interface for the Uniswap V3 Factory\n/// @notice The Uniswap V3 Factory facilitates creation of Uniswap V3 pools and control over the protocol fees\ninterface IUniswapV3Factory {\n    /// @notice Emitted when the owner of the factory is changed\n    /// @param oldOwner The owner before the owner was changed\n    /// @param newOwner The owner after the owner was changed\n    event OwnerChanged(address indexed oldOwner, address indexed newOwner);\n\n    /// @notice Emitted when a pool is created\n    /// @param token0 The first token of the pool by address sort order\n    /// @param token1 The second token of the pool by address sort order\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\n    /// @param tickSpacing The minimum number of ticks between initialized ticks\n    /// @param pool The address of the created pool\n    event PoolCreated(\n        address indexed token0,\n        address indexed token1,\n        uint24 indexed fee,\n        int24 tickSpacing,\n        address pool\n    );\n\n    /// @notice Emitted when a new fee amount is enabled for pool creation via the factory\n    /// @param fee The enabled fee, denominated in hundredths of a bip\n    /// @param tickSpacing The minimum number of ticks between initialized ticks for pools created with the given fee\n    event FeeAmountEnabled(uint24 indexed fee, int24 indexed tickSpacing);\n\n    /// @notice Returns the current owner of the factory\n    /// @dev Can be changed by the current owner via setOwner\n    /// @return The address of the factory owner\n    function owner() external view returns (address);\n\n    /// @notice Returns the tick spacing for a given fee amount, if enabled, or 0 if not enabled\n    /// @dev A fee amount can never be removed, so this value should be hard coded or cached in the calling context\n    /// @param fee The enabled fee, denominated in hundredths of a bip. Returns 0 in case of unenabled fee\n    /// @return The tick spacing\n    function feeAmountTickSpacing(uint24 fee) external view returns (int24);\n\n    /// @notice Returns the pool address for a given pair of tokens and a fee, or address 0 if it does not exist\n    /// @dev tokenA and tokenB may be passed in either token0/token1 or token1/token0 order\n    /// @param tokenA The contract address of either token0 or token1\n    /// @param tokenB The contract address of the other token\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\n    /// @return pool The pool address\n    function getPool(\n        address tokenA,\n        address tokenB,\n        uint24 fee\n    ) external view returns (address pool);\n\n    /// @notice Creates a pool for the given two tokens and fee\n    /// @param tokenA One of the two tokens in the desired pool\n    /// @param tokenB The other of the two tokens in the desired pool\n    /// @param fee The desired fee for the pool\n    /// @dev tokenA and tokenB may be passed in either order: token0/token1 or token1/token0. tickSpacing is retrieved\n    /// from the fee. The call will revert if the pool already exists, the fee is invalid, or the token arguments\n    /// are invalid.\n    /// @return pool The address of the newly created pool\n    function createPool(\n        address tokenA,\n        address tokenB,\n        uint24 fee\n    ) external returns (address pool);\n\n    /// @notice Updates the owner of the factory\n    /// @dev Must be called by the current owner\n    /// @param _owner The new owner of the factory\n    function setOwner(address _owner) external;\n\n    /// @notice Enables a fee amount with the given tickSpacing\n    /// @dev Fee amounts may never be removed once enabled\n    /// @param fee The fee amount to enable, denominated in hundredths of a bip (i.e. 1e-6)\n    /// @param tickSpacing The spacing between ticks to be enforced for all pools created with the given fee amount\n    function enableFeeAmount(uint24 fee, int24 tickSpacing) external;\n}"
    },
    "contracts/IUniswapV3Pool.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n\n/// @title The interface for a Uniswap V3 Pool\n/// @notice A Uniswap pool facilitates swapping and automated market making between any two assets that strictly conform\n/// to the ERC20 specification\n/// @dev The pool interface is broken up into many smaller pieces\ninterface IUniswapV3Pool{\n    function liquidity() external view returns (uint128);\n    function token0() external view returns (address);\n    function token1() external view returns (address);\n}"
    },
    "contracts/LiquidityManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./IUniswapV3Factory.sol\";\nimport \"./IUniswapV3Pool.sol\";\n\ncontract LiquidityManager {\n    IUniswapV3Factory public factory;\n    uint24[] public feeTiers = [500, 3000, 10000]; // Example fee tiers: 0.05%, 0.3%, 1%\n    address[] public comparisonTokens;\n\n    constructor(address _factory, address[] memory _comparisonTokens) {\n        factory = IUniswapV3Factory(_factory);\n        comparisonTokens = _comparisonTokens;\n    }\n\n    function getPoolsForToken(address token) public view returns (address[] memory) {\n        uint256 poolCount = 0;\n        address[] memory tempPools = new address[](comparisonTokens.length * feeTiers.length);\n\n        for (uint256 i = 0; i < comparisonTokens.length; i++) {\n            if (comparisonTokens[i] == token) continue;\n            for (uint256 j = 0; j < feeTiers.length; j++) {\n                address pool = factory.getPool(token, comparisonTokens[i], feeTiers[j]);\n                if (pool != address(0)) {\n                    tempPools[poolCount] = pool;\n                    poolCount++;\n                }\n            }\n        }\n\n        // Create an array of the actual size\n        address[] memory pools = new address[](poolCount);\n        for (uint256 i = 0; i < poolCount; i++) {\n            pools[i] = tempPools[i];\n        }\n\n        return pools;\n    }\n\n    function getTotalLiquidityForToken(address token) public view returns (uint128 totalLiquidity) {\n        address[] memory pools = getPoolsForToken(token);\n        for (uint256 i = 0; i < pools.length; i++) {\n            totalLiquidity += IUniswapV3Pool(pools[i]).liquidity();\n        }\n    }\n}\n"
    },
    "contracts/TaggingVerifier.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// pragma solidity 0.8.20;\npragma solidity 0.8.4;\n\nimport \"@reclaimprotocol/verifier-solidity-sdk/contracts/Reclaim.sol\";\nimport \"@reclaimprotocol/verifier-solidity-sdk/contracts/Addresses.sol\";\n \ncontract TaggingVerifier {\n  address public reclaimAddress;\n  // add providersHashes for your permitted providers\n  string[] public providersHashes;\n  mapping(string => address) public tokenSymbolToAddress;\n  mapping(string => string[]) public tokenSymbolToVerifiedTags;\n  mapping (string => mapping(string => bool)) public tokenSymbolToVerifiedTagsMap;\n  uint256 public lastUpdateTimestamp;\n\n  constructor(string[] memory _providersHashes){\n     providersHashes = _providersHashes;\n     reclaimAddress = Addresses.PLOYGON_MUMBAI_TESTNET; \n  }\n\n  function setTokenAddress(string memory tokenSymbol, address tokenAddress) public \n  // onlyOwner\n  {\n    tokenSymbolToAddress[tokenSymbol] = tokenAddress;\n  }\n\n  function split(string memory str) public pure returns (string[] memory) {\n        bytes memory strBytes = bytes(str);\n        uint256 count = 1;\n        for (uint256 i = 0; i < strBytes.length; i++) {\n            if (strBytes[i] == \",\") {\n                count++;\n            }\n        }\n        string[] memory result = new string[](count);\n        uint256 j = 0;\n        bytes memory temp;\n        for (uint256 i = 0; i < strBytes.length; i++) {\n            if (strBytes[i] == \",\") {\n                result[j] = string(temp);\n                j++;\n                temp = \"\";\n            } else {\n                temp = abi.encodePacked(temp, strBytes[i]);\n            }\n        }\n\n        result[j] = string(temp);\n        return result;\n    }\n\n  function verifyProof(Reclaim.Proof memory proof, string memory tokenSymbolTag) public {\n      Reclaim(reclaimAddress).verifyProof(proof);\n      require(keccak256(abi.encodePacked(proof.claimInfo.parameters)) == keccak256(abi.encodePacked(tokenSymbolTag)), \"Invalid token list parameters\");\n      string[] memory stringList = split(tokenSymbolTag);    \n      require(stringList.length == 2, \"Invalid token list parameters\");\n      if (tokenSymbolToVerifiedTags[stringList[0]].length == 0) {\n          tokenSymbolToVerifiedTags[stringList[0]] = new string[](0);\n      }\n      tokenSymbolToVerifiedTags[stringList[0]].push(stringList[1]);\n      tokenSymbolToVerifiedTagsMap[stringList[0]][stringList[1]] = true;\n      lastUpdateTimestamp = block.timestamp;\n  }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}