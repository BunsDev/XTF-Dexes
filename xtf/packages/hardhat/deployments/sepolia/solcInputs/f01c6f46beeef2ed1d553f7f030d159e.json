{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(\n    uint80 _roundId\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n\n  function latestRoundData()\n    external\n    view\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "contracts/IndexAggreagtor.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\nimport {AggregatorV3Interface} from \"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol\";\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nstruct TokenInfo {\n    string _symbol;\n    address _address;\n    uint32 _chainId;\n    address _aggregator;\n}\n\n\ncontract IndexAggregator {\n    TokenInfo[] public tokenInfo;\n    mapping(string => uint256) public tokens;\n    string[] public tokenSymbols;\n    uint256[] public totalSupplies;\n    mapping(uint256 => uint256[]) public movingAverage;\n    uint256 sampleSize;\n    uint256 timeWindow;\n    uint256 samplingFrequency;\n    uint256 lastSampleTime;\n    uint256[] public lastIndexOrder; \n    uint256 public lastIndexTimestamp;\n    uint256 public bribeUnit;\n\n    constructor(TokenInfo[] memory _tokenInfo, uint256 _timeWindow, uint256 _sampleSize) {\n        sampleSize = _sampleSize;\n        timeWindow = _timeWindow;\n        samplingFrequency = timeWindow / sampleSize;\n        for (uint256 i = 0; i < _tokenInfo.length; i++) {\n            tokenInfo.push(_tokenInfo[i]);\n            tokenSymbols.push(_tokenInfo[i]._symbol);\n            tokens[_tokenInfo[i]._symbol] = i;\n            totalSupplies.push(IERC20(_tokenInfo[i]._address).totalSupply());\n        }\n    }\n\n    function collectPriceFeeds() external {\n        require(block.timestamp - lastSampleTime >= samplingFrequency, \"IndexAggregator: Sampling frequency not reached\");\n\n        // if (block.timestamp - lastSampleTime >= timeWindow) {\n        //     for (uint256 i = 0; i < tokenInfo.length; i++) {\n        //         if (movingAverage[i].length > 0) {\n        //             movingAverage[i].pop();\n        //         }\n        //     }\n        // }\n\n        for (uint256 i = 0; i < tokenInfo.length; i++) {\n            (, int256 answer, , , ) = AggregatorV3Interface(tokenInfo[i]._aggregator).latestRoundData();\n\n            movingAverage[i].push(uint256(answer));\n            uint256 sum = 0;\n            if (movingAverage[i].length > sampleSize) {\n                movingAverage[i].pop();\n            }\n            for (uint256 j = 0; j < movingAverage[i].length; j++) {\n                sum += movingAverage[i][j];\n            }\n        }\n        lastSampleTime = block.timestamp;\n        // if there is enough bribe pay it to the caller\n        if (bribeUnit > 0) {\n            payable(msg.sender).transfer(bribeUnit);\n        }\n    }\n\n    function persistIndex(uint256[] memory indexOrders) public returns (bool)\n    {\n        // indexOrders is an array index order [2,0,1] means 2nd token, 0th token, 1st token for price calculation\n\n        require(indexOrders.length == tokenInfo.length, \"IndexAggregator: Invalid length of indexOrders\");\n\n        uint256 token_a_value;\n        uint256 token_b_value;\n        for (uint256 i = 0; i < indexOrders.length - 1; i++) {\n            token_a_value =  0;\n            token_b_value = 0;\n\n            for (uint256 j = 0; j < movingAverage[indexOrders[i]].length; j++) {\n                token_a_value += movingAverage[indexOrders[i]][j] * totalSupplies[indexOrders[i]];\n                token_b_value += movingAverage[indexOrders[i + 1]][j] * totalSupplies[indexOrders[i + 1]];\n            }\n\n\n            require(token_a_value > 0, \"IndexAggregator: Token value is zero\");\n            require(token_b_value > 0, \"IndexAggregator: Token value is zero\");\n            require(token_a_value > token_b_value, \"IndexAggregator: order is not correct\");\n        }\n\n        lastIndexOrder = indexOrders;\n        lastIndexTimestamp = block.timestamp;\n        return true;\n    }\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}