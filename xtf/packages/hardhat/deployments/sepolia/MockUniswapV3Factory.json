{
  "address": "0xb0E564d1e196FFFC140280f7f0BE8D48f48b2F3a",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint24",
          "name": "fee",
          "type": "uint24"
        },
        {
          "indexed": true,
          "internalType": "int24",
          "name": "tickSpacing",
          "type": "int24"
        }
      ],
      "name": "FeeAmountEnabled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnerChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token1",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint24",
          "name": "fee",
          "type": "uint24"
        },
        {
          "indexed": false,
          "internalType": "int24",
          "name": "tickSpacing",
          "type": "int24"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "PoolCreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint24",
          "name": "",
          "type": "uint24"
        }
      ],
      "name": "_pools",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        },
        {
          "internalType": "uint24",
          "name": "fee",
          "type": "uint24"
        }
      ],
      "name": "createPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint24",
          "name": "fee",
          "type": "uint24"
        },
        {
          "internalType": "int24",
          "name": "tickSpacing",
          "type": "int24"
        }
      ],
      "name": "enableFeeAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint24",
          "name": "fee",
          "type": "uint24"
        }
      ],
      "name": "feeAmountTickSpacing",
      "outputs": [
        {
          "internalType": "int24",
          "name": "",
          "type": "int24"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        },
        {
          "internalType": "uint24",
          "name": "fee",
          "type": "uint24"
        }
      ],
      "name": "getPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "setOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        },
        {
          "internalType": "uint24",
          "name": "fee",
          "type": "uint24"
        },
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "setPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x25acc67803a11e1a8960ae332257976fd25be4edd15b948e7f3519bb8c9e097c",
  "receipt": {
    "to": null,
    "from": "0x2a1F5eB3e84e58e6F1e565306298B9dE1273f203",
    "contractAddress": "0xb0E564d1e196FFFC140280f7f0BE8D48f48b2F3a",
    "transactionIndex": 43,
    "gasUsed": "266139",
    "logsBloom": "0x
    "blockHash": "0xbbc0a04d5c746c0cec47269c2d7069e7f8da19a2a219e9f4c8eacf140dce0040",
    "transactionHash": "0x25acc67803a11e1a8960ae332257976fd25be4edd15b948e7f3519bb8c9e097c",
    "logs": [],
    "blockNumber": 6021448,
    "cumulativeGasUsed": "4470036",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "2c007285faf9b4a97aafef1992660d50",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"indexed\":true,\"internalType\":\"int24\",\"name\":\"tickSpacing\",\"type\":\"int24\"}],\"name\":\"FeeAmountEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"indexed\":false,\"internalType\":\"int24\",\"name\":\"tickSpacing\",\"type\":\"int24\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"PoolCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"name\":\"_pools\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"}],\"name\":\"createPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"int24\",\"name\":\"tickSpacing\",\"type\":\"int24\"}],\"name\":\"enableFeeAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"}],\"name\":\"feeAmountTickSpacing\",\"outputs\":[{\"internalType\":\"int24\",\"name\":\"\",\"type\":\"int24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"}],\"name\":\"getPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"setPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"FeeAmountEnabled(uint24,int24)\":{\"params\":{\"fee\":\"The enabled fee, denominated in hundredths of a bip\",\"tickSpacing\":\"The minimum number of ticks between initialized ticks for pools created with the given fee\"}},\"OwnerChanged(address,address)\":{\"params\":{\"newOwner\":\"The owner after the owner was changed\",\"oldOwner\":\"The owner before the owner was changed\"}},\"PoolCreated(address,address,uint24,int24,address)\":{\"params\":{\"fee\":\"The fee collected upon every swap in the pool, denominated in hundredths of a bip\",\"pool\":\"The address of the created pool\",\"tickSpacing\":\"The minimum number of ticks between initialized ticks\",\"token0\":\"The first token of the pool by address sort order\",\"token1\":\"The second token of the pool by address sort order\"}}},\"kind\":\"dev\",\"methods\":{\"createPool(address,address,uint24)\":{\"details\":\"tokenA and tokenB may be passed in either order: token0/token1 or token1/token0. tickSpacing is retrieved from the fee. The call will revert if the pool already exists, the fee is invalid, or the token arguments are invalid.\",\"params\":{\"fee\":\"The desired fee for the pool\",\"tokenA\":\"One of the two tokens in the desired pool\",\"tokenB\":\"The other of the two tokens in the desired pool\"},\"returns\":{\"pool\":\"The address of the newly created pool\"}},\"enableFeeAmount(uint24,int24)\":{\"details\":\"Fee amounts may never be removed once enabled\",\"params\":{\"fee\":\"The fee amount to enable, denominated in hundredths of a bip (i.e. 1e-6)\",\"tickSpacing\":\"The spacing between ticks to be enforced for all pools created with the given fee amount\"}},\"feeAmountTickSpacing(uint24)\":{\"details\":\"A fee amount can never be removed, so this value should be hard coded or cached in the calling context\",\"params\":{\"fee\":\"The enabled fee, denominated in hundredths of a bip. Returns 0 in case of unenabled fee\"},\"returns\":{\"_0\":\"The tick spacing\"}},\"getPool(address,address,uint24)\":{\"details\":\"tokenA and tokenB may be passed in either token0/token1 or token1/token0 order\",\"params\":{\"fee\":\"The fee collected upon every swap in the pool, denominated in hundredths of a bip\",\"tokenA\":\"The contract address of either token0 or token1\",\"tokenB\":\"The contract address of the other token\"},\"returns\":{\"_0\":\"The pool address\"}},\"owner()\":{\"details\":\"Can be changed by the current owner via setOwner\",\"returns\":{\"_0\":\"The address of the factory owner\"}},\"setOwner(address)\":{\"details\":\"Must be called by the current owner\",\"params\":{\"_owner\":\"The new owner of the factory\"}}},\"version\":1},\"userdoc\":{\"events\":{\"FeeAmountEnabled(uint24,int24)\":{\"notice\":\"Emitted when a new fee amount is enabled for pool creation via the factory\"},\"OwnerChanged(address,address)\":{\"notice\":\"Emitted when the owner of the factory is changed\"},\"PoolCreated(address,address,uint24,int24,address)\":{\"notice\":\"Emitted when a pool is created\"}},\"kind\":\"user\",\"methods\":{\"createPool(address,address,uint24)\":{\"notice\":\"Creates a pool for the given two tokens and fee\"},\"enableFeeAmount(uint24,int24)\":{\"notice\":\"Enables a fee amount with the given tickSpacing\"},\"feeAmountTickSpacing(uint24)\":{\"notice\":\"Returns the tick spacing for a given fee amount, if enabled, or 0 if not enabled\"},\"getPool(address,address,uint24)\":{\"notice\":\"Returns the pool address for a given pair of tokens and a fee, or address 0 if it does not exist\"},\"owner()\":{\"notice\":\"Returns the current owner of the factory\"},\"setOwner(address)\":{\"notice\":\"Updates the owner of the factory\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MockUniswapV3Factory.sol\":\"MockUniswapV3Factory\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/IUniswapV3Factory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title The interface for the Uniswap V3 Factory\\n/// @notice The Uniswap V3 Factory facilitates creation of Uniswap V3 pools and control over the protocol fees\\ninterface IUniswapV3Factory {\\n    /// @notice Emitted when the owner of the factory is changed\\n    /// @param oldOwner The owner before the owner was changed\\n    /// @param newOwner The owner after the owner was changed\\n    event OwnerChanged(address indexed oldOwner, address indexed newOwner);\\n\\n    /// @notice Emitted when a pool is created\\n    /// @param token0 The first token of the pool by address sort order\\n    /// @param token1 The second token of the pool by address sort order\\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\\n    /// @param tickSpacing The minimum number of ticks between initialized ticks\\n    /// @param pool The address of the created pool\\n    event PoolCreated(\\n        address indexed token0,\\n        address indexed token1,\\n        uint24 indexed fee,\\n        int24 tickSpacing,\\n        address pool\\n    );\\n\\n    /// @notice Emitted when a new fee amount is enabled for pool creation via the factory\\n    /// @param fee The enabled fee, denominated in hundredths of a bip\\n    /// @param tickSpacing The minimum number of ticks between initialized ticks for pools created with the given fee\\n    event FeeAmountEnabled(uint24 indexed fee, int24 indexed tickSpacing);\\n\\n    /// @notice Returns the current owner of the factory\\n    /// @dev Can be changed by the current owner via setOwner\\n    /// @return The address of the factory owner\\n    function owner() external view returns (address);\\n\\n    /// @notice Returns the tick spacing for a given fee amount, if enabled, or 0 if not enabled\\n    /// @dev A fee amount can never be removed, so this value should be hard coded or cached in the calling context\\n    /// @param fee The enabled fee, denominated in hundredths of a bip. Returns 0 in case of unenabled fee\\n    /// @return The tick spacing\\n    function feeAmountTickSpacing(uint24 fee) external view returns (int24);\\n\\n    /// @notice Returns the pool address for a given pair of tokens and a fee, or address 0 if it does not exist\\n    /// @dev tokenA and tokenB may be passed in either token0/token1 or token1/token0 order\\n    /// @param tokenA The contract address of either token0 or token1\\n    /// @param tokenB The contract address of the other token\\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\\n    /// @return pool The pool address\\n    function getPool(\\n        address tokenA,\\n        address tokenB,\\n        uint24 fee\\n    ) external view returns (address pool);\\n\\n    /// @notice Creates a pool for the given two tokens and fee\\n    /// @param tokenA One of the two tokens in the desired pool\\n    /// @param tokenB The other of the two tokens in the desired pool\\n    /// @param fee The desired fee for the pool\\n    /// @dev tokenA and tokenB may be passed in either order: token0/token1 or token1/token0. tickSpacing is retrieved\\n    /// from the fee. The call will revert if the pool already exists, the fee is invalid, or the token arguments\\n    /// are invalid.\\n    /// @return pool The address of the newly created pool\\n    function createPool(\\n        address tokenA,\\n        address tokenB,\\n        uint24 fee\\n    ) external returns (address pool);\\n\\n    /// @notice Updates the owner of the factory\\n    /// @dev Must be called by the current owner\\n    /// @param _owner The new owner of the factory\\n    function setOwner(address _owner) external;\\n\\n    /// @notice Enables a fee amount with the given tickSpacing\\n    /// @dev Fee amounts may never be removed once enabled\\n    /// @param fee The fee amount to enable, denominated in hundredths of a bip (i.e. 1e-6)\\n    /// @param tickSpacing The spacing between ticks to be enforced for all pools created with the given fee amount\\n    function enableFeeAmount(uint24 fee, int24 tickSpacing) external;\\n}\",\"keccak256\":\"0x481936e26021d5a9d68da06803eb1c8474673d281c256c14a471764c59c031e6\",\"license\":\"GPL-2.0-or-later\"},\"contracts/IUniswapV3Pool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n\\n/// @title The interface for a Uniswap V3 Pool\\n/// @notice A Uniswap pool facilitates swapping and automated market making between any two assets that strictly conform\\n/// to the ERC20 specification\\n/// @dev The pool interface is broken up into many smaller pieces\\ninterface IUniswapV3Pool{\\n    function liquidity() external view returns (uint128);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n}\",\"keccak256\":\"0xd9fa5d92a3c7d1f53ff0ddbd4e04a5ef84faae96b067597e27016b8567e5fafc\",\"license\":\"GPL-2.0-or-later\"},\"contracts/MockUniswapV3Factory.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\nimport \\\"./IUniswapV3Factory.sol\\\";\\nimport \\\"./IUniswapV3Pool.sol\\\";\\n\\n\\ncontract MockUniswapV3Factory is IUniswapV3Factory {\\n\\n    address _owner;\\n    mapping(address => mapping(address => mapping(uint24 => address))) public _pools;\\n\\n    constructor() {\\n        _owner = msg.sender;\\n    }\\n\\n\\tfunction getPool(\\n\\t\\taddress tokenA,\\n\\t\\taddress tokenB,\\n\\t\\tuint24 fee\\n\\t) external view override returns (address) {\\n\\t\\treturn _pools[tokenA][tokenB][fee];\\n\\t}\\n\\n\\tfunction setPool(\\n\\t\\taddress tokenA,\\n\\t\\taddress tokenB,\\n\\t\\tuint24 fee,\\n\\t\\taddress pool\\n\\t) external {\\n\\t\\t_pools[tokenA][tokenB][fee] = pool;\\n\\t}\\n\\n\\tfunction owner() external view override returns (address) {\\n        return _owner;\\n    }\\n\\n\\tfunction feeAmountTickSpacing(\\n\\t\\tuint24 fee\\n\\t) external view override returns (int24) {\\n        return 0;\\n    }\\n\\n\\tfunction createPool(\\n\\t\\taddress tokenA,\\n\\t\\taddress tokenB,\\n\\t\\tuint24 fee\\n\\t) external override returns (address pool) {}\\n\\n\\tfunction setOwner(address _owner) external override {}\\n\\n\\tfunction enableFeeAmount(uint24 fee, int24 tickSpacing) external override {}\\n}\",\"keccak256\":\"0x78e99b1a02d8fc8f9b98de5d6b797af671f0c87a1cc274648e8c6e8220dc1cde\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50600080546001600160a01b03191633179055610372806100326000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c80638da5cb5b1161005b5780638da5cb5b1461013f57806397c5d50714610150578063a16712951461018a578063e9321d15146101a157600080fd5b806313af40351461008d5780631698ee82146100a057806322afcccb146101065780638a7c195f1461012d575b600080fd5b61009e61009b366004610218565b50565b005b6100e96100ae36600461024d565b6001600160a01b039283166000908152600160209081526040808320948616835293815283822062ffffff9390931682529190915220541690565b6040516001600160a01b0390911681526020015b60405180910390f35b61011a610114366004610290565b50600090565b60405160029190910b81526020016100fd565b61009e61013b3660046102ab565b5050565b6000546001600160a01b03166100e9565b6100e961015e36600461024d565b60016020908152600093845260408085208252928452828420905282529020546001600160a01b031681565b6100e961019836600461024d565b60009392505050565b61009e6101af3660046102e8565b6001600160a01b039384166000908152600160209081526040808320958716835294815284822062ffffff9490941682529290925291902080546001600160a01b03191691909216179055565b80356001600160a01b038116811461021357600080fd5b919050565b60006020828403121561022a57600080fd5b610233826101fc565b9392505050565b803562ffffff8116811461021357600080fd5b60008060006060848603121561026257600080fd5b61026b846101fc565b9250610279602085016101fc565b91506102876040850161023a565b90509250925092565b6000602082840312156102a257600080fd5b6102338261023a565b600080604083850312156102be57600080fd5b6102c78361023a565b915060208301358060020b81146102dd57600080fd5b809150509250929050565b600080600080608085870312156102fe57600080fd5b610307856101fc565b9350610315602086016101fc565b92506103236040860161023a565b9150610331606086016101fc565b90509295919450925056fea2646970667358221220fbd381fb8c3ca3d24d03a27fb2a29b31204d7674c549281f92bff1c09c8efa6364736f6c63430008140033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100885760003560e01c80638da5cb5b1161005b5780638da5cb5b1461013f57806397c5d50714610150578063a16712951461018a578063e9321d15146101a157600080fd5b806313af40351461008d5780631698ee82146100a057806322afcccb146101065780638a7c195f1461012d575b600080fd5b61009e61009b366004610218565b50565b005b6100e96100ae36600461024d565b6001600160a01b039283166000908152600160209081526040808320948616835293815283822062ffffff9390931682529190915220541690565b6040516001600160a01b0390911681526020015b60405180910390f35b61011a610114366004610290565b50600090565b60405160029190910b81526020016100fd565b61009e61013b3660046102ab565b5050565b6000546001600160a01b03166100e9565b6100e961015e36600461024d565b60016020908152600093845260408085208252928452828420905282529020546001600160a01b031681565b6100e961019836600461024d565b60009392505050565b61009e6101af3660046102e8565b6001600160a01b039384166000908152600160209081526040808320958716835294815284822062ffffff9490941682529290925291902080546001600160a01b03191691909216179055565b80356001600160a01b038116811461021357600080fd5b919050565b60006020828403121561022a57600080fd5b610233826101fc565b9392505050565b803562ffffff8116811461021357600080fd5b60008060006060848603121561026257600080fd5b61026b846101fc565b9250610279602085016101fc565b91506102876040850161023a565b90509250925092565b6000602082840312156102a257600080fd5b6102338261023a565b600080604083850312156102be57600080fd5b6102c78361023a565b915060208301358060020b81146102dd57600080fd5b809150509250929050565b600080600080608085870312156102fe57600080fd5b610307856101fc565b9350610315602086016101fc565b92506103236040860161023a565b9150610331606086016101fc565b90509295919450925056fea2646970667358221220fbd381fb8c3ca3d24d03a27fb2a29b31204d7674c549281f92bff1c09c8efa6364736f6c63430008140033",
  "devdoc": {
    "events": {
      "FeeAmountEnabled(uint24,int24)": {
        "params": {
          "fee": "The enabled fee, denominated in hundredths of a bip",
          "tickSpacing": "The minimum number of ticks between initialized ticks for pools created with the given fee"
        }
      },
      "OwnerChanged(address,address)": {
        "params": {
          "newOwner": "The owner after the owner was changed",
          "oldOwner": "The owner before the owner was changed"
        }
      },
      "PoolCreated(address,address,uint24,int24,address)": {
        "params": {
          "fee": "The fee collected upon every swap in the pool, denominated in hundredths of a bip",
          "pool": "The address of the created pool",
          "tickSpacing": "The minimum number of ticks between initialized ticks",
          "token0": "The first token of the pool by address sort order",
          "token1": "The second token of the pool by address sort order"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "createPool(address,address,uint24)": {
        "details": "tokenA and tokenB may be passed in either order: token0/token1 or token1/token0. tickSpacing is retrieved from the fee. The call will revert if the pool already exists, the fee is invalid, or the token arguments are invalid.",
        "params": {
          "fee": "The desired fee for the pool",
          "tokenA": "One of the two tokens in the desired pool",
          "tokenB": "The other of the two tokens in the desired pool"
        },
        "returns": {
          "pool": "The address of the newly created pool"
        }
      },
      "enableFeeAmount(uint24,int24)": {
        "details": "Fee amounts may never be removed once enabled",
        "params": {
          "fee": "The fee amount to enable, denominated in hundredths of a bip (i.e. 1e-6)",
          "tickSpacing": "The spacing between ticks to be enforced for all pools created with the given fee amount"
        }
      },
      "feeAmountTickSpacing(uint24)": {
        "details": "A fee amount can never be removed, so this value should be hard coded or cached in the calling context",
        "params": {
          "fee": "The enabled fee, denominated in hundredths of a bip. Returns 0 in case of unenabled fee"
        },
        "returns": {
          "_0": "The tick spacing"
        }
      },
      "getPool(address,address,uint24)": {
        "details": "tokenA and tokenB may be passed in either token0/token1 or token1/token0 order",
        "params": {
          "fee": "The fee collected upon every swap in the pool, denominated in hundredths of a bip",
          "tokenA": "The contract address of either token0 or token1",
          "tokenB": "The contract address of the other token"
        },
        "returns": {
          "_0": "The pool address"
        }
      },
      "owner()": {
        "details": "Can be changed by the current owner via setOwner",
        "returns": {
          "_0": "The address of the factory owner"
        }
      },
      "setOwner(address)": {
        "details": "Must be called by the current owner",
        "params": {
          "_owner": "The new owner of the factory"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "FeeAmountEnabled(uint24,int24)": {
        "notice": "Emitted when a new fee amount is enabled for pool creation via the factory"
      },
      "OwnerChanged(address,address)": {
        "notice": "Emitted when the owner of the factory is changed"
      },
      "PoolCreated(address,address,uint24,int24,address)": {
        "notice": "Emitted when a pool is created"
      }
    },
    "kind": "user",
    "methods": {
      "createPool(address,address,uint24)": {
        "notice": "Creates a pool for the given two tokens and fee"
      },
      "enableFeeAmount(uint24,int24)": {
        "notice": "Enables a fee amount with the given tickSpacing"
      },
      "feeAmountTickSpacing(uint24)": {
        "notice": "Returns the tick spacing for a given fee amount, if enabled, or 0 if not enabled"
      },
      "getPool(address,address,uint24)": {
        "notice": "Returns the pool address for a given pair of tokens and a fee, or address 0 if it does not exist"
      },
      "owner()": {
        "notice": "Returns the current owner of the factory"
      },
      "setOwner(address)": {
        "notice": "Updates the owner of the factory"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6070,
        "contract": "contracts/MockUniswapV3Factory.sol:MockUniswapV3Factory",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 6078,
        "contract": "contracts/MockUniswapV3Factory.sol:MockUniswapV3Factory",
        "label": "_pools",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_mapping(t_uint24,t_address)))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_mapping(t_uint24,t_address)))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => mapping(uint24 => address)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_mapping(t_uint24,t_address))"
      },
      "t_mapping(t_address,t_mapping(t_uint24,t_address))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint24 => address))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint24,t_address)"
      },
      "t_mapping(t_uint24,t_address)": {
        "encoding": "mapping",
        "key": "t_uint24",
        "label": "mapping(uint24 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_uint24": {
        "encoding": "inplace",
        "label": "uint24",
        "numberOfBytes": "3"
      }
    }
  }
}